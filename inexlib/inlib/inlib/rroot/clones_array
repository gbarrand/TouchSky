// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_rroot_clones_array
#define inlib_rroot_clones_array

#include "obj_array"

namespace inlib {
namespace rroot {

template <class T>
class clones_array : public obj_array<T> {
  typedef obj_array<T> parent;
private:
  static const std::string& s_store_class() {
    static const std::string s_v("TClonesArray");
    return s_v;
  }
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::rroot::clones_array<"+T::s_class()+">");
    return s_v;
  }
public: //iro
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast< clones_array<T> >(this,a_class)) return p;
    return parent::cast(a_class);
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  static cid id_class() {return clones_array_cid()+T::id_class();}
  virtual void* cast(cid a_class) const {
    if(void* p = cmp_cast<clones_array>(this,a_class)) {return p;}
    return parent::cast(a_class);
  }
  virtual iro* copy() const {return new clones_array<T>(*this);}
public:
  clones_array(ifac& a_fac,bool a_owner,bool a_warn) //a_warn used if a_owner=false.
  :parent(a_fac,a_owner,a_warn)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~clones_array(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  clones_array(const clones_array& a_from)
  :iro(a_from)
  ,parent(a_from)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  clones_array& operator=(const clones_array& a_from){
    if(&a_from==this) return *this;
    return parent::operator=(a_from);
  }
public:
  bool stream(buffer& a_buffer,const ifac::args& a_args,bool a_accept_null = false) {
    parent::_clear();
    short v;
    unsigned int sp, bc;
    if(!a_buffer.read_version(v,sp,bc)) return false;
    if(!parent::stream(a_buffer,a_args,a_accept_null)) return false;
    return a_buffer.check_byte_count(sp,bc,s_store_class());
  }
};

}}

#endif
