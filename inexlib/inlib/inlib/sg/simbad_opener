// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_simbad_opener
#define inlib_sg_simbad_opener

#include "iopener"
#include "gui_viewer"
#include "add_stars"

#include "../astro/radecs"
#include "../astro/simbad"
#include "../fileis"

namespace inlib {
namespace sg {

class simbad_opener : public virtual iopener {
  typedef iopener parent;
  INLIB_SCLASS(inlib::sg::simbad_opener)
public:
  virtual parent* copy() const {return new simbad_opener(*this);}
  virtual const std::string& s_cls() const {return s_class();}
  virtual bool is(const std::string& a_path,bool& a_is) const {return file::is_simbad(a_path,a_is);}
  virtual bool open(const std::string& a_path,viewer& a_viewer,const args& a_args,bool& a_done) const {
    a_done = false;
    char* buffer;
    long length;
    if(!inlib::file::read_bytes(a_path,buffer,length)) {
      a_viewer.out() << "inlib::sg::simbad_opener::open : can't open file." << std::endl;
      //a_gv.map_warn("can't open");
      return false;
    }
    bool status = _open(length,buffer,a_viewer,a_args,a_done);
    delete [] buffer;
#ifdef INLIB_MEM
    inlib::mem::decrement(inlib::s_new().c_str());
#endif
    return status;
  }
  virtual bool is(uint64 a_size,const char* a_buffer,bool& a_is) const {
    if(a_size<10) {a_is = false;return true;}
    if(a_buffer[0]!=':') {a_is = false;return true;}
    if(a_buffer[1]!=':') {a_is = false;return true;}
    if(a_buffer[2]!='s') {a_is = false;return true;}
    if(a_buffer[3]!='c') {a_is = false;return true;}
    if(a_buffer[4]!='r') {a_is = false;return true;}
    if(a_buffer[5]!='i') {a_is = false;return true;}
    if(a_buffer[6]!='p') {a_is = false;return true;}
    if(a_buffer[7]!='t') {a_is = false;return true;}
    if(a_buffer[8]!=':') {a_is = false;return true;}
    if(a_buffer[9]!=':') {a_is = false;return true;}
    a_is = true;
    return true;
  }
  virtual bool open(uint64 a_size,const char* a_buffer,viewer& a_viewer,const args& a_args,bool& a_done) const {
    return _open(a_size,a_buffer,a_viewer,a_args,a_done);
  }
  virtual bool open(const std::string&,viewer&,const xml::scenario&,cmaps_t&,const args&,bool& a_done) const {
    a_done = false;
    return true;
  }
public:
  simbad_opener(){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~simbad_opener(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  simbad_opener(const simbad_opener& a_from):parent(a_from){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  simbad_opener& operator=(const simbad_opener&){return *this;}
private:
  static bool _open(uint64 a_size,const char* a_buffer,viewer& a_viewer,const args& a_args,bool& a_done) {
    a_done = false;

#define INLIB_SIMBAD_OPENER_ERR(a__message) a_viewer.out() << #a__message << std::endl

    //////////////////////////////////////////////
    /// args : ///////////////////////////////////
    //////////////////////////////////////////////
    // it coworks with inlib/sg/cfitsio_stars.
    // dangerous logic :
    separator* sep = 0;
   {std::string _s;
    if(!a_args.find("node",_s)) {INLIB_SIMBAD_OPENER_ERR("err node");return false;}
    void* p;
    if(!to_pointer(_s,p)) {INLIB_SIMBAD_OPENER_ERR("err pnode");return false;}
    sep = (separator*)p;}

    base_freetype* ttf = 0;
   {std::string _s;
    if(!a_args.find("ttf",_s)) {INLIB_SIMBAD_OPENER_ERR("err ttf");return false;}
    void* p;
    if(!to_pointer(_s,p)) {INLIB_SIMBAD_OPENER_ERR("err pttf");return false;}
    ttf = (base_freetype*)p;}

    double corners[8];
    if(!a_args.find<double>("corner_0",corners[0],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 0");return false;}
    if(!a_args.find<double>("corner_1",corners[1],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 1");return false;}
    if(!a_args.find<double>("corner_2",corners[2],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 2");return false;}
    if(!a_args.find<double>("corner_3",corners[3],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 3");return false;}
    if(!a_args.find<double>("corner_4",corners[4],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 4");return false;}
    if(!a_args.find<double>("corner_5",corners[5],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 5");return false;}
    if(!a_args.find<double>("corner_6",corners[6],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 6");return false;}
    if(!a_args.find<double>("corner_7",corners[7],0)) {INLIB_SIMBAD_OPENER_ERR("err cor 7");return false;}

    double stars_radius;
    if(!a_args.find<double>("stars_radius",stars_radius,999.99)) {INLIB_SIMBAD_OPENER_ERR("err stars_radius");return false;}
    double sky_radius;
    if(!a_args.find<double>("sky_radius",sky_radius,default_sky_radius())) {INLIB_SIMBAD_OPENER_ERR("err sky_radius");return false;}
    float ring_min;
    if(!a_args.find<float>("ring_min",ring_min,0.05f)) {INLIB_SIMBAD_OPENER_ERR("err ring_min");return false;}
    float ring_max;
    if(!a_args.find<float>("ring_max",ring_max,0.065f)) {INLIB_SIMBAD_OPENER_ERR("err ring_max");return false;}

    //////////////////////////////////////////////
    //////////////////////////////////////////////
    //////////////////////////////////////////////

    gui_viewer* _gv = cast_gui_viewer(a_viewer);
    if(!_gv) return false;
    gui_viewer& a_gv = *_gv;

    std::ostream& out = a_gv.out();

    std::vector<star> simbad_stars;
    std::string type;
    simbad::read_catalog(a_size,a_buffer,type,simbad_stars);

    std::vector<star> stars;
    search_stars(simbad_stars,corners,sky_radius,stars);

    vec3f _center;
   {std::vector<vec3f> vcs;
    radecs_center(corners,sky_radius,vcs,_center);}

    add_stars(*sep,stars,*ttf,_center,stars_radius,ring_min,ring_max);

    a_done = true;
    return true;
  }
};

#undef INLIB_SIMBAD_OPENER_ERR

}}

//inlib_build_use kernel

#endif
