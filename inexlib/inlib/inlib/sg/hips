// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_hips
#define inlib_sg_hips

#include "nodekit"

#include "sf_enum"
#include "sf_lut"
#include "sf_string"
#include "mf"

#include "tex_quadrilateral"

#include "../HEALPix"
#include "../mathT"
#include "../net/http"
#include "../cfitsio"

namespace inlib {
namespace sg {

class hips : public node {
  INLIB_HEADER(hips,inlib::sg::hips,node)
private:
  static unsigned int DIRSIZE() {return 10000;}
protected:
  virtual bool load_doc(std::ostream& a_out,const char* a_doc,uint64 a_ldoc,
                        unsigned int& a_cols,unsigned int& a_rows,char*& a_buffer,
                        cfitsio_bitpix_code& a_bitpix) = 0;
public:
  sf<float> height;
  sf_string path;

  sf_enum<auto_lut_policy> auto_lut;
  sf_lut<float> lut;
  mf_vec<colorf,float> colors;
  sf_string infos;

  sf<bool> dynamic;
  //enum _support {
  //  support_moll_heal = 1,
  //  support_moll_rect = 2,
  //  support_sphere = 3
  //};
  //sf_enum<_support> support;
  sf<float> cut;
  sf<unsigned int> order; //vis_nside = pow(2,order)
public:
  virtual const desc_fields& node_desc_fields() const {
    INLIB_FIELD_DESC_NODE_CLASS(inlib::sg::hips)
    static const desc_fields s_v(parent::node_desc_fields(),9, //WARNING : take care of count.
      INLIB_ARG_FIELD_DESC(height),
      INLIB_ARG_FIELD_DESC(path),

      INLIB_ARG_FIELD_DESC_ENUMS_BEG(auto_lut,3)
        "auto_lut_none",auto_lut_none,
        "auto_lut_min_max",auto_lut_min_max,
        "auto_lut_mean_rms",auto_lut_mean_rms
      INLIB_ARG_FIELD_DESC_ENUMS_END,
      
      INLIB_ARG_FIELD_DESC(lut),
      INLIB_ARG_FIELD_DESC(colors),

      INLIB_ARG_FIELD_DESC(dynamic),
      //INLIB_ARG_FIELD_DESC(support)
      //INLIB_ARG_FIELD_DESC_ENUM(support_moll_heal)
      //INLIB_ARG_FIELD_DESC_ENUM(support_moll_rect)
      //INLIB_ARG_FIELD_DESC_ENUM(support_sphere)
      INLIB_ARG_FIELD_DESC(cut),
      INLIB_ARG_FIELD_DESC(order),

      INLIB_ARG_FIELD_DESC_NOT_EDITABLE(infos)
    );
    return s_v;
  }
private:
  void add_fields(){
    add_field(&height);
    add_field(&path);

    add_field(&auto_lut);
    add_field(&lut);
    add_field(&colors);
    add_field(&infos);

    add_field(&dynamic);
    //add_field(&support);
    add_field(&cut);
    add_field(&order);
  }
public:
  hips(bool a_local,const std::string& a_data_dir,const std::string& a_host,unsigned int a_port)
  :parent() 
  
  ,height(1)
  ,path()

  ,auto_lut(auto_lut_none)
  ,lut()
  ,colors()
  ,infos()

  ,dynamic(false)
  //,support(support_sphere)
  ,cut(1) //>=1 => cut nothing.
  ,order(3)

  ,m_local(a_local)  
  ,m_data_dir(a_data_dir)  
  ,m_host(a_host)
  ,m_port(a_port)
  ,m_draw_edges(false)
  {
    add_fields();
  }
  virtual ~hips(){}
public:
  hips(const hips& a_from)
  :parent(a_from) 

  ,height(a_from.height)
  ,path(a_from.path)

  ,auto_lut(a_from.auto_lut)
  ,lut(a_from.lut)
  ,colors(a_from.colors)
  ,infos(a_from.infos)

  ,dynamic(a_from.dynamic)
  //,support(a_from.support)
  ,cut(a_from.cut)
  ,order(a_from.order)

  ,m_local(a_from.m_local)  
  ,m_data_dir(a_from.m_data_dir)  
  ,m_host(a_from.m_host)
  ,m_port(a_from.m_port)
  ,m_draw_edges(a_from.m_draw_edges)
  {
    add_fields();
  }
  hips& operator=(const hips& a_from){
    parent::operator=(a_from);

    height = a_from.height;
    path = a_from.path;

    auto_lut = a_from.auto_lut;
    lut = a_from.lut;
    colors = a_from.colors;
    infos = a_from.infos;

    dynamic = a_from.dynamic;
    //support = a_from.support;
    cut = a_from.cut;
    order = a_from.order;

    m_local = a_from.m_local;
    m_data_dir = a_from.m_data_dir;
    m_host = a_from.m_host;
    m_port = a_from.m_port;
    m_draw_edges = a_from.m_draw_edges;

    return *this;
  }
public:
  virtual void render(render_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    m_group.render(a_action);
  }
  virtual void pick(pick_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    nodekit_pick(a_action,m_group,this);
  }
  virtual void bbox(bbox_action& a_action) {
    look_update_sg(a_action.out(),a_action.state());
    if(dynamic.value()) {
      // extend to more than the cut region to be able
      // to grab all sides of a cube_manip :
      float h2 = 0.5f*height.value();
      float w2 = 2*h2;
      float d2 = h2*0.1f;
      a_action.box().extend_by(w2,h2,d2);
      a_action.box().extend_by(-w2,-h2,-d2);
    } else {
      m_group.bbox(a_action);
    }     
  }
protected:
  void look_update_sg(std::ostream& a_out,const state& a_state) {
    bool draw_edges = false;
    if(dynamic.value()) {
      if(m_not_dynamic==mat4_zero<float>()) m_not_dynamic = a_state.m_model;
      const mat4f& mtx = a_state.m_model;
      if(touched()||(m_draw_edges!=draw_edges)||(mtx!=m_old_model)) {
        mat4f mtx_inv;
        mtx.invert(mtx_inv);
        mtx_inv *= m_not_dynamic;
        update_sg(a_out,mtx_inv,draw_edges);
        reset_touched();
        m_draw_edges = draw_edges;
        m_old_model = mtx;
        m_dynamic = mtx_inv;
      }
    } else {
      if(m_dynamic==mat4_zero<float>()) m_dynamic.set_identity();
      if(touched()||(m_draw_edges!=draw_edges)) {
        update_sg(a_out,m_dynamic,draw_edges);
        reset_touched();
        m_draw_edges = draw_edges;
      }
      m_not_dynamic = a_state.m_model*m_dynamic;
    }
  }

  void update_sg(std::ostream& a_out,const mat4f& a_mtx,bool a_draw_edges) {

    m_group.clear();

    if(path.value().empty()) return;
    if(colors.size()<3) return;

    unsigned int vis_order = order.value();
    unsigned int vis_nside;
    power<unsigned int>(2,vis_order,vis_nside); //order=4 vis_nside=16.

    //bool to_cut = cut.value()<1?true:false;

    /////////////////////////////////////////////
    /////////////////////////////////////////////
    /////////////////////////////////////////////
    //if(support.value()==support_sphere) {

      if( (height.value()<=0) || (cut.value()<=0) ) return;

      float zcut = -2.0f*cut.value()+1.0f; //support_sphere. zcut in [-2,0]
      // cut = 1 -> zcut -1
      // cut = 1/2 -> zcut 0
      // cut = 0 -> zcut 1

      unsigned int npix = 12*vis_nside*vis_nside;

      //float _radius = 0.5f*height.value();

      std::string ext("fits");
      net::http http(a_out,false/*verbose*/);
      if(!http.start(m_host,m_port)) {m_group.clear();return;}

      // In HIPS doc, 4.1 Image tile format, it is said :
      //  Inside a tile, the pixels are arranged in the natural spacial
      // ordering (do not follow the NESTED HEALPix scheme). 

    //bool is_ring = false; //then nest.
      bool is_ring = true;

      std::vector<vec3d> pts;

      size_t all_number = 0;
      double all_mn = 0;
      double all_mx = 0;
      double all_S = 0;
      double all_S2 = 0;

      std::vector<data*> _data;

     {for(unsigned int ipix=0;ipix<npix;ipix++) {

        if(!HEALPix::boundaries(is_ring,vis_nside,ipix,1,pts)) {}
        vec3d& _pt0 = pts[0];
        a_mtx.mul_dir_3d(_pt0.x(),_pt0.y(),_pt0.z());
        if(float(_pt0.z())<zcut) continue;

        unsigned int Dir = ipix/DIRSIZE();
        Dir *= DIRSIZE();

        std::string _path = path.value();

        _path += "/Norder";
        numas(vis_order,_path);
        _path += "/Dir";
        numas(Dir,_path);
        _path += "/Npix";
        numas(ipix,_path);
        _path += "."+ext;

        char* doc;uint64 ldoc;
        if(!GET(http,_path,doc,ldoc)) {
          a_out << "inlib::sg::hips::update_sg : GET() failed. Continue anyway." << std::endl;
          continue;
        }

        //::printf("debug : %d (%d) lodc %ld.\n",ipix,npix,ldoc);
/*
        if(!all_number) {
        if(!file::write_bytes("debug.fits",doc,(size_t)ldoc)) {
          a_out << "can't write debug.fits." << std::endl;
          //delete [] doc;
          //m_group.clear();
          //return;
        }}
*/

        unsigned int cols,rows;
        char* buffer;
        cfitsio_bitpix_code bitpix;

        if(!load_doc(a_out,doc,ldoc,cols,rows,buffer,bitpix)) {
          a_out << "inlib::sg::hips::update_sg : load_doc failed. Continue anyway." << std::endl;
          m_group.clear();
          delete [] doc;
          return;
        }

        delete [] doc;

        double mn,mx,S,S2;
        size_t cells = cols*rows;
        if(!cfitsio_min_max_S_S2(cells,buffer,bitpix,mn,mx,S,S2)) {
          a_out << "inlib::sg::hips::update_sg : min_max_S_S2() failed." << std::endl;
          m_group.clear();
          delete [] buffer;
          return;
        }

        all_number += cells;
        all_mn = min_of<double>(all_mn,mn);
        all_mx = max_of<double>(all_mx,mx);
        all_S += S;
        all_S2 += S2;

        data* _d = new data(bitpix,cols,rows,buffer); //it takes ownership of buffer;
        std::vector<vec3f>& vcs = _d->m_vcs;
        vcs[0].set_value(pts[0].x(),pts[0].y(),pts[0].z());
        vcs[1].set_value(pts[1].x(),pts[1].y(),pts[1].z());
        vcs[2].set_value(pts[2].x(),pts[2].y(),pts[2].z());
        vcs[3].set_value(pts[3].x(),pts[3].y(),pts[3].z());

        _data.push_back(_d); //ouch !

      }}

      double all_mean = 0;
      double all_rms = 0;
      if(all_number) {
        all_mean = all_S/double(all_number);
        all_rms = ::sqrt(::fabs(all_S2/double(all_number) - all_mean * all_mean));
      }

      //::printf("debug : %ld : %ld : %g %g : %g %g\n",_data.size(),all_number,all_mn,all_mx,all_mean,all_rms);

     {std::string _s;
      _s += "# ";
      if(!numas<uint64>(_data.size(),_s)){}
      _s += ", min ";
      if(!numas<float>(all_mn,_s)){}
      _s += ", max ";
      if(!numas<float>(all_mx,_s)){}
      _s += ", mean ";
      if(!numas<float>(all_mean,_s)){}
      _s += ", rms ";
      if(!numas<float>(all_rms,_s)){}
      infos.value_no_cmp(_s);}

      lut_float _lut;
      if(auto_lut.value()==auto_lut_min_max) {
        _lut = lut_float(all_mn,all_mx,colors.size());    
      } else if(auto_lut.value()==auto_lut_mean_rms) {
        float mn = all_mean-all_rms*0.5f;
        float mx = all_mean+all_rms*0.5f;
        _lut = lut_float(mn,mx,colors.size());
      } else {
        _lut = lut_float(lut.value().mn(),lut.value().mx(),colors.size());
      }

      inlib_vforcit(data*,_data,it) {
        data& _d = *(*it);
        img_byte img;
        if(!cfitsio_buffer2img(a_out,_d.m_bitpix,_d.m_cols,_d.m_rows,_d.m_buffer,1,false,_lut,colors.values(),img)) {
          a_out << "inlib::sg::hips::update_sg : buffer2img() failed." << std::endl;          
        } else {
          tex_quadrilateral* _tex = new tex_quadrilateral;
          _tex->show_border = true;
          _tex->corners.set_values(_d.m_vcs);
          _tex->img.value(img);
          m_group.add(_tex);
        }
        delete [] _d.m_buffer;
      }


    /////////////////////////////////////////////
    /////////////////////////////////////////////
    /////////////////////////////////////////////
    //}

  }
protected:
  bool GET(net::http& a_http,const std::string& a_path,char*& a_doc,uint64& a_ldoc) const {
    if(m_local) {
      std::string path = m_data_dir+a_path; //we expect a_path starting with a leading /.
      long ldoc;
      if(!file::read_bytes(path,a_doc,ldoc)) return false;
      a_ldoc = ldoc;
    } else {
      bool http_done = false;
      while(!http_done) {
        std::string icookie;
        std::string ocookie;
        if(!a_http.GET(a_path,icookie,a_doc,a_ldoc,ocookie,false)) { //false = not verbose if failure.
          //std::cout << "miss : path " << path << std::endl;
          a_http.disconnect();
          if(!a_http.start(m_host,m_port)) return false;
        } else {
          http_done = true;
        }
      }
    }
    return true;
  }
protected:
  class data {
  public:
    data(cfitsio_bitpix_code a_bitpix,
         unsigned int a_cols,unsigned int a_rows,
         char* a_buffer) //we takes ownership.
    :m_bitpix(a_bitpix),m_cols(a_cols),m_rows(a_rows)
    ,m_buffer(a_buffer)
    ,m_vcs(4)
    {}
    virtual ~data() {delete [] m_buffer;}
  private:
    data(const data&){}
    data& operator=(const data&){return *this;}
  public:
    cfitsio_bitpix_code m_bitpix;
    unsigned int m_cols;
    unsigned int m_rows;
    char* m_buffer;
    std::vector<vec3f> m_vcs;    
  };

protected:
  bool m_local;
  std::string m_data_dir;
  std::string m_host;
  unsigned int m_port;
 
  group m_group;

  bool m_draw_edges;

  mat4f m_old_model;
  mat4f m_dynamic;
  mat4f m_not_dynamic;
};

}}

#endif
