# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import inlib_swig_py
else:
    import inlib_swig_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SwigPyIterator

    def value(self):
        return inlib_swig_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return inlib_swig_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return inlib_swig_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return inlib_swig_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return inlib_swig_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return inlib_swig_py.SwigPyIterator_copy(self)

    def next(self):
        return inlib_swig_py.SwigPyIterator_next(self)

    def __next__(self):
        return inlib_swig_py.SwigPyIterator___next__(self)

    def previous(self):
        return inlib_swig_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return inlib_swig_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return inlib_swig_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return inlib_swig_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return inlib_swig_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return inlib_swig_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return inlib_swig_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return inlib_swig_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in inlib_swig_py:
inlib_swig_py.SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_uint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return inlib_swig_py.std_vector_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return inlib_swig_py.std_vector_uint___nonzero__(self)

    def __bool__(self):
        return inlib_swig_py.std_vector_uint___bool__(self)

    def __len__(self):
        return inlib_swig_py.std_vector_uint___len__(self)

    def __getslice__(self, i, j):
        return inlib_swig_py.std_vector_uint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return inlib_swig_py.std_vector_uint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return inlib_swig_py.std_vector_uint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return inlib_swig_py.std_vector_uint___delitem__(self, *args)

    def __getitem__(self, *args):
        return inlib_swig_py.std_vector_uint___getitem__(self, *args)

    def __setitem__(self, *args):
        return inlib_swig_py.std_vector_uint___setitem__(self, *args)

    def pop(self):
        return inlib_swig_py.std_vector_uint_pop(self)

    def append(self, x):
        return inlib_swig_py.std_vector_uint_append(self, x)

    def empty(self):
        return inlib_swig_py.std_vector_uint_empty(self)

    def size(self):
        return inlib_swig_py.std_vector_uint_size(self)

    def swap(self, v):
        return inlib_swig_py.std_vector_uint_swap(self, v)

    def begin(self):
        return inlib_swig_py.std_vector_uint_begin(self)

    def end(self):
        return inlib_swig_py.std_vector_uint_end(self)

    def rbegin(self):
        return inlib_swig_py.std_vector_uint_rbegin(self)

    def rend(self):
        return inlib_swig_py.std_vector_uint_rend(self)

    def clear(self):
        return inlib_swig_py.std_vector_uint_clear(self)

    def get_allocator(self):
        return inlib_swig_py.std_vector_uint_get_allocator(self)

    def pop_back(self):
        return inlib_swig_py.std_vector_uint_pop_back(self)

    def erase(self, *args):
        return inlib_swig_py.std_vector_uint_erase(self, *args)

    def __init__(self, *args):
        inlib_swig_py.std_vector_uint_swiginit(self, inlib_swig_py.new_std_vector_uint(*args))

    def push_back(self, x):
        return inlib_swig_py.std_vector_uint_push_back(self, x)

    def front(self):
        return inlib_swig_py.std_vector_uint_front(self)

    def back(self):
        return inlib_swig_py.std_vector_uint_back(self)

    def assign(self, n, x):
        return inlib_swig_py.std_vector_uint_assign(self, n, x)

    def resize(self, *args):
        return inlib_swig_py.std_vector_uint_resize(self, *args)

    def insert(self, *args):
        return inlib_swig_py.std_vector_uint_insert(self, *args)

    def reserve(self, n):
        return inlib_swig_py.std_vector_uint_reserve(self, n)

    def capacity(self):
        return inlib_swig_py.std_vector_uint_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_uint

# Register std_vector_uint in inlib_swig_py:
inlib_swig_py.std_vector_uint_swigregister(std_vector_uint)

class std_vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return inlib_swig_py.std_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return inlib_swig_py.std_vector_int___nonzero__(self)

    def __bool__(self):
        return inlib_swig_py.std_vector_int___bool__(self)

    def __len__(self):
        return inlib_swig_py.std_vector_int___len__(self)

    def __getslice__(self, i, j):
        return inlib_swig_py.std_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return inlib_swig_py.std_vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return inlib_swig_py.std_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return inlib_swig_py.std_vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return inlib_swig_py.std_vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return inlib_swig_py.std_vector_int___setitem__(self, *args)

    def pop(self):
        return inlib_swig_py.std_vector_int_pop(self)

    def append(self, x):
        return inlib_swig_py.std_vector_int_append(self, x)

    def empty(self):
        return inlib_swig_py.std_vector_int_empty(self)

    def size(self):
        return inlib_swig_py.std_vector_int_size(self)

    def swap(self, v):
        return inlib_swig_py.std_vector_int_swap(self, v)

    def begin(self):
        return inlib_swig_py.std_vector_int_begin(self)

    def end(self):
        return inlib_swig_py.std_vector_int_end(self)

    def rbegin(self):
        return inlib_swig_py.std_vector_int_rbegin(self)

    def rend(self):
        return inlib_swig_py.std_vector_int_rend(self)

    def clear(self):
        return inlib_swig_py.std_vector_int_clear(self)

    def get_allocator(self):
        return inlib_swig_py.std_vector_int_get_allocator(self)

    def pop_back(self):
        return inlib_swig_py.std_vector_int_pop_back(self)

    def erase(self, *args):
        return inlib_swig_py.std_vector_int_erase(self, *args)

    def __init__(self, *args):
        inlib_swig_py.std_vector_int_swiginit(self, inlib_swig_py.new_std_vector_int(*args))

    def push_back(self, x):
        return inlib_swig_py.std_vector_int_push_back(self, x)

    def front(self):
        return inlib_swig_py.std_vector_int_front(self)

    def back(self):
        return inlib_swig_py.std_vector_int_back(self)

    def assign(self, n, x):
        return inlib_swig_py.std_vector_int_assign(self, n, x)

    def resize(self, *args):
        return inlib_swig_py.std_vector_int_resize(self, *args)

    def insert(self, *args):
        return inlib_swig_py.std_vector_int_insert(self, *args)

    def reserve(self, n):
        return inlib_swig_py.std_vector_int_reserve(self, n)

    def capacity(self):
        return inlib_swig_py.std_vector_int_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_int

# Register std_vector_int in inlib_swig_py:
inlib_swig_py.std_vector_int_swigregister(std_vector_int)

class std_vector_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return inlib_swig_py.std_vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return inlib_swig_py.std_vector_float___nonzero__(self)

    def __bool__(self):
        return inlib_swig_py.std_vector_float___bool__(self)

    def __len__(self):
        return inlib_swig_py.std_vector_float___len__(self)

    def __getslice__(self, i, j):
        return inlib_swig_py.std_vector_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return inlib_swig_py.std_vector_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return inlib_swig_py.std_vector_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return inlib_swig_py.std_vector_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return inlib_swig_py.std_vector_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return inlib_swig_py.std_vector_float___setitem__(self, *args)

    def pop(self):
        return inlib_swig_py.std_vector_float_pop(self)

    def append(self, x):
        return inlib_swig_py.std_vector_float_append(self, x)

    def empty(self):
        return inlib_swig_py.std_vector_float_empty(self)

    def size(self):
        return inlib_swig_py.std_vector_float_size(self)

    def swap(self, v):
        return inlib_swig_py.std_vector_float_swap(self, v)

    def begin(self):
        return inlib_swig_py.std_vector_float_begin(self)

    def end(self):
        return inlib_swig_py.std_vector_float_end(self)

    def rbegin(self):
        return inlib_swig_py.std_vector_float_rbegin(self)

    def rend(self):
        return inlib_swig_py.std_vector_float_rend(self)

    def clear(self):
        return inlib_swig_py.std_vector_float_clear(self)

    def get_allocator(self):
        return inlib_swig_py.std_vector_float_get_allocator(self)

    def pop_back(self):
        return inlib_swig_py.std_vector_float_pop_back(self)

    def erase(self, *args):
        return inlib_swig_py.std_vector_float_erase(self, *args)

    def __init__(self, *args):
        inlib_swig_py.std_vector_float_swiginit(self, inlib_swig_py.new_std_vector_float(*args))

    def push_back(self, x):
        return inlib_swig_py.std_vector_float_push_back(self, x)

    def front(self):
        return inlib_swig_py.std_vector_float_front(self)

    def back(self):
        return inlib_swig_py.std_vector_float_back(self)

    def assign(self, n, x):
        return inlib_swig_py.std_vector_float_assign(self, n, x)

    def resize(self, *args):
        return inlib_swig_py.std_vector_float_resize(self, *args)

    def insert(self, *args):
        return inlib_swig_py.std_vector_float_insert(self, *args)

    def reserve(self, n):
        return inlib_swig_py.std_vector_float_reserve(self, n)

    def capacity(self):
        return inlib_swig_py.std_vector_float_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_float

# Register std_vector_float in inlib_swig_py:
inlib_swig_py.std_vector_float_swigregister(std_vector_float)

class std_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return inlib_swig_py.std_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return inlib_swig_py.std_vector_double___nonzero__(self)

    def __bool__(self):
        return inlib_swig_py.std_vector_double___bool__(self)

    def __len__(self):
        return inlib_swig_py.std_vector_double___len__(self)

    def __getslice__(self, i, j):
        return inlib_swig_py.std_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return inlib_swig_py.std_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return inlib_swig_py.std_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return inlib_swig_py.std_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return inlib_swig_py.std_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return inlib_swig_py.std_vector_double___setitem__(self, *args)

    def pop(self):
        return inlib_swig_py.std_vector_double_pop(self)

    def append(self, x):
        return inlib_swig_py.std_vector_double_append(self, x)

    def empty(self):
        return inlib_swig_py.std_vector_double_empty(self)

    def size(self):
        return inlib_swig_py.std_vector_double_size(self)

    def swap(self, v):
        return inlib_swig_py.std_vector_double_swap(self, v)

    def begin(self):
        return inlib_swig_py.std_vector_double_begin(self)

    def end(self):
        return inlib_swig_py.std_vector_double_end(self)

    def rbegin(self):
        return inlib_swig_py.std_vector_double_rbegin(self)

    def rend(self):
        return inlib_swig_py.std_vector_double_rend(self)

    def clear(self):
        return inlib_swig_py.std_vector_double_clear(self)

    def get_allocator(self):
        return inlib_swig_py.std_vector_double_get_allocator(self)

    def pop_back(self):
        return inlib_swig_py.std_vector_double_pop_back(self)

    def erase(self, *args):
        return inlib_swig_py.std_vector_double_erase(self, *args)

    def __init__(self, *args):
        inlib_swig_py.std_vector_double_swiginit(self, inlib_swig_py.new_std_vector_double(*args))

    def push_back(self, x):
        return inlib_swig_py.std_vector_double_push_back(self, x)

    def front(self):
        return inlib_swig_py.std_vector_double_front(self)

    def back(self):
        return inlib_swig_py.std_vector_double_back(self)

    def assign(self, n, x):
        return inlib_swig_py.std_vector_double_assign(self, n, x)

    def resize(self, *args):
        return inlib_swig_py.std_vector_double_resize(self, *args)

    def insert(self, *args):
        return inlib_swig_py.std_vector_double_insert(self, *args)

    def reserve(self, n):
        return inlib_swig_py.std_vector_double_reserve(self, n)

    def capacity(self):
        return inlib_swig_py.std_vector_double_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_double

# Register std_vector_double in inlib_swig_py:
inlib_swig_py.std_vector_double_swigregister(std_vector_double)


def get_cout():
    return inlib_swig_py.get_cout()

def env_append_path(arg1, arg2):
    return inlib_swig_py.env_append_path(arg1, arg2)

def sep():
    return inlib_swig_py.sep()
class std_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_std_string

    def __init__(self, *args):
        inlib_swig_py.std_string_swiginit(self, inlib_swig_py.new_std_string(*args))

    def cast(self):
        return inlib_swig_py.std_string_cast(self)

# Register std_string in inlib_swig_py:
inlib_swig_py.std_string_swigregister(std_string)

class printer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_printer

    def __init__(self, *args):
        inlib_swig_py.printer_swiginit(self, inlib_swig_py.new_printer(*args))

    def write(self, arg2):
        return inlib_swig_py.printer_write(self, arg2)

# Register printer in inlib_swig_py:
inlib_swig_py.printer_swigregister(printer)

class args(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_args

    def __init__(self, *args):
        inlib_swig_py.args_swiginit(self, inlib_swig_py.new_args(*args))

    def add(self, *args):
        return inlib_swig_py.args_add(self, *args)

    def remove(self, arg2):
        return inlib_swig_py.args_remove(self, arg2)

    def remove_first(self):
        return inlib_swig_py.args_remove_first(self)

# Register args in inlib_swig_py:
inlib_swig_py.args_swigregister(args)

class guiv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register guiv in inlib_swig_py:
inlib_swig_py.guiv_swigregister(guiv)

class opener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_opener

    def __init__(self, *args):
        inlib_swig_py.opener_swiginit(self, inlib_swig_py.new_opener(*args))

    def open(self, a_path):
        return inlib_swig_py.opener_open(self, a_path)

# Register opener in inlib_swig_py:
inlib_swig_py.opener_swigregister(opener)


def file_exists(arg1):
    return inlib_swig_py.file_exists(arg1)

def file_write(*args):
    return inlib_swig_py.file_write(*args)

def file_paper_format_extension(a_format, arg2):
    return inlib_swig_py.file_paper_format_extension(a_format, arg2)
class histo_h1d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_h1d

    def __init__(self, *args):
        inlib_swig_py.histo_h1d_swiginit(self, inlib_swig_py.new_histo_h1d(*args))

    def fill(self, arg2, arg3):
        return inlib_swig_py.histo_h1d_fill(self, arg2, arg3)

    def entries(self):
        return inlib_swig_py.histo_h1d_entries(self)

    def mean(self):
        return inlib_swig_py.histo_h1d_mean(self)

    def rms(self):
        return inlib_swig_py.histo_h1d_rms(self)

    def bins_sum_w(self):
        return inlib_swig_py.histo_h1d_bins_sum_w(self)

    def bins_sum_w2(self):
        return inlib_swig_py.histo_h1d_bins_sum_w2(self)

    def bins_sum_xw(self):
        return inlib_swig_py.histo_h1d_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return inlib_swig_py.histo_h1d_bins_sum_x2w(self)

# Register histo_h1d in inlib_swig_py:
inlib_swig_py.histo_h1d_swigregister(histo_h1d)

class histo_h2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_h2d

    def __init__(self, *args):
        inlib_swig_py.histo_h2d_swiginit(self, inlib_swig_py.new_histo_h2d(*args))

    def fill(self, arg2, arg3, arg4):
        return inlib_swig_py.histo_h2d_fill(self, arg2, arg3, arg4)

    def entries(self):
        return inlib_swig_py.histo_h2d_entries(self)

    def mean_x(self):
        return inlib_swig_py.histo_h2d_mean_x(self)

    def rms_x(self):
        return inlib_swig_py.histo_h2d_rms_x(self)

    def mean_y(self):
        return inlib_swig_py.histo_h2d_mean_y(self)

    def rms_y(self):
        return inlib_swig_py.histo_h2d_rms_y(self)

    def bins_sum_w(self):
        return inlib_swig_py.histo_h2d_bins_sum_w(self)

    def bins_sum_w2(self):
        return inlib_swig_py.histo_h2d_bins_sum_w2(self)

    def bins_sum_xw(self):
        return inlib_swig_py.histo_h2d_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return inlib_swig_py.histo_h2d_bins_sum_x2w(self)

# Register histo_h2d in inlib_swig_py:
inlib_swig_py.histo_h2d_swigregister(histo_h2d)

class histo_p1d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_p1d

    def __init__(self, *args):
        inlib_swig_py.histo_p1d_swiginit(self, inlib_swig_py.new_histo_p1d(*args))

    def fill(self, arg2, arg3, arg4):
        return inlib_swig_py.histo_p1d_fill(self, arg2, arg3, arg4)

    def entries(self):
        return inlib_swig_py.histo_p1d_entries(self)

    def mean(self):
        return inlib_swig_py.histo_p1d_mean(self)

    def rms(self):
        return inlib_swig_py.histo_p1d_rms(self)

    def bins_sum_w(self):
        return inlib_swig_py.histo_p1d_bins_sum_w(self)

    def bins_sum_w2(self):
        return inlib_swig_py.histo_p1d_bins_sum_w2(self)

    def bins_sum_xw(self):
        return inlib_swig_py.histo_p1d_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return inlib_swig_py.histo_p1d_bins_sum_x2w(self)

    def bins_sum_vw(self):
        return inlib_swig_py.histo_p1d_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return inlib_swig_py.histo_p1d_bins_sum_v2w(self)

# Register histo_p1d in inlib_swig_py:
inlib_swig_py.histo_p1d_swigregister(histo_p1d)

class histo_p2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_p2d

    def __init__(self, *args):
        inlib_swig_py.histo_p2d_swiginit(self, inlib_swig_py.new_histo_p2d(*args))

    def fill(self, arg2, arg3, arg4, arg5):
        return inlib_swig_py.histo_p2d_fill(self, arg2, arg3, arg4, arg5)

    def entries(self):
        return inlib_swig_py.histo_p2d_entries(self)

    def mean_x(self):
        return inlib_swig_py.histo_p2d_mean_x(self)

    def rms_x(self):
        return inlib_swig_py.histo_p2d_rms_x(self)

    def mean_y(self):
        return inlib_swig_py.histo_p2d_mean_y(self)

    def rms_y(self):
        return inlib_swig_py.histo_p2d_rms_y(self)

    def bins_sum_w(self):
        return inlib_swig_py.histo_p2d_bins_sum_w(self)

    def bins_sum_w2(self):
        return inlib_swig_py.histo_p2d_bins_sum_w2(self)

    def bins_sum_xw(self):
        return inlib_swig_py.histo_p2d_bins_sum_xw(self)

    def bins_sum_x2w(self):
        return inlib_swig_py.histo_p2d_bins_sum_x2w(self)

    def bins_sum_vw(self):
        return inlib_swig_py.histo_p2d_bins_sum_vw(self)

    def bins_sum_v2w(self):
        return inlib_swig_py.histo_p2d_bins_sum_v2w(self)

# Register histo_p2d in inlib_swig_py:
inlib_swig_py.histo_p2d_swigregister(histo_p2d)

class histo_c2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_c2d

    def __init__(self, *args):
        inlib_swig_py.histo_c2d_swiginit(self, inlib_swig_py.new_histo_c2d(*args))

    def fill(self, arg2, arg3, arg4):
        return inlib_swig_py.histo_c2d_fill(self, arg2, arg3, arg4)

    def entries(self):
        return inlib_swig_py.histo_c2d_entries(self)

    def lower_edge_x(self):
        return inlib_swig_py.histo_c2d_lower_edge_x(self)

    def upper_edge_x(self):
        return inlib_swig_py.histo_c2d_upper_edge_x(self)

    def lower_edge_y(self):
        return inlib_swig_py.histo_c2d_lower_edge_y(self)

    def upper_edge_y(self):
        return inlib_swig_py.histo_c2d_upper_edge_y(self)

    def mean_x(self):
        return inlib_swig_py.histo_c2d_mean_x(self)

    def rms_x(self):
        return inlib_swig_py.histo_c2d_rms_x(self)

    def mean_y(self):
        return inlib_swig_py.histo_c2d_mean_y(self)

    def rms_y(self):
        return inlib_swig_py.histo_c2d_rms_y(self)

# Register histo_c2d in inlib_swig_py:
inlib_swig_py.histo_c2d_swigregister(histo_c2d)

class histo_c3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_histo_c3d

    def __init__(self, *args):
        inlib_swig_py.histo_c3d_swiginit(self, inlib_swig_py.new_histo_c3d(*args))

    def fill(self, arg2, arg3, arg4, arg5):
        return inlib_swig_py.histo_c3d_fill(self, arg2, arg3, arg4, arg5)

    def entries(self):
        return inlib_swig_py.histo_c3d_entries(self)

    def lower_edge_x(self):
        return inlib_swig_py.histo_c3d_lower_edge_x(self)

    def upper_edge_x(self):
        return inlib_swig_py.histo_c3d_upper_edge_x(self)

    def lower_edge_y(self):
        return inlib_swig_py.histo_c3d_lower_edge_y(self)

    def upper_edge_y(self):
        return inlib_swig_py.histo_c3d_upper_edge_y(self)

    def lower_edge_z(self):
        return inlib_swig_py.histo_c3d_lower_edge_z(self)

    def upper_edge_z(self):
        return inlib_swig_py.histo_c3d_upper_edge_z(self)

    def mean_x(self):
        return inlib_swig_py.histo_c3d_mean_x(self)

    def rms_x(self):
        return inlib_swig_py.histo_c3d_rms_x(self)

    def mean_y(self):
        return inlib_swig_py.histo_c3d_mean_y(self)

    def rms_y(self):
        return inlib_swig_py.histo_c3d_rms_y(self)

    def mean_z(self):
        return inlib_swig_py.histo_c3d_mean_z(self)

    def rms_z(self):
        return inlib_swig_py.histo_c3d_rms_z(self)

# Register histo_c3d in inlib_swig_py:
inlib_swig_py.histo_c3d_swigregister(histo_c3d)

class random_flat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_random_flat

    def __init__(self, *args):
        inlib_swig_py.random_flat_swiginit(self, inlib_swig_py.new_random_flat(*args))

    def shoot(self):
        return inlib_swig_py.random_flat_shoot(self)

# Register random_flat in inlib_swig_py:
inlib_swig_py.random_flat_swigregister(random_flat)

class random_gauss(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_random_gauss

    def __init__(self, *args):
        inlib_swig_py.random_gauss_swiginit(self, inlib_swig_py.new_random_gauss(*args))

    def shoot(self):
        return inlib_swig_py.random_gauss_shoot(self)

# Register random_gauss in inlib_swig_py:
inlib_swig_py.random_gauss_swigregister(random_gauss)

class random_bw(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_random_bw

    def __init__(self, *args):
        inlib_swig_py.random_bw_swiginit(self, inlib_swig_py.new_random_bw(*args))

    def shoot(self):
        return inlib_swig_py.random_bw_shoot(self)

# Register random_bw in inlib_swig_py:
inlib_swig_py.random_bw_swigregister(random_bw)

class random_exp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_random_exp

    def __init__(self, *args):
        inlib_swig_py.random_exp_swiginit(self, inlib_swig_py.new_random_exp(*args))

    def shoot(self):
        return inlib_swig_py.random_exp_shoot(self)

# Register random_exp in inlib_swig_py:
inlib_swig_py.random_exp_swigregister(random_exp)

class rtausmeui(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rtausmeui

    def __init__(self, *args):
        inlib_swig_py.rtausmeui_swiginit(self, inlib_swig_py.new_rtausmeui(*args))

    def set_seed(self, a_seed):
        return inlib_swig_py.rtausmeui_set_seed(self, a_seed)

    def seed(self):
        return inlib_swig_py.rtausmeui_seed(self)

    def shoot(self):
        return inlib_swig_py.rtausmeui_shoot(self)

# Register rtausmeui in inlib_swig_py:
inlib_swig_py.rtausmeui_swigregister(rtausmeui)

class rtausmed(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rtausmed

    def __init__(self, *args):
        inlib_swig_py.rtausmed_swiginit(self, inlib_swig_py.new_rtausmed(*args))

    def set_seed(self, arg2):
        return inlib_swig_py.rtausmed_set_seed(self, arg2)

    def seed(self):
        return inlib_swig_py.rtausmed_seed(self)

    def shoot(self):
        return inlib_swig_py.rtausmed_shoot(self)

# Register rtausmed in inlib_swig_py:
inlib_swig_py.rtausmed_swigregister(rtausmed)

class rgaussd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rgaussd

    def __init__(self, *args):
        inlib_swig_py.rgaussd_swiginit(self, inlib_swig_py.new_rgaussd(*args))

    def shoot(self):
        return inlib_swig_py.rgaussd_shoot(self)

# Register rgaussd in inlib_swig_py:
inlib_swig_py.rgaussd_swigregister(rgaussd)

class rbwd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rbwd

    def __init__(self, *args):
        inlib_swig_py.rbwd_swiginit(self, inlib_swig_py.new_rbwd(*args))

    def shoot(self):
        return inlib_swig_py.rbwd_shoot(self)

# Register rbwd in inlib_swig_py:
inlib_swig_py.rbwd_swigregister(rbwd)

class rexpd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rexpd

    def __init__(self, *args):
        inlib_swig_py.rexpd_swiginit(self, inlib_swig_py.new_rexpd(*args))

    def shoot(self):
        return inlib_swig_py.rexpd_shoot(self)

# Register rexpd in inlib_swig_py:
inlib_swig_py.rexpd_swigregister(rexpd)

class rdir2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rdir2d

    def __init__(self, *args):
        inlib_swig_py.rdir2d_swiginit(self, inlib_swig_py.new_rdir2d(*args))

    def shoot(self, a_v):
        return inlib_swig_py.rdir2d_shoot(self, a_v)

# Register rdir2d in inlib_swig_py:
inlib_swig_py.rdir2d_swigregister(rdir2d)

class rdir3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rdir3d

    def __init__(self, *args):
        inlib_swig_py.rdir3d_swiginit(self, inlib_swig_py.new_rdir3d(*args))

    def shoot(self, a_v):
        return inlib_swig_py.rdir3d_shoot(self, a_v)

# Register rdir3d in inlib_swig_py:
inlib_swig_py.rdir3d_swigregister(rdir3d)

class sg_style_colormap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_style_colormap

    def __init__(self, *args):
        inlib_swig_py.sg_style_colormap_swiginit(self, inlib_swig_py.new_sg_style_colormap(*args))

# Register sg_style_colormap in inlib_swig_py:
inlib_swig_py.sg_style_colormap_swigregister(sg_style_colormap)

class sg_style_default_colormap(sg_style_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_style_default_colormap

    def __init__(self, *args):
        inlib_swig_py.sg_style_default_colormap_swiginit(self, inlib_swig_py.new_sg_style_default_colormap(*args))

# Register sg_style_default_colormap in inlib_swig_py:
inlib_swig_py.sg_style_default_colormap_swigregister(sg_style_default_colormap)

class sg_style_ROOT_colormap(sg_style_colormap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_style_ROOT_colormap

    def __init__(self, *args):
        inlib_swig_py.sg_style_ROOT_colormap_swiginit(self, inlib_swig_py.new_sg_style_ROOT_colormap(*args))

# Register sg_style_ROOT_colormap in inlib_swig_py:
inlib_swig_py.sg_style_ROOT_colormap_swigregister(sg_style_ROOT_colormap)

class xml_styles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_xml_styles

    def __init__(self, *args):
        inlib_swig_py.xml_styles_swiginit(self, inlib_swig_py.new_xml_styles(*args))

    def out(self):
        return inlib_swig_py.xml_styles_out(self)

    def add_colormap(self, a_name, arg3):
        return inlib_swig_py.xml_styles_add_colormap(self, a_name, arg3)

# Register xml_styles in inlib_swig_py:
inlib_swig_py.xml_styles_swigregister(xml_styles)

class SOPI_color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_color

    def __init__(self, *args):
        inlib_swig_py.SOPI_color_swiginit(self, inlib_swig_py.new_SOPI_color(*args))

    def rchar(self):
        return inlib_swig_py.SOPI_color_rchar(self)

    def gchar(self):
        return inlib_swig_py.SOPI_color_gchar(self)

    def bchar(self):
        return inlib_swig_py.SOPI_color_bchar(self)

    def r(self):
        return inlib_swig_py.SOPI_color_r(self)

    def g(self):
        return inlib_swig_py.SOPI_color_g(self)

    def b(self):
        return inlib_swig_py.SOPI_color_b(self)

# Register SOPI_color in inlib_swig_py:
inlib_swig_py.SOPI_color_swigregister(SOPI_color)

class SOPI_cmap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def black():
        return inlib_swig_py.SOPI_cmap_black()
    __swig_destroy__ = inlib_swig_py.delete_SOPI_cmap

    def __init__(self, *args):
        inlib_swig_py.SOPI_cmap_swiginit(self, inlib_swig_py.new_SOPI_cmap(*args))

    def get_color(self, arg2):
        return inlib_swig_py.SOPI_cmap_get_color(self, arg2)

    def size(self):
        return inlib_swig_py.SOPI_cmap_size(self)

# Register SOPI_cmap in inlib_swig_py:
inlib_swig_py.SOPI_cmap_swigregister(SOPI_cmap)

def SOPI_cmap_black():
    return inlib_swig_py.SOPI_cmap_black()

class SOPI_grey32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey32

    def __init__(self, *args):
        inlib_swig_py.SOPI_grey32_swiginit(self, inlib_swig_py.new_SOPI_grey32(*args))

# Register SOPI_grey32 in inlib_swig_py:
inlib_swig_py.SOPI_grey32_swigregister(SOPI_grey32)

class SOPI_greyinv32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_greyinv32

    def __init__(self, *args):
        inlib_swig_py.SOPI_greyinv32_swiginit(self, inlib_swig_py.new_SOPI_greyinv32(*args))

# Register SOPI_greyinv32 in inlib_swig_py:
inlib_swig_py.SOPI_greyinv32_swigregister(SOPI_greyinv32)

class SOPI_grey128(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey128

    def __init__(self, *args):
        inlib_swig_py.SOPI_grey128_swiginit(self, inlib_swig_py.new_SOPI_grey128(*args))

# Register SOPI_grey128 in inlib_swig_py:
inlib_swig_py.SOPI_grey128_swigregister(SOPI_grey128)

class SOPI_greyinv128(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_greyinv128

    def __init__(self, *args):
        inlib_swig_py.SOPI_greyinv128_swiginit(self, inlib_swig_py.new_SOPI_greyinv128(*args))

# Register SOPI_greyinv128 in inlib_swig_py:
inlib_swig_py.SOPI_greyinv128_swigregister(SOPI_greyinv128)

class SOPI_grey256(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_grey256

    def __init__(self, *args):
        inlib_swig_py.SOPI_grey256_swiginit(self, inlib_swig_py.new_SOPI_grey256(*args))

# Register SOPI_grey256 in inlib_swig_py:
inlib_swig_py.SOPI_grey256_swigregister(SOPI_grey256)

class SOPI_col16(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_col16

    def __init__(self, *args):
        inlib_swig_py.SOPI_col16_swiginit(self, inlib_swig_py.new_SOPI_col16(*args))

# Register SOPI_col16 in inlib_swig_py:
inlib_swig_py.SOPI_col16_swigregister(SOPI_col16)

class SOPI_colrj32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrj32

    def __init__(self, *args):
        inlib_swig_py.SOPI_colrj32_swiginit(self, inlib_swig_py.new_SOPI_colrj32(*args))

# Register SOPI_colrj32 in inlib_swig_py:
inlib_swig_py.SOPI_colrj32_swigregister(SOPI_colrj32)

class SOPI_colbr32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colbr32

    def __init__(self, *args):
        inlib_swig_py.SOPI_colbr32_swiginit(self, inlib_swig_py.new_SOPI_colbr32(*args))

# Register SOPI_colbr32 in inlib_swig_py:
inlib_swig_py.SOPI_colbr32_swigregister(SOPI_colbr32)

class SOPI_colrv32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrv32

    def __init__(self, *args):
        inlib_swig_py.SOPI_colrv32_swiginit(self, inlib_swig_py.new_SOPI_colrv32(*args))

# Register SOPI_colrv32 in inlib_swig_py:
inlib_swig_py.SOPI_colrv32_swigregister(SOPI_colrv32)

class SOPI_colrj128(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colrj128

    def __init__(self, *args):
        inlib_swig_py.SOPI_colrj128_swiginit(self, inlib_swig_py.new_SOPI_colrj128(*args))

# Register SOPI_colrj128 in inlib_swig_py:
inlib_swig_py.SOPI_colrj128_swigregister(SOPI_colrj128)

class SOPI_colbr128(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_colbr128

    def __init__(self, *args):
        inlib_swig_py.SOPI_colbr128_swiginit(self, inlib_swig_py.new_SOPI_colbr128(*args))

# Register SOPI_colbr128 in inlib_swig_py:
inlib_swig_py.SOPI_colbr128_swigregister(SOPI_colbr128)

class SOPI_red32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_red32

    def __init__(self, *args):
        inlib_swig_py.SOPI_red32_swiginit(self, inlib_swig_py.new_SOPI_red32(*args))

# Register SOPI_red32 in inlib_swig_py:
inlib_swig_py.SOPI_red32_swigregister(SOPI_red32)

class SOPI_green32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_green32

    def __init__(self, *args):
        inlib_swig_py.SOPI_green32_swiginit(self, inlib_swig_py.new_SOPI_green32(*args))

# Register SOPI_green32 in inlib_swig_py:
inlib_swig_py.SOPI_green32_swigregister(SOPI_green32)

class SOPI_blue32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_blue32

    def __init__(self, *args):
        inlib_swig_py.SOPI_blue32_swiginit(self, inlib_swig_py.new_SOPI_blue32(*args))

# Register SOPI_blue32 in inlib_swig_py:
inlib_swig_py.SOPI_blue32_swigregister(SOPI_blue32)

class SOPI_yellow32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_yellow32

    def __init__(self, *args):
        inlib_swig_py.SOPI_yellow32_swiginit(self, inlib_swig_py.new_SOPI_yellow32(*args))

# Register SOPI_yellow32 in inlib_swig_py:
inlib_swig_py.SOPI_yellow32_swigregister(SOPI_yellow32)

class SOPI_orange32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_orange32

    def __init__(self, *args):
        inlib_swig_py.SOPI_orange32_swiginit(self, inlib_swig_py.new_SOPI_orange32(*args))

# Register SOPI_orange32 in inlib_swig_py:
inlib_swig_py.SOPI_orange32_swigregister(SOPI_orange32)

class SOPI_cyan32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_cyan32

    def __init__(self, *args):
        inlib_swig_py.SOPI_cyan32_swiginit(self, inlib_swig_py.new_SOPI_cyan32(*args))

# Register SOPI_cyan32 in inlib_swig_py:
inlib_swig_py.SOPI_cyan32_swigregister(SOPI_cyan32)

class SOPI_violet32(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_violet32

    def __init__(self, *args):
        inlib_swig_py.SOPI_violet32_swiginit(self, inlib_swig_py.new_SOPI_violet32(*args))

# Register SOPI_violet32 in inlib_swig_py:
inlib_swig_py.SOPI_violet32_swigregister(SOPI_violet32)

class SOPI_col64(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_col64

    def __init__(self, *args):
        inlib_swig_py.SOPI_col64_swiginit(self, inlib_swig_py.new_SOPI_col64(*args))

# Register SOPI_col64 in inlib_swig_py:
inlib_swig_py.SOPI_col64_swigregister(SOPI_col64)

class SOPI_rgb216(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb216

    def __init__(self, *args):
        inlib_swig_py.SOPI_rgb216_swiginit(self, inlib_swig_py.new_SOPI_rgb216(*args))

# Register SOPI_rgb216 in inlib_swig_py:
inlib_swig_py.SOPI_rgb216_swigregister(SOPI_rgb216)

class SOPI_rgb512(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb512

    def __init__(self, *args):
        inlib_swig_py.SOPI_rgb512_swiginit(self, inlib_swig_py.new_SOPI_rgb512(*args))

# Register SOPI_rgb512 in inlib_swig_py:
inlib_swig_py.SOPI_rgb512_swigregister(SOPI_rgb512)

class SOPI_rgb4096(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb4096

    def __init__(self, *args):
        inlib_swig_py.SOPI_rgb4096_swiginit(self, inlib_swig_py.new_SOPI_rgb4096(*args))

# Register SOPI_rgb4096 in inlib_swig_py:
inlib_swig_py.SOPI_rgb4096_swigregister(SOPI_rgb4096)

class SOPI_rgb32768(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_rgb32768

    def __init__(self, *args):
        inlib_swig_py.SOPI_rgb32768_swiginit(self, inlib_swig_py.new_SOPI_rgb32768(*args))

# Register SOPI_rgb32768 in inlib_swig_py:
inlib_swig_py.SOPI_rgb32768_swigregister(SOPI_rgb32768)

class SOPI_midas_pastel(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_pastel

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_pastel_swiginit(self, inlib_swig_py.new_SOPI_midas_pastel(*args))

# Register SOPI_midas_pastel in inlib_swig_py:
inlib_swig_py.SOPI_midas_pastel_swigregister(SOPI_midas_pastel)

class SOPI_midas_heat(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_heat

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_heat_swiginit(self, inlib_swig_py.new_SOPI_midas_heat(*args))

# Register SOPI_midas_heat in inlib_swig_py:
inlib_swig_py.SOPI_midas_heat_swigregister(SOPI_midas_heat)

class SOPI_midas_rainbow3(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_rainbow3

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_rainbow3_swiginit(self, inlib_swig_py.new_SOPI_midas_rainbow3(*args))

# Register SOPI_midas_rainbow3 in inlib_swig_py:
inlib_swig_py.SOPI_midas_rainbow3_swigregister(SOPI_midas_rainbow3)

class SOPI_midas_bluered(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_bluered

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_bluered_swiginit(self, inlib_swig_py.new_SOPI_midas_bluered(*args))

# Register SOPI_midas_bluered in inlib_swig_py:
inlib_swig_py.SOPI_midas_bluered_swigregister(SOPI_midas_bluered)

class SOPI_midas_bluewhite(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_bluewhite

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_bluewhite_swiginit(self, inlib_swig_py.new_SOPI_midas_bluewhite(*args))

# Register SOPI_midas_bluewhite in inlib_swig_py:
inlib_swig_py.SOPI_midas_bluewhite_swigregister(SOPI_midas_bluewhite)

class SOPI_midas_stairs8(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_stairs8

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_stairs8_swiginit(self, inlib_swig_py.new_SOPI_midas_stairs8(*args))

# Register SOPI_midas_stairs8 in inlib_swig_py:
inlib_swig_py.SOPI_midas_stairs8_swigregister(SOPI_midas_stairs8)

class SOPI_midas_stairs9(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_stairs9

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_stairs9_swiginit(self, inlib_swig_py.new_SOPI_midas_stairs9(*args))

# Register SOPI_midas_stairs9 in inlib_swig_py:
inlib_swig_py.SOPI_midas_stairs9_swigregister(SOPI_midas_stairs9)

class SOPI_midas_staircase(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_staircase

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_staircase_swiginit(self, inlib_swig_py.new_SOPI_midas_staircase(*args))

# Register SOPI_midas_staircase in inlib_swig_py:
inlib_swig_py.SOPI_midas_staircase_swigregister(SOPI_midas_staircase)

class SOPI_midas_color(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_color

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_color_swiginit(self, inlib_swig_py.new_SOPI_midas_color(*args))

# Register SOPI_midas_color in inlib_swig_py:
inlib_swig_py.SOPI_midas_color_swigregister(SOPI_midas_color)

class SOPI_midas_manycol(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_manycol

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_manycol_swiginit(self, inlib_swig_py.new_SOPI_midas_manycol(*args))

# Register SOPI_midas_manycol in inlib_swig_py:
inlib_swig_py.SOPI_midas_manycol_swigregister(SOPI_midas_manycol)

class SOPI_midas_idl14(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_idl14

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_idl14_swiginit(self, inlib_swig_py.new_SOPI_midas_idl14(*args))

# Register SOPI_midas_idl14 in inlib_swig_py:
inlib_swig_py.SOPI_midas_idl14_swigregister(SOPI_midas_idl14)

class SOPI_midas_idl15(SOPI_cmap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_SOPI_midas_idl15

    def __init__(self, *args):
        inlib_swig_py.SOPI_midas_idl15_swiginit(self, inlib_swig_py.new_SOPI_midas_idl15(*args))

# Register SOPI_midas_idl15 in inlib_swig_py:
inlib_swig_py.SOPI_midas_idl15_swigregister(SOPI_midas_idl15)

class img_byte(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_img_byte

    def __init__(self, *args):
        inlib_swig_py.img_byte_swiginit(self, inlib_swig_py.new_img_byte(*args))

    def transfer(self, arg2):
        return inlib_swig_py.img_byte_transfer(self, arg2)

    def clear(self):
        return inlib_swig_py.img_byte_clear(self)

    def copy(self, arg2):
        return inlib_swig_py.img_byte_copy(self, arg2)

    def make_empty(self, a_delete=True):
        return inlib_swig_py.img_byte_make_empty(self, a_delete)

    def is_empty(self):
        return inlib_swig_py.img_byte_is_empty(self)

    def equal(self, arg2):
        return inlib_swig_py.img_byte_equal(self, arg2)

    def width(self):
        return inlib_swig_py.img_byte_width(self)

    def height(self):
        return inlib_swig_py.img_byte_height(self)

    def bytes_per_pixel(self):
        return inlib_swig_py.img_byte_bytes_per_pixel(self)

    def bpp(self):
        return inlib_swig_py.img_byte_bpp(self)

    def owner(self):
        return inlib_swig_py.img_byte_owner(self)

    def size(self):
        return inlib_swig_py.img_byte_size(self)

# Register img_byte in inlib_swig_py:
inlib_swig_py.img_byte_swigregister(img_byte)

class lut_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_lut_float

    def __init__(self, *args):
        inlib_swig_py.lut_float_swiginit(self, inlib_swig_py.new_lut_float(*args))

    def apply(self, arg2):
        return inlib_swig_py.lut_float_apply(self, arg2)

    def mn(self):
        return inlib_swig_py.lut_float_mn(self)

    def mx(self):
        return inlib_swig_py.lut_float_mx(self)

    def coln(self):
        return inlib_swig_py.lut_float_coln(self)

# Register lut_float in inlib_swig_py:
inlib_swig_py.lut_float_swigregister(lut_float)

class lut_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_lut_double

    def __init__(self, *args):
        inlib_swig_py.lut_double_swiginit(self, inlib_swig_py.new_lut_double(*args))

    def apply(self, arg2):
        return inlib_swig_py.lut_double_apply(self, arg2)

    def mn(self):
        return inlib_swig_py.lut_double_mn(self)

    def mx(self):
        return inlib_swig_py.lut_double_mx(self)

    def coln(self):
        return inlib_swig_py.lut_double_coln(self)

# Register lut_double in inlib_swig_py:
inlib_swig_py.lut_double_swigregister(lut_double)


def fpi():
    return inlib_swig_py.fpi()

def ftwo_pi():
    return inlib_swig_py.ftwo_pi()

def fhalf_pi():
    return inlib_swig_py.fhalf_pi()

def fdeg2rad():
    return inlib_swig_py.fdeg2rad()

def frad2deg():
    return inlib_swig_py.frad2deg()

def fround(a_x):
    return inlib_swig_py.fround(a_x)

def fstep(a_x):
    return inlib_swig_py.fstep(a_x)

def fcos(x):
    return inlib_swig_py.fcos(x)

def fsin(x):
    return inlib_swig_py.fsin(x)

def facos(x):
    return inlib_swig_py.facos(x)

def fasin(x):
    return inlib_swig_py.fasin(x)

def ftan(x):
    return inlib_swig_py.ftan(x)

def fatan(x):
    return inlib_swig_py.fatan(x)

def fatan2(x, y):
    return inlib_swig_py.fatan2(x, y)

def fsqrt(x):
    return inlib_swig_py.fsqrt(x)

def fpow(x, y):
    return inlib_swig_py.fpow(x, y)

def fexp(x):
    return inlib_swig_py.fexp(x)

def flog(x):
    return inlib_swig_py.flog(x)

def flog10(x):
    return inlib_swig_py.flog10(x)

def ffloor(x):
    return inlib_swig_py.ffloor(x)

def fceil(x):
    return inlib_swig_py.fceil(x)

def fcosh(x):
    return inlib_swig_py.fcosh(x)

def fsinh(x):
    return inlib_swig_py.fsinh(x)

def ffabs(x):
    return inlib_swig_py.ffabs(x)

def pi():
    return inlib_swig_py.pi()

def two_pi():
    return inlib_swig_py.two_pi()

def half_pi():
    return inlib_swig_py.half_pi()

def deg2rad():
    return inlib_swig_py.deg2rad()

def rad2deg():
    return inlib_swig_py.rad2deg()
class colorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_colorf

    def __init__(self, *args):
        inlib_swig_py.colorf_swiginit(self, inlib_swig_py.new_colorf(*args))

    def r(self):
        return inlib_swig_py.colorf_r(self)

    def g(self):
        return inlib_swig_py.colorf_g(self)

    def b(self):
        return inlib_swig_py.colorf_b(self)

    def a(self):
        return inlib_swig_py.colorf_a(self)

    def set_r(self, arg2):
        return inlib_swig_py.colorf_set_r(self, arg2)

    def set_g(self, arg2):
        return inlib_swig_py.colorf_set_g(self, arg2)

    def set_b(self, arg2):
        return inlib_swig_py.colorf_set_b(self, arg2)

    def set_a(self, arg2):
        return inlib_swig_py.colorf_set_a(self, arg2)

# Register colorf in inlib_swig_py:
inlib_swig_py.colorf_swigregister(colorf)


def colorf_aquamarine():
    return inlib_swig_py.colorf_aquamarine()

def colorf_mediumaquamarine():
    return inlib_swig_py.colorf_mediumaquamarine()

def colorf_black():
    return inlib_swig_py.colorf_black()

def colorf_blue():
    return inlib_swig_py.colorf_blue()

def colorf_cadetblue():
    return inlib_swig_py.colorf_cadetblue()

def colorf_cornflowerblue():
    return inlib_swig_py.colorf_cornflowerblue()

def colorf_darkslateblue():
    return inlib_swig_py.colorf_darkslateblue()

def colorf_lightblue():
    return inlib_swig_py.colorf_lightblue()

def colorf_lightsteelblue():
    return inlib_swig_py.colorf_lightsteelblue()

def colorf_mediumblue():
    return inlib_swig_py.colorf_mediumblue()

def colorf_mediumslateblue():
    return inlib_swig_py.colorf_mediumslateblue()

def colorf_midnightblue():
    return inlib_swig_py.colorf_midnightblue()

def colorf_navyblue():
    return inlib_swig_py.colorf_navyblue()

def colorf_navy():
    return inlib_swig_py.colorf_navy()

def colorf_skyblue():
    return inlib_swig_py.colorf_skyblue()

def colorf_slateblue():
    return inlib_swig_py.colorf_slateblue()

def colorf_steelblue():
    return inlib_swig_py.colorf_steelblue()

def colorf_coral():
    return inlib_swig_py.colorf_coral()

def colorf_cyan():
    return inlib_swig_py.colorf_cyan()

def colorf_firebrick():
    return inlib_swig_py.colorf_firebrick()

def colorf_brown():
    return inlib_swig_py.colorf_brown()

def colorf_gold():
    return inlib_swig_py.colorf_gold()

def colorf_goldenrod():
    return inlib_swig_py.colorf_goldenrod()

def colorf_green():
    return inlib_swig_py.colorf_green()

def colorf_darkgreen():
    return inlib_swig_py.colorf_darkgreen()

def colorf_darkolivegreen():
    return inlib_swig_py.colorf_darkolivegreen()

def colorf_forestgreen():
    return inlib_swig_py.colorf_forestgreen()

def colorf_limegreen():
    return inlib_swig_py.colorf_limegreen()

def colorf_mediumseagreen():
    return inlib_swig_py.colorf_mediumseagreen()

def colorf_mediumspringgreen():
    return inlib_swig_py.colorf_mediumspringgreen()

def colorf_palegreen():
    return inlib_swig_py.colorf_palegreen()

def colorf_seagreen():
    return inlib_swig_py.colorf_seagreen()

def colorf_springgreen():
    return inlib_swig_py.colorf_springgreen()

def colorf_yellowgreen():
    return inlib_swig_py.colorf_yellowgreen()

def colorf_darkslategrey():
    return inlib_swig_py.colorf_darkslategrey()

def colorf_dimgrey():
    return inlib_swig_py.colorf_dimgrey()

def colorf_lightgrey():
    return inlib_swig_py.colorf_lightgrey()

def colorf_grey():
    return inlib_swig_py.colorf_grey()

def colorf_khaki():
    return inlib_swig_py.colorf_khaki()

def colorf_magenta():
    return inlib_swig_py.colorf_magenta()

def colorf_maroon():
    return inlib_swig_py.colorf_maroon()

def colorf_orange():
    return inlib_swig_py.colorf_orange()

def colorf_orchid():
    return inlib_swig_py.colorf_orchid()

def colorf_darkorchid():
    return inlib_swig_py.colorf_darkorchid()

def colorf_mediumorchid():
    return inlib_swig_py.colorf_mediumorchid()

def colorf_pink():
    return inlib_swig_py.colorf_pink()

def colorf_plum():
    return inlib_swig_py.colorf_plum()

def colorf_red():
    return inlib_swig_py.colorf_red()

def colorf_indianred():
    return inlib_swig_py.colorf_indianred()

def colorf_mediumvioletred():
    return inlib_swig_py.colorf_mediumvioletred()

def colorf_orangered():
    return inlib_swig_py.colorf_orangered()

def colorf_violetred():
    return inlib_swig_py.colorf_violetred()

def colorf_salmon():
    return inlib_swig_py.colorf_salmon()

def colorf_sienna():
    return inlib_swig_py.colorf_sienna()

def colorf_tan():
    return inlib_swig_py.colorf_tan()

def colorf_thistle():
    return inlib_swig_py.colorf_thistle()

def colorf_turquoise():
    return inlib_swig_py.colorf_turquoise()

def colorf_darkturquoise():
    return inlib_swig_py.colorf_darkturquoise()

def colorf_mediumturquoise():
    return inlib_swig_py.colorf_mediumturquoise()

def colorf_violet():
    return inlib_swig_py.colorf_violet()

def colorf_blueviolet():
    return inlib_swig_py.colorf_blueviolet()

def colorf_wheat():
    return inlib_swig_py.colorf_wheat()

def colorf_white():
    return inlib_swig_py.colorf_white()

def colorf_yellow():
    return inlib_swig_py.colorf_yellow()

def colorf_greenyellow():
    return inlib_swig_py.colorf_greenyellow()
class vec2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec2f

    def __init__(self, *args):
        inlib_swig_py.vec2f_swiginit(self, inlib_swig_py.new_vec2f(*args))

    def x(self):
        return inlib_swig_py.vec2f_x(self)

    def y(self):
        return inlib_swig_py.vec2f_y(self)

    def set_value(self, arg2, arg3):
        return inlib_swig_py.vec2f_set_value(self, arg2, arg3)

    def length(self):
        return inlib_swig_py.vec2f_length(self)

    def normalize(self):
        return inlib_swig_py.vec2f_normalize(self)

# Register vec2f in inlib_swig_py:
inlib_swig_py.vec2f_swigregister(vec2f)

class vec3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3f

    def __init__(self, *args):
        inlib_swig_py.vec3f_swiginit(self, inlib_swig_py.new_vec3f(*args))

    def x(self):
        return inlib_swig_py.vec3f_x(self)

    def y(self):
        return inlib_swig_py.vec3f_y(self)

    def z(self):
        return inlib_swig_py.vec3f_z(self)

    def set_value(self, arg2, arg3, arg4):
        return inlib_swig_py.vec3f_set_value(self, arg2, arg3, arg4)

    def length(self):
        return inlib_swig_py.vec3f_length(self)

    def normalize(self):
        return inlib_swig_py.vec3f_normalize(self)

# Register vec3f in inlib_swig_py:
inlib_swig_py.vec3f_swigregister(vec3f)

class mat4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mat4f

    def __init__(self, *args):
        inlib_swig_py.mat4f_swiginit(self, inlib_swig_py.new_mat4f(*args))

# Register mat4f in inlib_swig_py:
inlib_swig_py.mat4f_swigregister(mat4f)

class rotf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rotf

    def __init__(self, *args):
        inlib_swig_py.rotf_swiginit(self, inlib_swig_py.new_rotf(*args))

# Register rotf in inlib_swig_py:
inlib_swig_py.rotf_swigregister(rotf)

class box3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_box3f

    def __init__(self, *args):
        inlib_swig_py.box3f_swiginit(self, inlib_swig_py.new_box3f(*args))

    def make_empty(self):
        return inlib_swig_py.box3f_make_empty(self)

    def is_empty(self):
        return inlib_swig_py.box3f_is_empty(self)

    def extend_by(self, *args):
        return inlib_swig_py.box3f_extend_by(self, *args)

    def mn(self):
        return inlib_swig_py.box3f_mn(self)

    def mx(self):
        return inlib_swig_py.box3f_mx(self)

# Register box3f in inlib_swig_py:
inlib_swig_py.box3f_swigregister(box3f)

class vec3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_vec3d

    def __init__(self, *args):
        inlib_swig_py.vec3d_swiginit(self, inlib_swig_py.new_vec3d(*args))

    def x(self):
        return inlib_swig_py.vec3d_x(self)

    def y(self):
        return inlib_swig_py.vec3d_y(self)

    def z(self):
        return inlib_swig_py.vec3d_z(self)

    def set_value(self, arg2, arg3, arg4):
        return inlib_swig_py.vec3d_set_value(self, arg2, arg3, arg4)

    def length(self):
        return inlib_swig_py.vec3d_length(self)

    def normalize(self):
        return inlib_swig_py.vec3d_normalize(self)

# Register vec3d in inlib_swig_py:
inlib_swig_py.vec3d_swigregister(vec3d)

class rotd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rotd

    def __init__(self, *args):
        inlib_swig_py.rotd_swiginit(self, inlib_swig_py.new_rotd(*args))

# Register rotd in inlib_swig_py:
inlib_swig_py.rotd_swigregister(rotd)

class box3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_box3d

    def __init__(self, *args):
        inlib_swig_py.box3d_swiginit(self, inlib_swig_py.new_box3d(*args))

    def make_empty(self):
        return inlib_swig_py.box3d_make_empty(self)

    def is_empty(self):
        return inlib_swig_py.box3d_is_empty(self)

    def extend_by(self, *args):
        return inlib_swig_py.box3d_extend_by(self, *args)

    def mn(self):
        return inlib_swig_py.box3d_mn(self)

    def mx(self):
        return inlib_swig_py.box3d_mx(self)

# Register box3d in inlib_swig_py:
inlib_swig_py.box3d_swigregister(box3d)

class sf_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_string

    def __init__(self, *args):
        inlib_swig_py.sf_string_swiginit(self, inlib_swig_py.new_sf_string(*args))

    def value(self, *args):
        return inlib_swig_py.sf_string_value(self, *args)

# Register sf_string in inlib_swig_py:
inlib_swig_py.sf_string_swigregister(sf_string)

class sf_vec3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_vec3f

    def __init__(self, *args):
        inlib_swig_py.sf_vec3f_swiginit(self, inlib_swig_py.new_sf_vec3f(*args))

    def value(self, *args):
        return inlib_swig_py.sf_vec3f_value(self, *args)

# Register sf_vec3f in inlib_swig_py:
inlib_swig_py.sf_vec3f_swigregister(sf_vec3f)

class sf_mat4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_mat4f

    def __init__(self, *args):
        inlib_swig_py.sf_mat4f_swiginit(self, inlib_swig_py.new_sf_mat4f(*args))

    def value(self, *args):
        return inlib_swig_py.sf_mat4f_value(self, *args)

# Register sf_mat4f in inlib_swig_py:
inlib_swig_py.sf_mat4f_swigregister(sf_mat4f)

class sf_rotf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_rotf

    def __init__(self, *args):
        inlib_swig_py.sf_rotf_swiginit(self, inlib_swig_py.new_sf_rotf(*args))

    def value(self, *args):
        return inlib_swig_py.sf_rotf_value(self, *args)

# Register sf_rotf in inlib_swig_py:
inlib_swig_py.sf_rotf_swigregister(sf_rotf)

class mf_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mf_string

    def __init__(self, *args):
        inlib_swig_py.mf_string_swiginit(self, inlib_swig_py.new_mf_string(*args))

    def size(self):
        return inlib_swig_py.mf_string_size(self)

    def empty(self):
        return inlib_swig_py.mf_string_empty(self)

    def values(self):
        return inlib_swig_py.mf_string_values(self)

# Register mf_string in inlib_swig_py:
inlib_swig_py.mf_string_swigregister(mf_string)

class sf_bool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_bool

    def __init__(self, *args):
        inlib_swig_py.sf_bool_swiginit(self, inlib_swig_py.new_sf_bool(*args))

    def value(self, *args):
        return inlib_swig_py.sf_bool_value(self, *args)

    def value_cp(self):
        return inlib_swig_py.sf_bool_value_cp(self)

# Register sf_bool in inlib_swig_py:
inlib_swig_py.sf_bool_swigregister(sf_bool)

class sf_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_float

    def __init__(self, *args):
        inlib_swig_py.sf_float_swiginit(self, inlib_swig_py.new_sf_float(*args))

    def value(self, *args):
        return inlib_swig_py.sf_float_value(self, *args)

    def value_cp(self):
        return inlib_swig_py.sf_float_value_cp(self)

# Register sf_float in inlib_swig_py:
inlib_swig_py.sf_float_swigregister(sf_float)

class sf_vec_colorf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_vec_colorf

    def __init__(self, *args):
        inlib_swig_py.sf_vec_colorf_swiginit(self, inlib_swig_py.new_sf_vec_colorf(*args))

    def value(self, *args):
        return inlib_swig_py.sf_vec_colorf_value(self, *args)

# Register sf_vec_colorf in inlib_swig_py:
inlib_swig_py.sf_vec_colorf_swigregister(sf_vec_colorf)

class sf_img_byte(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        inlib_swig_py.sf_img_byte_swiginit(self, inlib_swig_py.new_sf_img_byte(arg2))

    def value(self, *args):
        return inlib_swig_py.sf_img_byte_value(self, *args)

# Register sf_img_byte in inlib_swig_py:
inlib_swig_py.sf_img_byte_swigregister(sf_img_byte)

class sf_enum_font_modeling(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_font_modeling

    def __init__(self, *args):
        inlib_swig_py.sf_enum_font_modeling_swiginit(self, inlib_swig_py.new_sf_enum_font_modeling(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_font_modeling_value(self, *args)

# Register sf_enum_font_modeling in inlib_swig_py:
inlib_swig_py.sf_enum_font_modeling_swigregister(sf_enum_font_modeling)

class sf_enum_winding_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_winding_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_winding_type_swiginit(self, inlib_swig_py.new_sf_enum_winding_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_winding_type_value(self, *args)

# Register sf_enum_winding_type in inlib_swig_py:
inlib_swig_py.sf_enum_winding_type_swigregister(sf_enum_winding_type)

class sf_enum_marker_style(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_marker_style

    def __init__(self, *args):
        inlib_swig_py.sf_enum_marker_style_swiginit(self, inlib_swig_py.new_sf_enum_marker_style(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_marker_style_value(self, *args)

# Register sf_enum_marker_style in inlib_swig_py:
inlib_swig_py.sf_enum_marker_style_swigregister(sf_enum_marker_style)

class sf_enum_area_style(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_area_style

    def __init__(self, *args):
        inlib_swig_py.sf_enum_area_style_swiginit(self, inlib_swig_py.new_sf_enum_area_style(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_area_style_value(self, *args)

# Register sf_enum_area_style in inlib_swig_py:
inlib_swig_py.sf_enum_area_style_swigregister(sf_enum_area_style)

class sf_enum_painting_policy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_painting_policy

    def __init__(self, *args):
        inlib_swig_py.sf_enum_painting_policy_swiginit(self, inlib_swig_py.new_sf_enum_painting_policy(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_painting_policy_value(self, *args)

# Register sf_enum_painting_policy in inlib_swig_py:
inlib_swig_py.sf_enum_painting_policy_swigregister(sf_enum_painting_policy)

class sf_enum_hatching_policy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_hatching_policy

    def __init__(self, *args):
        inlib_swig_py.sf_enum_hatching_policy_swiginit(self, inlib_swig_py.new_sf_enum_hatching_policy(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_hatching_policy_value(self, *args)

# Register sf_enum_hatching_policy in inlib_swig_py:
inlib_swig_py.sf_enum_hatching_policy_swigregister(sf_enum_hatching_policy)

class sf_enum_projection_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_projection_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_projection_type_swiginit(self, inlib_swig_py.new_sf_enum_projection_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_projection_type_value(self, *args)

# Register sf_enum_projection_type in inlib_swig_py:
inlib_swig_py.sf_enum_projection_type_swigregister(sf_enum_projection_type)

class sf_enum_hjust(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_hjust

    def __init__(self, *args):
        inlib_swig_py.sf_enum_hjust_swiginit(self, inlib_swig_py.new_sf_enum_hjust(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_hjust_value(self, *args)

# Register sf_enum_hjust in inlib_swig_py:
inlib_swig_py.sf_enum_hjust_swigregister(sf_enum_hjust)

class sf_enum_vjust(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_vjust

    def __init__(self, *args):
        inlib_swig_py.sf_enum_vjust_swiginit(self, inlib_swig_py.new_sf_enum_vjust(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_vjust_value(self, *args)

# Register sf_enum_vjust in inlib_swig_py:
inlib_swig_py.sf_enum_vjust_swigregister(sf_enum_vjust)

class sf_enum_draw_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_draw_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_draw_type_swiginit(self, inlib_swig_py.new_sf_enum_draw_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_draw_type_value(self, *args)

# Register sf_enum_draw_type in inlib_swig_py:
inlib_swig_py.sf_enum_draw_type_swigregister(sf_enum_draw_type)

class sf_enum_shade_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_shade_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_shade_type_swiginit(self, inlib_swig_py.new_sf_enum_shade_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_shade_type_value(self, *args)

# Register sf_enum_shade_type in inlib_swig_py:
inlib_swig_py.sf_enum_shade_type_swigregister(sf_enum_shade_type)

class mf_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mf_float

    def __init__(self, *args):
        inlib_swig_py.mf_float_swiginit(self, inlib_swig_py.new_mf_float(*args))

    def size(self):
        return inlib_swig_py.mf_float_size(self)

    def empty(self):
        return inlib_swig_py.mf_float_empty(self)

    def values(self):
        return inlib_swig_py.mf_float_values(self)

# Register mf_float in inlib_swig_py:
inlib_swig_py.mf_float_swigregister(mf_float)

class mf_vec_vec2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mf_vec_vec2f

    def __init__(self, *args):
        inlib_swig_py.mf_vec_vec2f_swiginit(self, inlib_swig_py.new_mf_vec_vec2f(*args))

    def size(self):
        return inlib_swig_py.mf_vec_vec2f_size(self)

    def empty(self):
        return inlib_swig_py.mf_vec_vec2f_empty(self)

    def values(self):
        return inlib_swig_py.mf_vec_vec2f_values(self)

# Register mf_vec_vec2f in inlib_swig_py:
inlib_swig_py.mf_vec_vec2f_swigregister(mf_vec_vec2f)

class mf_enum_unit_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_mf_enum_unit_type

    def __init__(self, *args):
        inlib_swig_py.mf_enum_unit_type_swiginit(self, inlib_swig_py.new_mf_enum_unit_type(*args))

    def size(self):
        return inlib_swig_py.mf_enum_unit_type_size(self)

    def empty(self):
        return inlib_swig_py.mf_enum_unit_type_empty(self)

    def values(self):
        return inlib_swig_py.mf_enum_unit_type_values(self)

# Register mf_enum_unit_type in inlib_swig_py:
inlib_swig_py.mf_enum_unit_type_swigregister(mf_enum_unit_type)

line_solid = inlib_swig_py.line_solid
line_dashed = inlib_swig_py.line_dashed
line_dotted = inlib_swig_py.line_dotted
line_dash_dotted = inlib_swig_py.line_dash_dotted
marker_dot = inlib_swig_py.marker_dot
marker_plus = inlib_swig_py.marker_plus
marker_asterisk = inlib_swig_py.marker_asterisk
marker_cross = inlib_swig_py.marker_cross
marker_star = inlib_swig_py.marker_star
marker_circle_line = inlib_swig_py.marker_circle_line
marker_circle_filled = inlib_swig_py.marker_circle_filled
marker_triangle_up_line = inlib_swig_py.marker_triangle_up_line
marker_triangle_up_filled = inlib_swig_py.marker_triangle_up_filled
marker_triangle_down_line = inlib_swig_py.marker_triangle_down_line
marker_triangle_down_filled = inlib_swig_py.marker_triangle_down_filled
marker_david_star_line = inlib_swig_py.marker_david_star_line
marker_david_star_filled = inlib_swig_py.marker_david_star_filled
marker_swiss_cross_line = inlib_swig_py.marker_swiss_cross_line
marker_swiss_cross_filled = inlib_swig_py.marker_swiss_cross_filled
marker_diamond_line = inlib_swig_py.marker_diamond_line
marker_diamond_filled = inlib_swig_py.marker_diamond_filled
marker_square_line = inlib_swig_py.marker_square_line
marker_square_filled = inlib_swig_py.marker_square_filled
marker_penta_star_line = inlib_swig_py.marker_penta_star_line
marker_penta_star_filled = inlib_swig_py.marker_penta_star_filled
marker_minus = inlib_swig_py.marker_minus
area_solid = inlib_swig_py.area_solid
area_hatched = inlib_swig_py.area_hatched
area_checker = inlib_swig_py.area_checker
area_edged = inlib_swig_py.area_edged
projection_none = inlib_swig_py.projection_none
projection_rz = inlib_swig_py.projection_rz
projection_phiz = inlib_swig_py.projection_phiz
projection_zr = inlib_swig_py.projection_zr
projection_zphi = inlib_swig_py.projection_zphi
painting_uniform = inlib_swig_py.painting_uniform
painting_by_value = inlib_swig_py.painting_by_value
painting_by_level = inlib_swig_py.painting_by_level
painting_grey_scale = inlib_swig_py.painting_grey_scale
painting_violet_to_red = inlib_swig_py.painting_violet_to_red
painting_grey_scale_inverse = inlib_swig_py.painting_grey_scale_inverse
hatching_none = inlib_swig_py.hatching_none
hatching_right = inlib_swig_py.hatching_right
hatching_left = inlib_swig_py.hatching_left
hatching_left_and_right = inlib_swig_py.hatching_left_and_right
left = inlib_swig_py.left
center = inlib_swig_py.center
right = inlib_swig_py.right
bottom = inlib_swig_py.bottom
middle = inlib_swig_py.middle
top = inlib_swig_py.top
latin = inlib_swig_py.latin
greek = inlib_swig_py.greek
special = inlib_swig_py.special
font_outline = inlib_swig_py.font_outline
font_filled = inlib_swig_py.font_filled
font_pixmap = inlib_swig_py.font_pixmap
arrow_up = inlib_swig_py.arrow_up
arrow_down = inlib_swig_py.arrow_down
arrow_left = inlib_swig_py.arrow_left
arrow_right = inlib_swig_py.arrow_right
winding_ccw = inlib_swig_py.winding_ccw
winding_cw = inlib_swig_py.winding_cw
move_rotate_right = inlib_swig_py.move_rotate_right
move_rotate_left = inlib_swig_py.move_rotate_left
move_rotate_up = inlib_swig_py.move_rotate_up
move_rotate_down = inlib_swig_py.move_rotate_down
move_roll_plus = inlib_swig_py.move_roll_plus
move_roll_minus = inlib_swig_py.move_roll_minus
move_translate_right = inlib_swig_py.move_translate_right
move_translate_left = inlib_swig_py.move_translate_left
move_up = inlib_swig_py.move_up
move_down = inlib_swig_py.move_down
move_forward = inlib_swig_py.move_forward
move_backward = inlib_swig_py.move_backward
move_zoom_in = inlib_swig_py.move_zoom_in
move_zoom_out = inlib_swig_py.move_zoom_out
move_rotate_around_focal_right = inlib_swig_py.move_rotate_around_focal_right
move_rotate_around_focal_left = inlib_swig_py.move_rotate_around_focal_left
move_rotate_around_focal_up = inlib_swig_py.move_rotate_around_focal_up
move_rotate_around_focal_down = inlib_swig_py.move_rotate_around_focal_down
move_roll_around_focal_plus = inlib_swig_py.move_roll_around_focal_plus
move_roll_around_focal_minus = inlib_swig_py.move_roll_around_focal_minus
move_zoom_in_out = inlib_swig_py.move_zoom_in_out
move_zoom_in_out_rot = inlib_swig_py.move_zoom_in_out_rot
move_curve = inlib_swig_py.move_curve
anim_left = inlib_swig_py.anim_left
anim_right = inlib_swig_py.anim_right
anim_up = inlib_swig_py.anim_up
anim_down = inlib_swig_py.anim_down
anim_mode_0 = inlib_swig_py.anim_mode_0
anim_mode_1 = inlib_swig_py.anim_mode_1
anim_mode_2 = inlib_swig_py.anim_mode_2
anim_mode_3 = inlib_swig_py.anim_mode_3
anim_mode_4 = inlib_swig_py.anim_mode_4
key_left = inlib_swig_py.key_left
key_right = inlib_swig_py.key_right
key_up = inlib_swig_py.key_up
key_down = inlib_swig_py.key_down
number_uint = inlib_swig_py.number_uint
number_int = inlib_swig_py.number_int
number_real = inlib_swig_py.number_real
number_ip = inlib_swig_py.number_ip
number_radec = inlib_swig_py.number_radec
camera_ortho = inlib_swig_py.camera_ortho
camera_perspective = inlib_swig_py.camera_perspective
gsto_memory = inlib_swig_py.gsto_memory
gsto_gl_vbo = inlib_swig_py.gsto_gl_vbo
gsto_gl_list = inlib_swig_py.gsto_gl_list
layout_text_under_image = inlib_swig_py.layout_text_under_image
layout_text_at_left_of_image = inlib_swig_py.layout_text_at_left_of_image
auto_lut_none = inlib_swig_py.auto_lut_none
auto_lut_min_max = inlib_swig_py.auto_lut_min_max
auto_lut_mean_rms = inlib_swig_py.auto_lut_mean_rms
draw_points = inlib_swig_py.draw_points
draw_lines = inlib_swig_py.draw_lines
draw_filled = inlib_swig_py.draw_filled
shade_flat = inlib_swig_py.shade_flat
shade_smooth = inlib_swig_py.shade_smooth
solid_none = inlib_swig_py.solid_none
solid_union = inlib_swig_py.solid_union
solid_intersection = inlib_swig_py.solid_intersection
solid_subtraction = inlib_swig_py.solid_subtraction
text_as_is = inlib_swig_py.text_as_is
text_enforce_width = inlib_swig_py.text_enforce_width
text_enforce_height = inlib_swig_py.text_enforce_height

def font_arialbd_ttf():
    return inlib_swig_py.font_arialbd_ttf()

def modeling_boxes():
    return inlib_swig_py.modeling_boxes()

def modeling_wire_boxes():
    return inlib_swig_py.modeling_wire_boxes()

def modeling_lines():
    return inlib_swig_py.modeling_lines()

def modeling_segments():
    return inlib_swig_py.modeling_segments()

def modeling_points():
    return inlib_swig_py.modeling_points()

def modeling_top_lines():
    return inlib_swig_py.modeling_top_lines()

def modeling_texts():
    return inlib_swig_py.modeling_texts()

def modeling_curve():
    return inlib_swig_py.modeling_curve()

def modeling_filled_curve():
    return inlib_swig_py.modeling_filled_curve()

def modeling_bar_chart():
    return inlib_swig_py.modeling_bar_chart()

def modeling_solid():
    return inlib_swig_py.modeling_solid()

def modeling_wire_frame():
    return inlib_swig_py.modeling_wire_frame()

def modeling_reduced_wire_frame():
    return inlib_swig_py.modeling_reduced_wire_frame()

def modeling_polygon():
    return inlib_swig_py.modeling_polygon()

def modeling_none():
    return inlib_swig_py.modeling_none()

def modeling_I():
    return inlib_swig_py.modeling_I()

def modeling_plus():
    return inlib_swig_py.modeling_plus()

def modeling_markers():
    return inlib_swig_py.modeling_markers()
class style(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    color = property(inlib_swig_py.style_color_get, inlib_swig_py.style_color_set)
    highlight_color = property(inlib_swig_py.style_highlight_color_get, inlib_swig_py.style_highlight_color_set)
    back_color = property(inlib_swig_py.style_back_color_get, inlib_swig_py.style_back_color_set)
    line_width = property(inlib_swig_py.style_line_width_get, inlib_swig_py.style_line_width_set)
    marker_size = property(inlib_swig_py.style_marker_size_get, inlib_swig_py.style_marker_size_set)
    point_size = property(inlib_swig_py.style_point_size_get, inlib_swig_py.style_point_size_set)
    font_size = property(inlib_swig_py.style_font_size_get, inlib_swig_py.style_font_size_set)
    font_modeling = property(inlib_swig_py.style_font_modeling_get, inlib_swig_py.style_font_modeling_set)
    front_face = property(inlib_swig_py.style_front_face_get, inlib_swig_py.style_front_face_set)
    line_pattern = property(inlib_swig_py.style_line_pattern_get, inlib_swig_py.style_line_pattern_set)
    marker_style = property(inlib_swig_py.style_marker_style_get, inlib_swig_py.style_marker_style_set)
    area_style = property(inlib_swig_py.style_area_style_get, inlib_swig_py.style_area_style_set)
    modeling = property(inlib_swig_py.style_modeling_get, inlib_swig_py.style_modeling_set)
    light_model = property(inlib_swig_py.style_light_model_get, inlib_swig_py.style_light_model_set)
    tick_modeling = property(inlib_swig_py.style_tick_modeling_get, inlib_swig_py.style_tick_modeling_set)
    encoding = property(inlib_swig_py.style_encoding_get, inlib_swig_py.style_encoding_set)
    smoothing = property(inlib_swig_py.style_smoothing_get, inlib_swig_py.style_smoothing_set)
    hinting = property(inlib_swig_py.style_hinting_get, inlib_swig_py.style_hinting_set)
    cut = property(inlib_swig_py.style_cut_get, inlib_swig_py.style_cut_set)
    painting = property(inlib_swig_py.style_painting_get, inlib_swig_py.style_painting_set)
    hatching = property(inlib_swig_py.style_hatching_get, inlib_swig_py.style_hatching_set)
    projection = property(inlib_swig_py.style_projection_get, inlib_swig_py.style_projection_set)
    font = property(inlib_swig_py.style_font_get, inlib_swig_py.style_font_set)
    multi_node_limit = property(inlib_swig_py.style_multi_node_limit_get, inlib_swig_py.style_multi_node_limit_set)
    divisions = property(inlib_swig_py.style_divisions_get, inlib_swig_py.style_divisions_set)
    rotation_steps = property(inlib_swig_py.style_rotation_steps_get, inlib_swig_py.style_rotation_steps_set)
    spacing = property(inlib_swig_py.style_spacing_get, inlib_swig_py.style_spacing_set)
    angle = property(inlib_swig_py.style_angle_get, inlib_swig_py.style_angle_set)
    scale = property(inlib_swig_py.style_scale_get, inlib_swig_py.style_scale_set)
    offset = property(inlib_swig_py.style_offset_get, inlib_swig_py.style_offset_set)
    strip_width = property(inlib_swig_py.style_strip_width_get, inlib_swig_py.style_strip_width_set)
    visible = property(inlib_swig_py.style_visible_get, inlib_swig_py.style_visible_set)
    bar_offset = property(inlib_swig_py.style_bar_offset_get, inlib_swig_py.style_bar_offset_set)
    bar_width = property(inlib_swig_py.style_bar_width_get, inlib_swig_py.style_bar_width_set)
    editable = property(inlib_swig_py.style_editable_get, inlib_swig_py.style_editable_set)
    automated = property(inlib_swig_py.style_automated_get, inlib_swig_py.style_automated_set)
    options = property(inlib_swig_py.style_options_get, inlib_swig_py.style_options_set)
    color_mapping = property(inlib_swig_py.style_color_mapping_get, inlib_swig_py.style_color_mapping_set)
    enforced = property(inlib_swig_py.style_enforced_get, inlib_swig_py.style_enforced_set)
    translation = property(inlib_swig_py.style_translation_get, inlib_swig_py.style_translation_set)

    def __init__(self):
        inlib_swig_py.style_swiginit(self, inlib_swig_py.new_style())
    __swig_destroy__ = inlib_swig_py.delete_style

# Register style in inlib_swig_py:
inlib_swig_py.style_swigregister(style)

class text_style(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    visible = property(inlib_swig_py.text_style_visible_get, inlib_swig_py.text_style_visible_set)
    color = property(inlib_swig_py.text_style_color_get, inlib_swig_py.text_style_color_set)
    back_color = property(inlib_swig_py.text_style_back_color_get, inlib_swig_py.text_style_back_color_set)
    back_shadow = property(inlib_swig_py.text_style_back_shadow_get, inlib_swig_py.text_style_back_shadow_set)
    modeling = property(inlib_swig_py.text_style_modeling_get, inlib_swig_py.text_style_modeling_set)
    font = property(inlib_swig_py.text_style_font_get, inlib_swig_py.text_style_font_set)
    font_size = property(inlib_swig_py.text_style_font_size_get, inlib_swig_py.text_style_font_size_set)
    font_modeling = property(inlib_swig_py.text_style_font_modeling_get, inlib_swig_py.text_style_font_modeling_set)
    encoding = property(inlib_swig_py.text_style_encoding_get, inlib_swig_py.text_style_encoding_set)
    smoothing = property(inlib_swig_py.text_style_smoothing_get, inlib_swig_py.text_style_smoothing_set)
    hinting = property(inlib_swig_py.text_style_hinting_get, inlib_swig_py.text_style_hinting_set)
    hjust = property(inlib_swig_py.text_style_hjust_get, inlib_swig_py.text_style_hjust_set)
    vjust = property(inlib_swig_py.text_style_vjust_get, inlib_swig_py.text_style_vjust_set)
    scale = property(inlib_swig_py.text_style_scale_get, inlib_swig_py.text_style_scale_set)
    x_orientation = property(inlib_swig_py.text_style_x_orientation_get, inlib_swig_py.text_style_x_orientation_set)
    y_orientation = property(inlib_swig_py.text_style_y_orientation_get, inlib_swig_py.text_style_y_orientation_set)
    rotated = property(inlib_swig_py.text_style_rotated_get, inlib_swig_py.text_style_rotated_set)
    line_width = property(inlib_swig_py.text_style_line_width_get, inlib_swig_py.text_style_line_width_set)
    line_pattern = property(inlib_swig_py.text_style_line_pattern_get, inlib_swig_py.text_style_line_pattern_set)
    enforced = property(inlib_swig_py.text_style_enforced_get, inlib_swig_py.text_style_enforced_set)
    translation = property(inlib_swig_py.text_style_translation_get, inlib_swig_py.text_style_translation_set)
    front_face = property(inlib_swig_py.text_style_front_face_get, inlib_swig_py.text_style_front_face_set)
    options = property(inlib_swig_py.text_style_options_get, inlib_swig_py.text_style_options_set)

    def __init__(self):
        inlib_swig_py.text_style_swiginit(self, inlib_swig_py.new_text_style())
    __swig_destroy__ = inlib_swig_py.delete_text_style

# Register text_style in inlib_swig_py:
inlib_swig_py.text_style_swigregister(text_style)

class render_action(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register render_action in inlib_swig_py:
inlib_swig_py.render_action_swigregister(render_action)

class write_action(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def protocol(self):
        return inlib_swig_py.write_action_protocol(self)
    __swig_destroy__ = inlib_swig_py.delete_write_action

# Register write_action in inlib_swig_py:
inlib_swig_py.write_action_swigregister(write_action)

class polyhedron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_polyhedron

    def __init__(self, *args):
        inlib_swig_py.polyhedron_swiginit(self, inlib_swig_py.new_polyhedron(*args))

    def Translate(self, arg2, arg3, arg4):
        return inlib_swig_py.polyhedron_Translate(self, arg2, arg3, arg4)

    def Transform(self, *args):
        return inlib_swig_py.polyhedron_Transform(self, *args)

    def add(self, p):
        return inlib_swig_py.polyhedron_add(self, p)

    def subtract(self, p):
        return inlib_swig_py.polyhedron_subtract(self, p)

    def intersect(self, p):
        return inlib_swig_py.polyhedron_intersect(self, p)

# Register polyhedron in inlib_swig_py:
inlib_swig_py.polyhedron_swigregister(polyhedron)

class hep_polyhedron_tubs(polyhedron):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_hep_polyhedron_tubs

    def __init__(self, *args):
        inlib_swig_py.hep_polyhedron_tubs_swiginit(self, inlib_swig_py.new_hep_polyhedron_tubs(*args))

# Register hep_polyhedron_tubs in inlib_swig_py:
inlib_swig_py.hep_polyhedron_tubs_swigregister(hep_polyhedron_tubs)

class sf_polyhedron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_polyhedron

    def __init__(self, *args):
        inlib_swig_py.sf_polyhedron_swiginit(self, inlib_swig_py.new_sf_polyhedron(*args))

    def value(self, *args):
        return inlib_swig_py.sf_polyhedron_value(self, *args)

# Register sf_polyhedron in inlib_swig_py:
inlib_swig_py.sf_polyhedron_swigregister(sf_polyhedron)

class sg_node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_node_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_node

    def render(self, arg2):
        return inlib_swig_py.sg_node_render(self, arg2)

    def write(self, arg2):
        return inlib_swig_py.sg_node_write(self, arg2)

# Register sg_node in inlib_swig_py:
inlib_swig_py.sg_node_swigregister(sg_node)

class sg_group(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_group_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_group

    def __init__(self, *args):
        inlib_swig_py.sg_group_swiginit(self, inlib_swig_py.new_sg_group(*args))

    def add(self, arg2):
        return inlib_swig_py.sg_group_add(self, arg2)

    def remove(self, arg2):
        return inlib_swig_py.sg_group_remove(self, arg2)

    def remove_index(self, arg2):
        return inlib_swig_py.sg_group_remove_index(self, arg2)

# Register sg_group in inlib_swig_py:
inlib_swig_py.sg_group_swigregister(sg_group)

class sg_separator(sg_group):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_separator

    def __init__(self, *args):
        inlib_swig_py.sg_separator_swiginit(self, inlib_swig_py.new_sg_separator(*args))

# Register sg_separator in inlib_swig_py:
inlib_swig_py.sg_separator_swigregister(sg_separator)

class sg_selection(sg_separator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_selection

    def __init__(self, *args):
        inlib_swig_py.sg_selection_swiginit(self, inlib_swig_py.new_sg_selection(*args))

# Register sg_selection in inlib_swig_py:
inlib_swig_py.sg_selection_swigregister(sg_selection)

class sg_base_camera(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def near_height(self):
        return inlib_swig_py.sg_base_camera_near_height(self)

    def zoom(self, arg2):
        return inlib_swig_py.sg_base_camera_zoom(self, arg2)

    def copy(self):
        return inlib_swig_py.sg_base_camera_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_base_camera
    znear = property(inlib_swig_py.sg_base_camera_znear_get, inlib_swig_py.sg_base_camera_znear_set)
    zfar = property(inlib_swig_py.sg_base_camera_zfar_get, inlib_swig_py.sg_base_camera_zfar_set)
    position = property(inlib_swig_py.sg_base_camera_position_get, inlib_swig_py.sg_base_camera_position_set)
    orientation = property(inlib_swig_py.sg_base_camera_orientation_get, inlib_swig_py.sg_base_camera_orientation_set)
    dx = property(inlib_swig_py.sg_base_camera_dx_get, inlib_swig_py.sg_base_camera_dx_set)
    da = property(inlib_swig_py.sg_base_camera_da_get, inlib_swig_py.sg_base_camera_da_set)
    ds = property(inlib_swig_py.sg_base_camera_ds_get, inlib_swig_py.sg_base_camera_ds_set)
    focal = property(inlib_swig_py.sg_base_camera_focal_get, inlib_swig_py.sg_base_camera_focal_set)

# Register sg_base_camera in inlib_swig_py:
inlib_swig_py.sg_base_camera_swigregister(sg_base_camera)

class sg_ortho(sg_base_camera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def near_height(self):
        return inlib_swig_py.sg_ortho_near_height(self)

    def zoom(self, arg2):
        return inlib_swig_py.sg_ortho_zoom(self, arg2)

    def copy(self):
        return inlib_swig_py.sg_ortho_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_ortho

    def __init__(self, *args):
        inlib_swig_py.sg_ortho_swiginit(self, inlib_swig_py.new_sg_ortho(*args))
    height = property(inlib_swig_py.sg_ortho_height_get, inlib_swig_py.sg_ortho_height_set)

# Register sg_ortho in inlib_swig_py:
inlib_swig_py.sg_ortho_swigregister(sg_ortho)


def sg_cast_ortho(arg1):
    return inlib_swig_py.sg_cast_ortho(arg1)
class sg_perspective(sg_base_camera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def near_height(self):
        return inlib_swig_py.sg_perspective_near_height(self)

    def zoom(self, arg2):
        return inlib_swig_py.sg_perspective_zoom(self, arg2)

    def copy(self):
        return inlib_swig_py.sg_perspective_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_perspective

    def __init__(self, *args):
        inlib_swig_py.sg_perspective_swiginit(self, inlib_swig_py.new_sg_perspective(*args))
    height_angle = property(inlib_swig_py.sg_perspective_height_angle_get, inlib_swig_py.sg_perspective_height_angle_set)

# Register sg_perspective in inlib_swig_py:
inlib_swig_py.sg_perspective_swigregister(sg_perspective)


def sg_cast_perspective(arg1):
    return inlib_swig_py.sg_cast_perspective(arg1)
class sg_frustum(sg_base_camera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def near_height(self):
        return inlib_swig_py.sg_frustum_near_height(self)

    def zoom(self, arg2):
        return inlib_swig_py.sg_frustum_zoom(self, arg2)

    def copy(self):
        return inlib_swig_py.sg_frustum_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_frustum

    def __init__(self, *args):
        inlib_swig_py.sg_frustum_swiginit(self, inlib_swig_py.new_sg_frustum(*args))
    left = property(inlib_swig_py.sg_frustum_left_get, inlib_swig_py.sg_frustum_left_set)
    right = property(inlib_swig_py.sg_frustum_right_get, inlib_swig_py.sg_frustum_right_set)
    bottom = property(inlib_swig_py.sg_frustum_bottom_get, inlib_swig_py.sg_frustum_bottom_set)
    top = property(inlib_swig_py.sg_frustum_top_get, inlib_swig_py.sg_frustum_top_set)

# Register sg_frustum in inlib_swig_py:
inlib_swig_py.sg_frustum_swigregister(sg_frustum)


def sg_cast_frustum(arg1):
    return inlib_swig_py.sg_cast_frustum(arg1)
class sg_lrbt(sg_base_camera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def near_height(self):
        return inlib_swig_py.sg_lrbt_near_height(self)

    def zoom(self, arg2):
        return inlib_swig_py.sg_lrbt_zoom(self, arg2)

    def copy(self):
        return inlib_swig_py.sg_lrbt_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_lrbt

    def __init__(self, *args):
        inlib_swig_py.sg_lrbt_swiginit(self, inlib_swig_py.new_sg_lrbt(*args))
    left = property(inlib_swig_py.sg_lrbt_left_get, inlib_swig_py.sg_lrbt_left_set)
    right = property(inlib_swig_py.sg_lrbt_right_get, inlib_swig_py.sg_lrbt_right_set)
    bottom = property(inlib_swig_py.sg_lrbt_bottom_get, inlib_swig_py.sg_lrbt_bottom_set)
    top = property(inlib_swig_py.sg_lrbt_top_get, inlib_swig_py.sg_lrbt_top_set)

# Register sg_lrbt in inlib_swig_py:
inlib_swig_py.sg_lrbt_swigregister(sg_lrbt)


def sg_cast_lrbt(arg1):
    return inlib_swig_py.sg_cast_lrbt(arg1)
class sg_rgba(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_rgba_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_rgba

    def __init__(self, *args):
        inlib_swig_py.sg_rgba_swiginit(self, inlib_swig_py.new_sg_rgba(*args))
    color = property(inlib_swig_py.sg_rgba_color_get, inlib_swig_py.sg_rgba_color_set)

# Register sg_rgba in inlib_swig_py:
inlib_swig_py.sg_rgba_swigregister(sg_rgba)

class sg_base_tex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_base_tex
    intersect_down = inlib_swig_py.sg_base_tex_intersect_down
    intersect_move = inlib_swig_py.sg_base_tex_intersect_move
    intersect_up = inlib_swig_py.sg_base_tex_intersect_up

    def intersect_value(self, arg2, arg3, arg4, arg5):
        return inlib_swig_py.sg_base_tex_intersect_value(self, arg2, arg3, arg4, arg5)
    img = property(inlib_swig_py.sg_base_tex_img_get, inlib_swig_py.sg_base_tex_img_set)
    back_color = property(inlib_swig_py.sg_base_tex_back_color_get, inlib_swig_py.sg_base_tex_back_color_set)
    expand = property(inlib_swig_py.sg_base_tex_expand_get, inlib_swig_py.sg_base_tex_expand_set)
    limit = property(inlib_swig_py.sg_base_tex_limit_get, inlib_swig_py.sg_base_tex_limit_set)
    nearest = property(inlib_swig_py.sg_base_tex_nearest_get, inlib_swig_py.sg_base_tex_nearest_set)

# Register sg_base_tex in inlib_swig_py:
inlib_swig_py.sg_base_tex_swigregister(sg_base_tex)

class sg_tex_rect(sg_base_tex, sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def intersect_value(self, arg2, arg3, arg4, arg5):
        return inlib_swig_py.sg_tex_rect_intersect_value(self, arg2, arg3, arg4, arg5)

    def copy(self):
        return inlib_swig_py.sg_tex_rect_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_tex_rect

    def __init__(self, *args):
        inlib_swig_py.sg_tex_rect_swiginit(self, inlib_swig_py.new_sg_tex_rect(*args))

# Register sg_tex_rect in inlib_swig_py:
inlib_swig_py.sg_tex_rect_swigregister(sg_tex_rect)

class sg_torche(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_torche_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_torche

    def __init__(self, *args):
        inlib_swig_py.sg_torche_swiginit(self, inlib_swig_py.new_sg_torche(*args))
    color = property(inlib_swig_py.sg_torche_color_get, inlib_swig_py.sg_torche_color_set)
    direction = property(inlib_swig_py.sg_torche_direction_get, inlib_swig_py.sg_torche_direction_set)
    on = property(inlib_swig_py.sg_torche_on_get, inlib_swig_py.sg_torche_on_set)

# Register sg_torche in inlib_swig_py:
inlib_swig_py.sg_torche_swigregister(sg_torche)

class sg_head_light(sg_torche):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_head_light_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_head_light

    def __init__(self, *args):
        inlib_swig_py.sg_head_light_swiginit(self, inlib_swig_py.new_sg_head_light(*args))

# Register sg_head_light in inlib_swig_py:
inlib_swig_py.sg_head_light_swigregister(sg_head_light)

class sg_blend(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_blend_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_blend

    def __init__(self, *args):
        inlib_swig_py.sg_blend_swiginit(self, inlib_swig_py.new_sg_blend(*args))
    on = property(inlib_swig_py.sg_blend_on_get, inlib_swig_py.sg_blend_on_set)

# Register sg_blend in inlib_swig_py:
inlib_swig_py.sg_blend_swigregister(sg_blend)

class sg_matrix(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_matrix_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_matrix

    def __init__(self, *args):
        inlib_swig_py.sg_matrix_swiginit(self, inlib_swig_py.new_sg_matrix(*args))
    mtx = property(inlib_swig_py.sg_matrix_mtx_get, inlib_swig_py.sg_matrix_mtx_set)

    def set_identity(self):
        return inlib_swig_py.sg_matrix_set_identity(self)

    def set_translate(self, *args):
        return inlib_swig_py.sg_matrix_set_translate(self, *args)

    def set_scale(self, *args):
        return inlib_swig_py.sg_matrix_set_scale(self, *args)

    def set_rotate(self, *args):
        return inlib_swig_py.sg_matrix_set_rotate(self, *args)

    def mul_mtx(self, a_m):
        return inlib_swig_py.sg_matrix_mul_mtx(self, a_m)

    def mul_translate(self, *args):
        return inlib_swig_py.sg_matrix_mul_translate(self, *args)

    def mul_scale(self, *args):
        return inlib_swig_py.sg_matrix_mul_scale(self, *args)

    def left_mul_rotate(self, a_x, a_y, a_z, a_angle):
        return inlib_swig_py.sg_matrix_left_mul_rotate(self, a_x, a_y, a_z, a_angle)

    def left_mul_scale(self, a_x, a_y, a_z):
        return inlib_swig_py.sg_matrix_left_mul_scale(self, a_x, a_y, a_z)

    def left_mul_translate(self, *args):
        return inlib_swig_py.sg_matrix_left_mul_translate(self, *args)

    def mul_rotate(self, *args):
        return inlib_swig_py.sg_matrix_mul_rotate(self, *args)

# Register sg_matrix in inlib_swig_py:
inlib_swig_py.sg_matrix_swigregister(sg_matrix)

class sg_polyhedron(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_polyhedron_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_polyhedron

    def __init__(self, *args):
        inlib_swig_py.sg_polyhedron_swiginit(self, inlib_swig_py.new_sg_polyhedron(*args))
    ph = property(inlib_swig_py.sg_polyhedron_ph_get, inlib_swig_py.sg_polyhedron_ph_set)
    solid = property(inlib_swig_py.sg_polyhedron_solid_get, inlib_swig_py.sg_polyhedron_solid_set)
    reduced_wire_frame = property(inlib_swig_py.sg_polyhedron_reduced_wire_frame_get, inlib_swig_py.sg_polyhedron_reduced_wire_frame_set)
    enforce_edges = property(inlib_swig_py.sg_polyhedron_enforce_edges_get, inlib_swig_py.sg_polyhedron_enforce_edges_set)

# Register sg_polyhedron in inlib_swig_py:
inlib_swig_py.sg_polyhedron_swigregister(sg_polyhedron)

class sg_cone_hat(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_cone_hat_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_cone_hat

    def __init__(self, *args):
        inlib_swig_py.sg_cone_hat_swiginit(self, inlib_swig_py.new_sg_cone_hat(*args))
    height = property(inlib_swig_py.sg_cone_hat_height_get, inlib_swig_py.sg_cone_hat_height_set)
    rmin = property(inlib_swig_py.sg_cone_hat_rmin_get, inlib_swig_py.sg_cone_hat_rmin_set)
    rmax = property(inlib_swig_py.sg_cone_hat_rmax_get, inlib_swig_py.sg_cone_hat_rmax_set)
    angle = property(inlib_swig_py.sg_cone_hat_angle_get, inlib_swig_py.sg_cone_hat_angle_set)
    steps = property(inlib_swig_py.sg_cone_hat_steps_get, inlib_swig_py.sg_cone_hat_steps_set)

# Register sg_cone_hat in inlib_swig_py:
inlib_swig_py.sg_cone_hat_swigregister(sg_cone_hat)

class sg_cube(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_cube_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_cube

    def __init__(self, *args):
        inlib_swig_py.sg_cube_swiginit(self, inlib_swig_py.new_sg_cube(*args))
    width = property(inlib_swig_py.sg_cube_width_get, inlib_swig_py.sg_cube_width_set)
    height = property(inlib_swig_py.sg_cube_height_get, inlib_swig_py.sg_cube_height_set)
    depth = property(inlib_swig_py.sg_cube_depth_get, inlib_swig_py.sg_cube_depth_set)

# Register sg_cube in inlib_swig_py:
inlib_swig_py.sg_cube_swigregister(sg_cube)

class sg_sphere(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_sphere_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_sphere

    def __init__(self, *args):
        inlib_swig_py.sg_sphere_swiginit(self, inlib_swig_py.new_sg_sphere(*args))
    radius = property(inlib_swig_py.sg_sphere_radius_get, inlib_swig_py.sg_sphere_radius_set)
    slices = property(inlib_swig_py.sg_sphere_slices_get, inlib_swig_py.sg_sphere_slices_set)
    stacks = property(inlib_swig_py.sg_sphere_stacks_get, inlib_swig_py.sg_sphere_stacks_set)

# Register sg_sphere in inlib_swig_py:
inlib_swig_py.sg_sphere_swigregister(sg_sphere)

class sg_draw_style(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_draw_style_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_draw_style

    def __init__(self, *args):
        inlib_swig_py.sg_draw_style_swiginit(self, inlib_swig_py.new_sg_draw_style(*args))
    style = property(inlib_swig_py.sg_draw_style_style_get, inlib_swig_py.sg_draw_style_style_set)
    line_width = property(inlib_swig_py.sg_draw_style_line_width_get, inlib_swig_py.sg_draw_style_line_width_set)
    line_pattern = property(inlib_swig_py.sg_draw_style_line_pattern_get, inlib_swig_py.sg_draw_style_line_pattern_set)
    point_size = property(inlib_swig_py.sg_draw_style_point_size_get, inlib_swig_py.sg_draw_style_point_size_set)
    cull_face = property(inlib_swig_py.sg_draw_style_cull_face_get, inlib_swig_py.sg_draw_style_cull_face_set)
    winding_ccw = property(inlib_swig_py.sg_draw_style_winding_ccw_get, inlib_swig_py.sg_draw_style_winding_ccw_set)

# Register sg_draw_style in inlib_swig_py:
inlib_swig_py.sg_draw_style_swigregister(sg_draw_style)

class sg_shade_model(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_shade_model_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_shade_model

    def __init__(self, *args):
        inlib_swig_py.sg_shade_model_swiginit(self, inlib_swig_py.new_sg_shade_model(*args))
    model = property(inlib_swig_py.sg_shade_model_model_get, inlib_swig_py.sg_shade_model_model_set)

# Register sg_shade_model in inlib_swig_py:
inlib_swig_py.sg_shade_model_swigregister(sg_shade_model)


def points():
    return inlib_swig_py.points()

def lines():
    return inlib_swig_py.lines()

def line_loop():
    return inlib_swig_py.line_loop()

def line_strip():
    return inlib_swig_py.line_strip()

def triangles():
    return inlib_swig_py.triangles()

def triangle_strip():
    return inlib_swig_py.triangle_strip()

def triangle_fan():
    return inlib_swig_py.triangle_fan()

def is_mode(arg1):
    return inlib_swig_py.is_mode(arg1)

def is_line(arg1):
    return inlib_swig_py.is_line(arg1)
class sf_mode_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_mode_t

    def __init__(self, *args):
        inlib_swig_py.sf_mode_t_swiginit(self, inlib_swig_py.new_sf_mode_t(*args))

    def value(self, *args):
        return inlib_swig_py.sf_mode_t_value(self, *args)

    def value_cp(self):
        return inlib_swig_py.sf_mode_t_value_cp(self)

# Register sf_mode_t in inlib_swig_py:
inlib_swig_py.sf_mode_t_swigregister(sf_mode_t)

class sg_vertices(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_vertices_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_vertices

    def __init__(self, *args):
        inlib_swig_py.sg_vertices_swiginit(self, inlib_swig_py.new_sg_vertices(*args))
    mode = property(inlib_swig_py.sg_vertices_mode_get, inlib_swig_py.sg_vertices_mode_set)
    xyzs = property(inlib_swig_py.sg_vertices_xyzs_get, inlib_swig_py.sg_vertices_xyzs_set)

    def add(self, arg2, arg3, arg4):
        return inlib_swig_py.sg_vertices_add(self, arg2, arg3, arg4)

    def number(self):
        return inlib_swig_py.sg_vertices_number(self)

    def clear(self):
        return inlib_swig_py.sg_vertices_clear(self)

    def add_dashed_line(self, a_bx, a_by, a_bz, a_ex, a_ey, a_ez, a_num_dash):
        return inlib_swig_py.sg_vertices_add_dashed_line(self, a_bx, a_by, a_bz, a_ex, a_ey, a_ez, a_num_dash)

    def center(self):
        return inlib_swig_py.sg_vertices_center(self)

# Register sg_vertices in inlib_swig_py:
inlib_swig_py.sg_vertices_swigregister(sg_vertices)

class sg_atb_vertices(sg_vertices):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_atb_vertices_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_atb_vertices

    def __init__(self, *args):
        inlib_swig_py.sg_atb_vertices_swiginit(self, inlib_swig_py.new_sg_atb_vertices(*args))
    rgbas = property(inlib_swig_py.sg_atb_vertices_rgbas_get, inlib_swig_py.sg_atb_vertices_rgbas_set)
    nms = property(inlib_swig_py.sg_atb_vertices_nms_get, inlib_swig_py.sg_atb_vertices_nms_set)
    do_back = property(inlib_swig_py.sg_atb_vertices_do_back_get, inlib_swig_py.sg_atb_vertices_do_back_set)
    epsilon = property(inlib_swig_py.sg_atb_vertices_epsilon_get, inlib_swig_py.sg_atb_vertices_epsilon_set)
    draw_edges = property(inlib_swig_py.sg_atb_vertices_draw_edges_get, inlib_swig_py.sg_atb_vertices_draw_edges_set)

    def add_pos_color(self, a_x, a_y, a_z, a_r, a_g, a_b, a_a):
        return inlib_swig_py.sg_atb_vertices_add_pos_color(self, a_x, a_y, a_z, a_r, a_g, a_b, a_a)

    def add_rgba(self, a_r, a_g, a_b, a_a):
        return inlib_swig_py.sg_atb_vertices_add_rgba(self, a_r, a_g, a_b, a_a)

    def add_color(self, a_col):
        return inlib_swig_py.sg_atb_vertices_add_color(self, a_col)

    def add_normal(self, a_x, a_y, a_z):
        return inlib_swig_py.sg_atb_vertices_add_normal(self, a_x, a_y, a_z)

    def add_dashed_line_rgba(self, a_bx, a_by, a_bz, a_ex, a_ey, a_ez, a_num_dash, a_r, a_g, a_b, a_a):
        return inlib_swig_py.sg_atb_vertices_add_dashed_line_rgba(self, a_bx, a_by, a_bz, a_ex, a_ey, a_ez, a_num_dash, a_r, a_g, a_b, a_a)

    def clear(self):
        return inlib_swig_py.sg_atb_vertices_clear(self)

# Register sg_atb_vertices in inlib_swig_py:
inlib_swig_py.sg_atb_vertices_swigregister(sg_atb_vertices)

class sg_colored_sized_points(sg_vertices):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_colored_sized_points_copy(self)
    __swig_destroy__ = inlib_swig_py.delete_sg_colored_sized_points

    def __init__(self, *args):
        inlib_swig_py.sg_colored_sized_points_swiginit(self, inlib_swig_py.new_sg_colored_sized_points(*args))
    rgbas = property(inlib_swig_py.sg_colored_sized_points_rgbas_get, inlib_swig_py.sg_colored_sized_points_rgbas_set)
    sizes = property(inlib_swig_py.sg_colored_sized_points_sizes_get, inlib_swig_py.sg_colored_sized_points_sizes_set)

    def add(self, a_x, a_y, a_z, a_r, a_g, a_b, a_a, a_size):
        return inlib_swig_py.sg_colored_sized_points_add(self, a_x, a_y, a_z, a_r, a_g, a_b, a_a, a_size)

    def clear(self):
        return inlib_swig_py.sg_colored_sized_points_clear(self)

# Register sg_colored_sized_points in inlib_swig_py:
inlib_swig_py.sg_colored_sized_points_swigregister(sg_colored_sized_points)

class base_freetype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_base_freetype

# Register base_freetype in inlib_swig_py:
inlib_swig_py.base_freetype_swigregister(base_freetype)

class plottable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register plottable in inlib_swig_py:
inlib_swig_py.plottable_swigregister(plottable)

class h1d2plot(plottable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_h1d2plot

    def __init__(self, *args):
        inlib_swig_py.h1d2plot_swiginit(self, inlib_swig_py.new_h1d2plot(*args))

# Register h1d2plot in inlib_swig_py:
inlib_swig_py.h1d2plot_swigregister(h1d2plot)

class h1d2plot_cp(plottable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_h1d2plot_cp

    def __init__(self, *args):
        inlib_swig_py.h1d2plot_cp_swiginit(self, inlib_swig_py.new_h1d2plot_cp(*args))

# Register h1d2plot_cp in inlib_swig_py:
inlib_swig_py.h1d2plot_cp_swigregister(h1d2plot_cp)

class sf_enum_shape_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_shape_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_shape_type_swiginit(self, inlib_swig_py.new_sf_enum_shape_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_shape_type_value(self, *args)

# Register sf_enum_shape_type in inlib_swig_py:
inlib_swig_py.sf_enum_shape_type_swigregister(sf_enum_shape_type)

class sf_enum_colormap_axis_labeling_type(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sf_enum_colormap_axis_labeling_type

    def __init__(self, *args):
        inlib_swig_py.sf_enum_colormap_axis_labeling_type_swiginit(self, inlib_swig_py.new_sf_enum_colormap_axis_labeling_type(*args))

    def value(self, *args):
        return inlib_swig_py.sf_enum_colormap_axis_labeling_type_value(self, *args)

# Register sf_enum_colormap_axis_labeling_type in inlib_swig_py:
inlib_swig_py.sf_enum_colormap_axis_labeling_type_swigregister(sf_enum_colormap_axis_labeling_type)

class sg_plotter(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_plotter_copy(self)
    width = property(inlib_swig_py.sg_plotter_width_get, inlib_swig_py.sg_plotter_width_set)
    height = property(inlib_swig_py.sg_plotter_height_get, inlib_swig_py.sg_plotter_height_set)
    left_margin = property(inlib_swig_py.sg_plotter_left_margin_get, inlib_swig_py.sg_plotter_left_margin_set)
    right_margin = property(inlib_swig_py.sg_plotter_right_margin_get, inlib_swig_py.sg_plotter_right_margin_set)
    bottom_margin = property(inlib_swig_py.sg_plotter_bottom_margin_get, inlib_swig_py.sg_plotter_bottom_margin_set)
    top_margin = property(inlib_swig_py.sg_plotter_top_margin_get, inlib_swig_py.sg_plotter_top_margin_set)
    depth = property(inlib_swig_py.sg_plotter_depth_get, inlib_swig_py.sg_plotter_depth_set)
    down_margin = property(inlib_swig_py.sg_plotter_down_margin_get, inlib_swig_py.sg_plotter_down_margin_set)
    up_margin = property(inlib_swig_py.sg_plotter_up_margin_get, inlib_swig_py.sg_plotter_up_margin_set)
    title_up = property(inlib_swig_py.sg_plotter_title_up_get, inlib_swig_py.sg_plotter_title_up_set)
    title_to_axis = property(inlib_swig_py.sg_plotter_title_to_axis_get, inlib_swig_py.sg_plotter_title_to_axis_set)
    title_height = property(inlib_swig_py.sg_plotter_title_height_get, inlib_swig_py.sg_plotter_title_height_set)
    title_automated = property(inlib_swig_py.sg_plotter_title_automated_get, inlib_swig_py.sg_plotter_title_automated_set)
    title_hjust = property(inlib_swig_py.sg_plotter_title_hjust_get, inlib_swig_py.sg_plotter_title_hjust_set)
    title = property(inlib_swig_py.sg_plotter_title_get, inlib_swig_py.sg_plotter_title_set)
    colormap_visible = property(inlib_swig_py.sg_plotter_colormap_visible_get, inlib_swig_py.sg_plotter_colormap_visible_set)
    cells = inlib_swig_py.sg_plotter_cells
    min_max = inlib_swig_py.sg_plotter_min_max
    colormap_axis_labeling = property(inlib_swig_py.sg_plotter_colormap_axis_labeling_get, inlib_swig_py.sg_plotter_colormap_axis_labeling_set)
    colormap_attached = property(inlib_swig_py.sg_plotter_colormap_attached_get, inlib_swig_py.sg_plotter_colormap_attached_set)
    colormap_axis_visible = property(inlib_swig_py.sg_plotter_colormap_axis_visible_get, inlib_swig_py.sg_plotter_colormap_axis_visible_set)
    x_axis_enforced = property(inlib_swig_py.sg_plotter_x_axis_enforced_get, inlib_swig_py.sg_plotter_x_axis_enforced_set)
    x_axis_automated = property(inlib_swig_py.sg_plotter_x_axis_automated_get, inlib_swig_py.sg_plotter_x_axis_automated_set)
    x_axis_min = property(inlib_swig_py.sg_plotter_x_axis_min_get, inlib_swig_py.sg_plotter_x_axis_min_set)
    x_axis_max = property(inlib_swig_py.sg_plotter_x_axis_max_get, inlib_swig_py.sg_plotter_x_axis_max_set)
    x_axis_is_log = property(inlib_swig_py.sg_plotter_x_axis_is_log_get, inlib_swig_py.sg_plotter_x_axis_is_log_set)
    y_axis_enforced = property(inlib_swig_py.sg_plotter_y_axis_enforced_get, inlib_swig_py.sg_plotter_y_axis_enforced_set)
    y_axis_automated = property(inlib_swig_py.sg_plotter_y_axis_automated_get, inlib_swig_py.sg_plotter_y_axis_automated_set)
    y_axis_min = property(inlib_swig_py.sg_plotter_y_axis_min_get, inlib_swig_py.sg_plotter_y_axis_min_set)
    y_axis_max = property(inlib_swig_py.sg_plotter_y_axis_max_get, inlib_swig_py.sg_plotter_y_axis_max_set)
    y_axis_is_log = property(inlib_swig_py.sg_plotter_y_axis_is_log_get, inlib_swig_py.sg_plotter_y_axis_is_log_set)
    z_axis_enforced = property(inlib_swig_py.sg_plotter_z_axis_enforced_get, inlib_swig_py.sg_plotter_z_axis_enforced_set)
    z_axis_automated = property(inlib_swig_py.sg_plotter_z_axis_automated_get, inlib_swig_py.sg_plotter_z_axis_automated_set)
    z_axis_min = property(inlib_swig_py.sg_plotter_z_axis_min_get, inlib_swig_py.sg_plotter_z_axis_min_set)
    z_axis_max = property(inlib_swig_py.sg_plotter_z_axis_max_get, inlib_swig_py.sg_plotter_z_axis_max_set)
    z_axis_is_log = property(inlib_swig_py.sg_plotter_z_axis_is_log_get, inlib_swig_py.sg_plotter_z_axis_is_log_set)
    value_top_margin = property(inlib_swig_py.sg_plotter_value_top_margin_get, inlib_swig_py.sg_plotter_value_top_margin_set)
    infos_width = property(inlib_swig_py.sg_plotter_infos_width_get, inlib_swig_py.sg_plotter_infos_width_set)
    infos_x_margin = property(inlib_swig_py.sg_plotter_infos_x_margin_get, inlib_swig_py.sg_plotter_infos_x_margin_set)
    infos_y_margin = property(inlib_swig_py.sg_plotter_infos_y_margin_get, inlib_swig_py.sg_plotter_infos_y_margin_set)
    infos_what = property(inlib_swig_py.sg_plotter_infos_what_get, inlib_swig_py.sg_plotter_infos_what_set)
    func2D_borders_visible = property(inlib_swig_py.sg_plotter_func2D_borders_visible_get, inlib_swig_py.sg_plotter_func2D_borders_visible_set)
    theta = property(inlib_swig_py.sg_plotter_theta_get, inlib_swig_py.sg_plotter_theta_set)
    phi = property(inlib_swig_py.sg_plotter_phi_get, inlib_swig_py.sg_plotter_phi_set)
    tau = property(inlib_swig_py.sg_plotter_tau_get, inlib_swig_py.sg_plotter_tau_set)
    legends_automated = property(inlib_swig_py.sg_plotter_legends_automated_get, inlib_swig_py.sg_plotter_legends_automated_set)
    legends_origin = property(inlib_swig_py.sg_plotter_legends_origin_get, inlib_swig_py.sg_plotter_legends_origin_set)
    unit_percent = inlib_swig_py.sg_plotter_unit_percent
    unit_axis = inlib_swig_py.sg_plotter_unit_axis
    legends_origin_unit = property(inlib_swig_py.sg_plotter_legends_origin_unit_get, inlib_swig_py.sg_plotter_legends_origin_unit_set)
    legends_size = property(inlib_swig_py.sg_plotter_legends_size_get, inlib_swig_py.sg_plotter_legends_size_set)
    legends_string = property(inlib_swig_py.sg_plotter_legends_string_get, inlib_swig_py.sg_plotter_legends_string_set)
    shape_automated = property(inlib_swig_py.sg_plotter_shape_automated_get, inlib_swig_py.sg_plotter_shape_automated_set)
    xy = inlib_swig_py.sg_plotter_xy
    xyz = inlib_swig_py.sg_plotter_xyz
    shape = property(inlib_swig_py.sg_plotter_shape_get, inlib_swig_py.sg_plotter_shape_set)
    xy_depth = property(inlib_swig_py.sg_plotter_xy_depth_get, inlib_swig_py.sg_plotter_xy_depth_set)
    curve_number_of_points = property(inlib_swig_py.sg_plotter_curve_number_of_points_get, inlib_swig_py.sg_plotter_curve_number_of_points_set)
    data_light_on_automated = property(inlib_swig_py.sg_plotter_data_light_on_automated_get, inlib_swig_py.sg_plotter_data_light_on_automated_set)
    primitives_enforced = property(inlib_swig_py.sg_plotter_primitives_enforced_get, inlib_swig_py.sg_plotter_primitives_enforced_set)
    inner_frame_enforced = property(inlib_swig_py.sg_plotter_inner_frame_enforced_get, inlib_swig_py.sg_plotter_inner_frame_enforced_set)
    top_axis_visible = property(inlib_swig_py.sg_plotter_top_axis_visible_get, inlib_swig_py.sg_plotter_top_axis_visible_set)
    right_axis_visible = property(inlib_swig_py.sg_plotter_right_axis_visible_get, inlib_swig_py.sg_plotter_right_axis_visible_set)
    superpose_bins = property(inlib_swig_py.sg_plotter_superpose_bins_get, inlib_swig_py.sg_plotter_superpose_bins_set)
    number_of_levels = property(inlib_swig_py.sg_plotter_number_of_levels_get, inlib_swig_py.sg_plotter_number_of_levels_set)
    levels = property(inlib_swig_py.sg_plotter_levels_get, inlib_swig_py.sg_plotter_levels_set)
    __swig_destroy__ = inlib_swig_py.delete_sg_plotter

    def __init__(self, *args):
        inlib_swig_py.sg_plotter_swiginit(self, inlib_swig_py.new_sg_plotter(*args))

    def add_plottable(self, arg2):
        return inlib_swig_py.sg_plotter_add_plottable(self, arg2)

    def bins_style(self, arg2):
        return inlib_swig_py.sg_plotter_bins_style(self, arg2)

    def points_style(self, arg2):
        return inlib_swig_py.sg_plotter_points_style(self, arg2)

    def func_style(self, arg2):
        return inlib_swig_py.sg_plotter_func_style(self, arg2)

    def errors_style(self, arg2):
        return inlib_swig_py.sg_plotter_errors_style(self, arg2)

    def left_hatch_style(self, arg2):
        return inlib_swig_py.sg_plotter_left_hatch_style(self, arg2)

    def right_hatch_style(self, arg2):
        return inlib_swig_py.sg_plotter_right_hatch_style(self, arg2)

    def legend_style(self, arg2):
        return inlib_swig_py.sg_plotter_legend_style(self, arg2)

    def infos_style(self):
        return inlib_swig_py.sg_plotter_infos_style(self)

    def clear(self):
        return inlib_swig_py.sg_plotter_clear(self)

    def etc_sep(self, *args):
        return inlib_swig_py.sg_plotter_etc_sep(self, *args)

    def plot(self, *args):
        return inlib_swig_py.sg_plotter_plot(self, *args)

    def plot_cp(self, *args):
        return inlib_swig_py.sg_plotter_plot_cp(self, *args)

# Register sg_plotter in inlib_swig_py:
inlib_swig_py.sg_plotter_swigregister(sg_plotter)

class sg_plots(sg_node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def copy(self):
        return inlib_swig_py.sg_plots_copy(self)
    width = property(inlib_swig_py.sg_plots_width_get, inlib_swig_py.sg_plots_width_set)
    height = property(inlib_swig_py.sg_plots_height_get, inlib_swig_py.sg_plots_height_set)
    cols = property(inlib_swig_py.sg_plots_cols_get, inlib_swig_py.sg_plots_cols_set)
    rows = property(inlib_swig_py.sg_plots_rows_get, inlib_swig_py.sg_plots_rows_set)
    view_border = property(inlib_swig_py.sg_plots_view_border_get, inlib_swig_py.sg_plots_view_border_set)
    plotter_scale = property(inlib_swig_py.sg_plots_plotter_scale_get, inlib_swig_py.sg_plots_plotter_scale_set)
    border_visible = property(inlib_swig_py.sg_plots_border_visible_get, inlib_swig_py.sg_plots_border_visible_set)
    border_width = property(inlib_swig_py.sg_plots_border_width_get, inlib_swig_py.sg_plots_border_width_set)
    border_height = property(inlib_swig_py.sg_plots_border_height_get, inlib_swig_py.sg_plots_border_height_set)
    border_color = property(inlib_swig_py.sg_plots_border_color_get, inlib_swig_py.sg_plots_border_color_set)
    left_margin = property(inlib_swig_py.sg_plots_left_margin_get, inlib_swig_py.sg_plots_left_margin_set)
    right_margin = property(inlib_swig_py.sg_plots_right_margin_get, inlib_swig_py.sg_plots_right_margin_set)
    top_margin = property(inlib_swig_py.sg_plots_top_margin_get, inlib_swig_py.sg_plots_top_margin_set)
    bottom_margin = property(inlib_swig_py.sg_plots_bottom_margin_get, inlib_swig_py.sg_plots_bottom_margin_set)
    horizontal_spacing = property(inlib_swig_py.sg_plots_horizontal_spacing_get, inlib_swig_py.sg_plots_horizontal_spacing_set)
    vertical_spacing = property(inlib_swig_py.sg_plots_vertical_spacing_get, inlib_swig_py.sg_plots_vertical_spacing_set)
    __swig_destroy__ = inlib_swig_py.delete_sg_plots

    def __init__(self, *args):
        inlib_swig_py.sg_plots_swiginit(self, inlib_swig_py.new_sg_plots(*args))

    def current_plotter(self):
        return inlib_swig_py.sg_plots_current_plotter(self)

    def number(self):
        return inlib_swig_py.sg_plots_number(self)

    def current_index(self):
        return inlib_swig_py.sg_plots_current_index(self)

    def set_regions(self, a_cols=1, a_rows=1, a_transfer=False):
        return inlib_swig_py.sg_plots_set_regions(self, a_cols, a_rows, a_transfer)

    def next(self):
        return inlib_swig_py.sg_plots_next(self)

    def set_current_plotter(self, arg2):
        return inlib_swig_py.sg_plots_set_current_plotter(self, arg2)

    def adjust_size(self, arg2, arg3):
        return inlib_swig_py.sg_plots_adjust_size(self, arg2, arg3)

# Register sg_plots in inlib_swig_py:
inlib_swig_py.sg_plots_swigregister(sg_plots)


def sg_set_plotter_camera(arg1, arg2, arg3, arg4):
    return inlib_swig_py.sg_set_plotter_camera(arg1, arg2, arg3, arg4)
class viewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_viewer

    def __init__(self, *args):
        inlib_swig_py.viewer_swiginit(self, inlib_swig_py.new_viewer(*args))

    def out(self):
        return inlib_swig_py.viewer_out(self)

    def width(self):
        return inlib_swig_py.viewer_width(self)

    def height(self):
        return inlib_swig_py.viewer_height(self)

    def sg(self, *args):
        return inlib_swig_py.viewer_sg(self, *args)

# Register viewer in inlib_swig_py:
inlib_swig_py.viewer_swigregister(viewer)


def cast_viewer(arg1):
    return inlib_swig_py.cast_viewer(arg1)
class render_manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register render_manager in inlib_swig_py:
inlib_swig_py.render_manager_swigregister(render_manager)

class wps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        inlib_swig_py.wps_swiginit(self, inlib_swig_py.new_wps(arg2))
    __swig_destroy__ = inlib_swig_py.delete_wps

    def open_file(self, arg2, arg3=False):
        return inlib_swig_py.wps_open_file(self, arg2, arg3)

    def close_file(self):
        return inlib_swig_py.wps_close_file(self)

    def PS_PAGE_SCALE(self, arg2, arg3, a_portrait=True):
        return inlib_swig_py.wps_PS_PAGE_SCALE(self, arg2, arg3, a_portrait)

    def PS_SCALE(self, arg2, arg3):
        return inlib_swig_py.wps_PS_SCALE(self, arg2, arg3)

    def PS_TRANSLATE(self, arg2, arg3):
        return inlib_swig_py.wps_PS_TRANSLATE(self, arg2, arg3)

    def PS_ROTATE(self, arg2):
        return inlib_swig_py.wps_PS_ROTATE(self, arg2)

    def PS_SAVE(self):
        return inlib_swig_py.wps_PS_SAVE(self)

    def PS_RESTORE(self):
        return inlib_swig_py.wps_PS_RESTORE(self)

    def PS_BEGIN_PAGE(self):
        return inlib_swig_py.wps_PS_BEGIN_PAGE(self)

    def PS_END_PAGE(self):
        return inlib_swig_py.wps_PS_END_PAGE(self)

    def PS_IMAGE(self, a_action):
        return inlib_swig_py.wps_PS_IMAGE(self, a_action)

# Register wps in inlib_swig_py:
inlib_swig_py.wps_swigregister(wps)

class zb_buffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        inlib_swig_py.zb_buffer_swiginit(self, inlib_swig_py.new_zb_buffer())
    __swig_destroy__ = inlib_swig_py.delete_zb_buffer

    def clear_color_buffer(self, arg2):
        return inlib_swig_py.zb_buffer_clear_color_buffer(self, arg2)

    def clear_depth_buffer(self):
        return inlib_swig_py.zb_buffer_clear_depth_buffer(self)

# Register zb_buffer in inlib_swig_py:
inlib_swig_py.zb_buffer_swigregister(zb_buffer)

class sg_zb_manager(render_manager):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_sg_zb_manager

    def __init__(self, *args):
        inlib_swig_py.sg_zb_manager_swiginit(self, inlib_swig_py.new_sg_zb_manager(*args))

# Register sg_zb_manager in inlib_swig_py:
inlib_swig_py.sg_zb_manager_swigregister(sg_zb_manager)

class sg_zb_action(render_action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5):
        inlib_swig_py.sg_zb_action_swiginit(self, inlib_swig_py.new_sg_zb_action(arg2, arg3, arg4, arg5))
    __swig_destroy__ = inlib_swig_py.delete_sg_zb_action

    def reset(self):
        return inlib_swig_py.sg_zb_action_reset(self)

    def zbuffer(self, *args):
        return inlib_swig_py.sg_zb_action_zbuffer(self, *args)

    def add_color(self, *args):
        return inlib_swig_py.sg_zb_action_add_color(self, *args)

# Register sg_zb_action in inlib_swig_py:
inlib_swig_py.sg_zb_action_swigregister(sg_zb_action)

class sg_gl2ps_manager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        inlib_swig_py.sg_gl2ps_manager_swiginit(self, inlib_swig_py.new_sg_gl2ps_manager())
    __swig_destroy__ = inlib_swig_py.delete_sg_gl2ps_manager

# Register sg_gl2ps_manager in inlib_swig_py:
inlib_swig_py.sg_gl2ps_manager_swigregister(sg_gl2ps_manager)

class sg_gl2ps_action(render_action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5):
        inlib_swig_py.sg_gl2ps_action_swiginit(self, inlib_swig_py.new_sg_gl2ps_action(arg2, arg3, arg4, arg5))
    __swig_destroy__ = inlib_swig_py.delete_sg_gl2ps_action

    def open(self, arg2):
        return inlib_swig_py.sg_gl2ps_action_open(self, arg2)

    def close(self):
        return inlib_swig_py.sg_gl2ps_action_close(self)

# Register sg_gl2ps_action in inlib_swig_py:
inlib_swig_py.sg_gl2ps_action_swigregister(sg_gl2ps_action)

class sg_write_bsg(write_action):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def protocol(self):
        return inlib_swig_py.sg_write_bsg_protocol(self)

    def __init__(self, arg2):
        inlib_swig_py.sg_write_bsg_swiginit(self, inlib_swig_py.new_sg_write_bsg(arg2))
    __swig_destroy__ = inlib_swig_py.delete_sg_write_bsg

    def open_buffer(self):
        return inlib_swig_py.sg_write_bsg_open_buffer(self)

    def close_buffer(self):
        return inlib_swig_py.sg_write_bsg_close_buffer(self)

    def write_file(self, arg2):
        return inlib_swig_py.sg_write_bsg_write_file(self, arg2)

# Register sg_write_bsg in inlib_swig_py:
inlib_swig_py.sg_write_bsg_swigregister(sg_write_bsg)


def net_serror():
    return inlib_swig_py.net_serror()
class base_socket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def disconnect(self):
        return inlib_swig_py.base_socket_disconnect(self)
    __swig_destroy__ = inlib_swig_py.delete_base_socket

    def verbose(self):
        return inlib_swig_py.base_socket_verbose(self)

    def set_verbose(self, arg2):
        return inlib_swig_py.base_socket_set_verbose(self, arg2)

    def is_connected(self):
        return inlib_swig_py.base_socket_is_connected(self)

    def out(self):
        return inlib_swig_py.base_socket_out(self)

    def close(self):
        return inlib_swig_py.base_socket_close(self)

    def send_uchar(self, a_value):
        return inlib_swig_py.base_socket_send_uchar(self, a_value)

    def send_bool(self, a_value):
        return inlib_swig_py.base_socket_send_bool(self, a_value)

    def fetch_bool(self, a_value):
        return inlib_swig_py.base_socket_fetch_bool(self, a_value)

    def send_string(self, a_string):
        return inlib_swig_py.base_socket_send_string(self, a_string)

    def send_text(self, a_text):
        return inlib_swig_py.base_socket_send_text(self, a_text)

    def send_file(self, a_file):
        return inlib_swig_py.base_socket_send_file(self, a_file)

    def fetch_file(self, a_file):
        return inlib_swig_py.base_socket_fetch_file(self, a_file)

    def is_active(self, a_micro_secs=10):
        return inlib_swig_py.base_socket_is_active(self, a_micro_secs)

# Register base_socket in inlib_swig_py:
inlib_swig_py.base_socket_swigregister(base_socket)


def net_herror():
    return inlib_swig_py.net_herror()
class net_inet_socket(base_socket):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def disconnect(self):
        return inlib_swig_py.net_inet_socket_disconnect(self)

    def __init__(self, arg2, a_verbose=False):
        inlib_swig_py.net_inet_socket_swiginit(self, inlib_swig_py.new_net_inet_socket(arg2, a_verbose))
    __swig_destroy__ = inlib_swig_py.delete_net_inet_socket

    def bind(self, a_host, a_port, a_max_trial, a_secs, a_reuse_addr):
        return inlib_swig_py.net_inet_socket_bind(self, a_host, a_port, a_max_trial, a_secs, a_reuse_addr)

    def set_dump_ECONNABORTED(self, arg2):
        return inlib_swig_py.net_inet_socket_set_dump_ECONNABORTED(self, arg2)

    def bind_accept(self, a_host, a_port, a_max_trial, a_secs, a_reuse_addr, a_blocking):
        return inlib_swig_py.net_inet_socket_bind_accept(self, a_host, a_port, a_max_trial, a_secs, a_reuse_addr, a_blocking)

    def connect(self, a_host, a_port, a_select_secs, a_max_trial, a_secs):
        return inlib_swig_py.net_inet_socket_connect(self, a_host, a_port, a_select_secs, a_max_trial, a_secs)

# Register net_inet_socket in inlib_swig_py:
inlib_swig_py.net_inet_socket_swigregister(net_inet_socket)


def net_host_name(arg1, arg2):
    return inlib_swig_py.net_host_name(arg1, arg2)

def net_inet_sip(arg1, arg2, arg3):
    return inlib_swig_py.net_inet_sip(arg1, arg2, arg3)
class net_sg_client(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        inlib_swig_py.net_sg_client_swiginit(self, inlib_swig_py.new_net_sg_client(arg2, arg3, arg4))
    __swig_destroy__ = inlib_swig_py.delete_net_sg_client

    def is_connected(self):
        return inlib_swig_py.net_sg_client_is_connected(self)

    def socket(self):
        return inlib_swig_py.net_sg_client_socket(self)

    def out(self):
        return inlib_swig_py.net_sg_client_out(self)

    def initialize(self, arg2, arg3):
        return inlib_swig_py.net_sg_client_initialize(self, arg2, arg3)

    def steer(self):
        return inlib_swig_py.net_sg_client_steer(self)

    def poll(self):
        return inlib_swig_py.net_sg_client_poll(self)

    def send_string(self, arg2):
        return inlib_swig_py.net_sg_client_send_string(self, arg2)

    def get_sg_serv_params(self, arg2):
        return inlib_swig_py.net_sg_client_get_sg_serv_params(self, arg2)

# Register net_sg_client in inlib_swig_py:
inlib_swig_py.net_sg_client_swigregister(net_sg_client)


def sg_s_send_placement():
    return inlib_swig_py.sg_s_send_placement()

def sg_s_placement_static():
    return inlib_swig_py.sg_s_placement_static()

def sg_s_placement_dynamic():
    return inlib_swig_py.sg_s_placement_dynamic()

def sg_s_placement_screen():
    return inlib_swig_py.sg_s_placement_screen()

def sg_s_send_radius():
    return inlib_swig_py.sg_s_send_radius()

def sg_s_send_scale():
    return inlib_swig_py.sg_s_send_scale()

def sg_s_send_clear():
    return inlib_swig_py.sg_s_send_clear()

def sg_s_protocol_start():
    return inlib_swig_py.sg_s_protocol_start()

def sg_s_protocol_disconnect():
    return inlib_swig_py.sg_s_protocol_disconnect()

def sg_s_protocol_zdoc():
    return inlib_swig_py.sg_s_protocol_zdoc()

def sg_s_protocol_arg_sep():
    return inlib_swig_py.sg_s_protocol_arg_sep()

def sg_s_protocol_clear_static_sg():
    return inlib_swig_py.sg_s_protocol_clear_static_sg()

def sg_s_protocol_clear_dynamic_sg():
    return inlib_swig_py.sg_s_protocol_clear_dynamic_sg()

def sg_s_protocol_clear_screen_sg():
    return inlib_swig_py.sg_s_protocol_clear_screen_sg()

def sg_s_protocol_view_all():
    return inlib_swig_py.sg_s_protocol_view_all()

def sg_s_protocol_set_background_black():
    return inlib_swig_py.sg_s_protocol_set_background_black()

def sg_s_protocol_set_background_white():
    return inlib_swig_py.sg_s_protocol_set_background_white()

def sg_s_protocol_disable_anim():
    return inlib_swig_py.sg_s_protocol_disable_anim()

def sg_s_protocol_reset_camera():
    return inlib_swig_py.sg_s_protocol_reset_camera()
class gui_viewer(viewer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def res_dir(self):
        return inlib_swig_py.gui_viewer_res_dir(self)

    def doc_dir(self):
        return inlib_swig_py.gui_viewer_doc_dir(self)

    def tmp_dir(self):
        return inlib_swig_py.gui_viewer_tmp_dir(self)

    def out_dir(self):
        return inlib_swig_py.gui_viewer_out_dir(self)

    def start_dir(self):
        return inlib_swig_py.gui_viewer_start_dir(self)

    def opener(self):
        return inlib_swig_py.gui_viewer_opener(self)

    def show_console(self, arg2):
        return inlib_swig_py.gui_viewer_show_console(self, arg2)

    def hide_console(self):
        return inlib_swig_py.gui_viewer_hide_console(self)

    def set_console_size(self, arg2=0.3, arg3=0.05, arg4=1):
        return inlib_swig_py.gui_viewer_set_console_size(self, arg2, arg3, arg4)

    def hide_main_menu(self):
        return inlib_swig_py.gui_viewer_hide_main_menu(self)

    def show_main_menu(self):
        return inlib_swig_py.gui_viewer_show_main_menu(self)

    def hide_camera_menu(self):
        return inlib_swig_py.gui_viewer_hide_camera_menu(self)

    def show_camera_menu(self):
        return inlib_swig_py.gui_viewer_show_camera_menu(self)

    def adapt_camera_to_scene(self):
        return inlib_swig_py.gui_viewer_adapt_camera_to_scene(self)

    def view_all(self):
        return inlib_swig_py.gui_viewer_view_all(self)

    def set_scene_light_on(self, arg2):
        return inlib_swig_py.gui_viewer_set_scene_light_on(self, arg2)

    def set_scene_blend_on(self, arg2):
        return inlib_swig_py.gui_viewer_set_scene_blend_on(self, arg2)

    def toggle_light(self):
        return inlib_swig_py.gui_viewer_toggle_light(self)

    def set_plane_viewer(self, arg2):
        return inlib_swig_py.gui_viewer_set_plane_viewer(self, arg2)

    def hide_meta_zone(self):
        return inlib_swig_py.gui_viewer_hide_meta_zone(self)

    def set_scene_clear_color(self, *args):
        return inlib_swig_py.gui_viewer_set_scene_clear_color(self, *args)

    def set_gui_clear_color(self, *args):
        return inlib_swig_py.gui_viewer_set_gui_clear_color(self, *args)

    def reset_camera(self):
        return inlib_swig_py.gui_viewer_reset_camera(self)

    def scene(self, *args):
        return inlib_swig_py.gui_viewer_scene(self, *args)

    def styles(self, *args):
        return inlib_swig_py.gui_viewer_styles(self, *args)

    def set_scene_camera(self, arg2):
        return inlib_swig_py.gui_viewer_set_scene_camera(self, arg2)

    def scene_camera(self):
        return inlib_swig_py.gui_viewer_scene_camera(self)

    def set_scene_light(self, arg2):
        return inlib_swig_py.gui_viewer_set_scene_light(self, arg2)

    @staticmethod
    def s_default():
        return inlib_swig_py.gui_viewer_s_default()

    def find_file(self, a_what, a_path):
        return inlib_swig_py.gui_viewer_find_file(self, a_what, a_path)

# Register gui_viewer in inlib_swig_py:
inlib_swig_py.gui_viewer_swigregister(gui_viewer)

def gui_viewer_s_default():
    return inlib_swig_py.gui_viewer_s_default()


def cast_gui_viewer(arg1):
    return inlib_swig_py.cast_gui_viewer(arg1)

def get_sg_plots(arg1):
    return inlib_swig_py.get_sg_plots(arg1)

def sg_style_from_res(*args):
    return inlib_swig_py.sg_style_from_res(*args)
class waxml_file(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        inlib_swig_py.waxml_file_swiginit(self, inlib_swig_py.new_waxml_file())
    __swig_destroy__ = inlib_swig_py.delete_waxml_file

    def open(self, arg2):
        return inlib_swig_py.waxml_file_open(self, arg2)

    def close(self):
        return inlib_swig_py.waxml_file_close(self)

    def write(self, *args):
        return inlib_swig_py.waxml_file_write(self, *args)

# Register waxml_file in inlib_swig_py:
inlib_swig_py.waxml_file_swigregister(waxml_file)

class ifile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register ifile in inlib_swig_py:
inlib_swig_py.ifile_swigregister(ifile)

class key(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        inlib_swig_py.key_swiginit(self, inlib_swig_py.new_key(arg2))
    __swig_destroy__ = inlib_swig_py.delete_key

# Register key in inlib_swig_py:
inlib_swig_py.key_swigregister(key)

class ifac(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register ifac in inlib_swig_py:
inlib_swig_py.ifac_swigregister(ifac)

class rroot_fac(ifac):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rroot_fac

    def __init__(self, *args):
        inlib_swig_py.rroot_fac_swiginit(self, inlib_swig_py.new_rroot_fac(*args))

# Register rroot_fac in inlib_swig_py:
inlib_swig_py.rroot_fac_swigregister(rroot_fac)

class std_vector_keys(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return inlib_swig_py.std_vector_keys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return inlib_swig_py.std_vector_keys___nonzero__(self)

    def __bool__(self):
        return inlib_swig_py.std_vector_keys___bool__(self)

    def __len__(self):
        return inlib_swig_py.std_vector_keys___len__(self)

    def __getslice__(self, i, j):
        return inlib_swig_py.std_vector_keys___getslice__(self, i, j)

    def __setslice__(self, *args):
        return inlib_swig_py.std_vector_keys___setslice__(self, *args)

    def __delslice__(self, i, j):
        return inlib_swig_py.std_vector_keys___delslice__(self, i, j)

    def __delitem__(self, *args):
        return inlib_swig_py.std_vector_keys___delitem__(self, *args)

    def __getitem__(self, *args):
        return inlib_swig_py.std_vector_keys___getitem__(self, *args)

    def __setitem__(self, *args):
        return inlib_swig_py.std_vector_keys___setitem__(self, *args)

    def pop(self):
        return inlib_swig_py.std_vector_keys_pop(self)

    def append(self, x):
        return inlib_swig_py.std_vector_keys_append(self, x)

    def empty(self):
        return inlib_swig_py.std_vector_keys_empty(self)

    def size(self):
        return inlib_swig_py.std_vector_keys_size(self)

    def swap(self, v):
        return inlib_swig_py.std_vector_keys_swap(self, v)

    def begin(self):
        return inlib_swig_py.std_vector_keys_begin(self)

    def end(self):
        return inlib_swig_py.std_vector_keys_end(self)

    def rbegin(self):
        return inlib_swig_py.std_vector_keys_rbegin(self)

    def rend(self):
        return inlib_swig_py.std_vector_keys_rend(self)

    def clear(self):
        return inlib_swig_py.std_vector_keys_clear(self)

    def get_allocator(self):
        return inlib_swig_py.std_vector_keys_get_allocator(self)

    def pop_back(self):
        return inlib_swig_py.std_vector_keys_pop_back(self)

    def erase(self, *args):
        return inlib_swig_py.std_vector_keys_erase(self, *args)

    def __init__(self, *args):
        inlib_swig_py.std_vector_keys_swiginit(self, inlib_swig_py.new_std_vector_keys(*args))

    def push_back(self, x):
        return inlib_swig_py.std_vector_keys_push_back(self, x)

    def front(self):
        return inlib_swig_py.std_vector_keys_front(self)

    def back(self):
        return inlib_swig_py.std_vector_keys_back(self)

    def assign(self, n, x):
        return inlib_swig_py.std_vector_keys_assign(self, n, x)

    def resize(self, *args):
        return inlib_swig_py.std_vector_keys_resize(self, *args)

    def insert(self, *args):
        return inlib_swig_py.std_vector_keys_insert(self, *args)

    def reserve(self, n):
        return inlib_swig_py.std_vector_keys_reserve(self, n)

    def capacity(self):
        return inlib_swig_py.std_vector_keys_capacity(self)
    __swig_destroy__ = inlib_swig_py.delete_std_vector_keys

# Register std_vector_keys in inlib_swig_py:
inlib_swig_py.std_vector_keys_swigregister(std_vector_keys)

class directory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        inlib_swig_py.directory_swiginit(self, inlib_swig_py.new_directory(arg2))
    __swig_destroy__ = inlib_swig_py.delete_directory

    def find_key(self, arg2):
        return inlib_swig_py.directory_find_key(self, arg2)

    def keys(self, *args):
        return inlib_swig_py.directory_keys(self, *args)

# Register directory in inlib_swig_py:
inlib_swig_py.directory_swigregister(directory)

class rroot_file(ifile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        inlib_swig_py.rroot_file_swiginit(self, inlib_swig_py.new_rroot_file(arg2, arg3, arg4))
    __swig_destroy__ = inlib_swig_py.delete_rroot_file

    def is_open(self):
        return inlib_swig_py.rroot_file_is_open(self)

    def close(self):
        return inlib_swig_py.rroot_file_close(self)

    def dir(self):
        return inlib_swig_py.rroot_file_dir(self)

# Register rroot_file in inlib_swig_py:
inlib_swig_py.rroot_file_swigregister(rroot_file)

class TDirectory(directory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        inlib_swig_py.TDirectory_swiginit(self, inlib_swig_py.new_TDirectory(arg2))
    __swig_destroy__ = inlib_swig_py.delete_TDirectory

# Register TDirectory in inlib_swig_py:
inlib_swig_py.TDirectory_swigregister(TDirectory)


def rroot_find_dir(arg1, arg2):
    return inlib_swig_py.rroot_find_dir(arg1, arg2)

def rroot_key_to_h1d(arg1, arg2):
    return inlib_swig_py.rroot_key_to_h1d(arg1, arg2)

def rroot_read(arg1, arg2, arg3, recursive, ls, dump, spaces):
    return inlib_swig_py.rroot_read(arg1, arg2, arg3, recursive, ls, dump, spaces)
class rroot_branch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        inlib_swig_py.rroot_branch_swiginit(self, inlib_swig_py.new_rroot_branch(arg2, arg3))
    __swig_destroy__ = inlib_swig_py.delete_rroot_branch

    def find_entry(self, a_file, a_entry):
        return inlib_swig_py.rroot_branch_find_entry(self, a_file, a_entry)

# Register rroot_branch in inlib_swig_py:
inlib_swig_py.rroot_branch_swigregister(rroot_branch)

class rroot_leaf_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rroot_leaf_int

    def value(self, a_index):
        return inlib_swig_py.rroot_leaf_int_value(self, a_index)

# Register rroot_leaf_int in inlib_swig_py:
inlib_swig_py.rroot_leaf_int_swigregister(rroot_leaf_int)

def leaf_int(arg1, arg2):
    val = inlib_swig_py.new_leaf_int(arg1, arg2)
    return val

class rroot_leaf_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rroot_leaf_float

    def value(self, a_index):
        return inlib_swig_py.rroot_leaf_float_value(self, a_index)

# Register rroot_leaf_float in inlib_swig_py:
inlib_swig_py.rroot_leaf_float_swigregister(rroot_leaf_float)

def leaf_float(arg1, arg2):
    val = inlib_swig_py.new_leaf_float(arg1, arg2)
    return val

class rroot_leaf_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = inlib_swig_py.delete_rroot_leaf_double

    def value(self, a_index):
        return inlib_swig_py.rroot_leaf_double_value(self, a_index)

# Register rroot_leaf_double in inlib_swig_py:
inlib_swig_py.rroot_leaf_double_swigregister(rroot_leaf_double)

def leaf_double(arg1, arg2):
    val = inlib_swig_py.new_leaf_double(arg1, arg2)
    return val

class rroot_base_leaf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def s_cls(self):
        return inlib_swig_py.rroot_base_leaf_s_cls(self)

# Register rroot_base_leaf in inlib_swig_py:
inlib_swig_py.rroot_base_leaf_swigregister(rroot_base_leaf)


def rroot_cast_leaf_int(arg1):
    return inlib_swig_py.rroot_cast_leaf_int(arg1)

def rroot_cast_leaf_float(arg1):
    return inlib_swig_py.rroot_cast_leaf_float(arg1)

def rroot_cast_leaf_double(arg1):
    return inlib_swig_py.rroot_cast_leaf_double(arg1)
class rroot_tree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        inlib_swig_py.rroot_tree_swiginit(self, inlib_swig_py.new_rroot_tree(arg2, arg3))
    __swig_destroy__ = inlib_swig_py.delete_rroot_tree

    def show(self, arg2, arg3):
        return inlib_swig_py.rroot_tree_show(self, arg2, arg3)

    def find_branch(self, arg2, arg3=False):
        return inlib_swig_py.rroot_tree_find_branch(self, arg2, arg3)

    def find_leaf(self, arg2, arg3=False):
        return inlib_swig_py.rroot_tree_find_leaf(self, arg2, arg3)

    def find_leaf_branch(self, arg2):
        return inlib_swig_py.rroot_tree_find_leaf_branch(self, arg2)

    def entries(self):
        return inlib_swig_py.rroot_tree_entries(self)

# Register rroot_tree in inlib_swig_py:
inlib_swig_py.rroot_tree_swigregister(rroot_tree)


def rroot_key_to_tree(arg1, arg2, arg3):
    return inlib_swig_py.rroot_key_to_tree(arg1, arg2, arg3)

def spark_greet():
    return inlib_swig_py.spark_greet()

def spark_get_xyzs(arg1, arg2, arg3):
    return inlib_swig_py.spark_get_xyzs(arg1, arg2, arg3)


