/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ZPixel swig_types[0]
#define SWIGTYPE_p_bool swig_types[1]
#define SWIGTYPE_p_difference_type swig_types[2]
#define SWIGTYPE_p_float swig_types[3]
#define SWIGTYPE_p_inlib__SOPI__blue32 swig_types[4]
#define SWIGTYPE_p_inlib__SOPI__cmap swig_types[5]
#define SWIGTYPE_p_inlib__SOPI__col16 swig_types[6]
#define SWIGTYPE_p_inlib__SOPI__col64 swig_types[7]
#define SWIGTYPE_p_inlib__SOPI__colbr128 swig_types[8]
#define SWIGTYPE_p_inlib__SOPI__colbr32 swig_types[9]
#define SWIGTYPE_p_inlib__SOPI__color swig_types[10]
#define SWIGTYPE_p_inlib__SOPI__colrj128 swig_types[11]
#define SWIGTYPE_p_inlib__SOPI__colrj32 swig_types[12]
#define SWIGTYPE_p_inlib__SOPI__colrv32 swig_types[13]
#define SWIGTYPE_p_inlib__SOPI__cyan32 swig_types[14]
#define SWIGTYPE_p_inlib__SOPI__green32 swig_types[15]
#define SWIGTYPE_p_inlib__SOPI__grey128 swig_types[16]
#define SWIGTYPE_p_inlib__SOPI__grey256 swig_types[17]
#define SWIGTYPE_p_inlib__SOPI__grey32 swig_types[18]
#define SWIGTYPE_p_inlib__SOPI__greyinv128 swig_types[19]
#define SWIGTYPE_p_inlib__SOPI__greyinv32 swig_types[20]
#define SWIGTYPE_p_inlib__SOPI__midas_bluered swig_types[21]
#define SWIGTYPE_p_inlib__SOPI__midas_bluewhite swig_types[22]
#define SWIGTYPE_p_inlib__SOPI__midas_color swig_types[23]
#define SWIGTYPE_p_inlib__SOPI__midas_heat swig_types[24]
#define SWIGTYPE_p_inlib__SOPI__midas_idl14 swig_types[25]
#define SWIGTYPE_p_inlib__SOPI__midas_idl15 swig_types[26]
#define SWIGTYPE_p_inlib__SOPI__midas_manycol swig_types[27]
#define SWIGTYPE_p_inlib__SOPI__midas_pastel swig_types[28]
#define SWIGTYPE_p_inlib__SOPI__midas_rainbow3 swig_types[29]
#define SWIGTYPE_p_inlib__SOPI__midas_staircase swig_types[30]
#define SWIGTYPE_p_inlib__SOPI__midas_stairs8 swig_types[31]
#define SWIGTYPE_p_inlib__SOPI__midas_stairs9 swig_types[32]
#define SWIGTYPE_p_inlib__SOPI__orange32 swig_types[33]
#define SWIGTYPE_p_inlib__SOPI__red32 swig_types[34]
#define SWIGTYPE_p_inlib__SOPI__rgb216 swig_types[35]
#define SWIGTYPE_p_inlib__SOPI__rgb32768 swig_types[36]
#define SWIGTYPE_p_inlib__SOPI__rgb4096 swig_types[37]
#define SWIGTYPE_p_inlib__SOPI__rgb512 swig_types[38]
#define SWIGTYPE_p_inlib__SOPI__violet32 swig_types[39]
#define SWIGTYPE_p_inlib__SOPI__yellow32 swig_types[40]
#define SWIGTYPE_p_inlib__args swig_types[41]
#define SWIGTYPE_p_inlib__box3d swig_types[42]
#define SWIGTYPE_p_inlib__box3f swig_types[43]
#define SWIGTYPE_p_inlib__colorf swig_types[44]
#define SWIGTYPE_p_inlib__hep__polyhedron swig_types[45]
#define SWIGTYPE_p_inlib__hep__polyhedron_tubs swig_types[46]
#define SWIGTYPE_p_inlib__hep__sf_polyhedron swig_types[47]
#define SWIGTYPE_p_inlib__histo__c2d swig_types[48]
#define SWIGTYPE_p_inlib__histo__c3d swig_types[49]
#define SWIGTYPE_p_inlib__histo__h1d swig_types[50]
#define SWIGTYPE_p_inlib__histo__h2d swig_types[51]
#define SWIGTYPE_p_inlib__histo__h3d swig_types[52]
#define SWIGTYPE_p_inlib__histo__p1d swig_types[53]
#define SWIGTYPE_p_inlib__histo__p2d swig_types[54]
#define SWIGTYPE_p_inlib__imgT_inlib__byte_t swig_types[55]
#define SWIGTYPE_p_inlib__lineT_inlib__vec3f_t swig_types[56]
#define SWIGTYPE_p_inlib__lutT_double_t swig_types[57]
#define SWIGTYPE_p_inlib__lutT_float_t swig_types[58]
#define SWIGTYPE_p_inlib__mat4f swig_types[59]
#define SWIGTYPE_p_inlib__net__base_socket swig_types[60]
#define SWIGTYPE_p_inlib__net__inet_socket swig_types[61]
#define SWIGTYPE_p_inlib__net__sg_client swig_types[62]
#define SWIGTYPE_p_inlib__opener swig_types[63]
#define SWIGTYPE_p_inlib__printer swig_types[64]
#define SWIGTYPE_p_inlib__random__bw swig_types[65]
#define SWIGTYPE_p_inlib__random__exp swig_types[66]
#define SWIGTYPE_p_inlib__random__flat swig_types[67]
#define SWIGTYPE_p_inlib__random__gauss swig_types[68]
#define SWIGTYPE_p_inlib__rbwd swig_types[69]
#define SWIGTYPE_p_inlib__rdir2d swig_types[70]
#define SWIGTYPE_p_inlib__rdir3d swig_types[71]
#define SWIGTYPE_p_inlib__rexpd swig_types[72]
#define SWIGTYPE_p_inlib__rgaussd swig_types[73]
#define SWIGTYPE_p_inlib__rotd swig_types[74]
#define SWIGTYPE_p_inlib__rotf swig_types[75]
#define SWIGTYPE_p_inlib__rroot__TDirectory swig_types[76]
#define SWIGTYPE_p_inlib__rroot__base_leaf swig_types[77]
#define SWIGTYPE_p_inlib__rroot__branch swig_types[78]
#define SWIGTYPE_p_inlib__rroot__directory swig_types[79]
#define SWIGTYPE_p_inlib__rroot__fac swig_types[80]
#define SWIGTYPE_p_inlib__rroot__file swig_types[81]
#define SWIGTYPE_p_inlib__rroot__ifac swig_types[82]
#define SWIGTYPE_p_inlib__rroot__ifile swig_types[83]
#define SWIGTYPE_p_inlib__rroot__key swig_types[84]
#define SWIGTYPE_p_inlib__rroot__leafT_double_t swig_types[85]
#define SWIGTYPE_p_inlib__rroot__leafT_float_t swig_types[86]
#define SWIGTYPE_p_inlib__rroot__leafT_int_t swig_types[87]
#define SWIGTYPE_p_inlib__rroot__tree swig_types[88]
#define SWIGTYPE_p_inlib__rtausmed swig_types[89]
#define SWIGTYPE_p_inlib__rtausmeui swig_types[90]
#define SWIGTYPE_p_inlib__sg__area_style swig_types[91]
#define SWIGTYPE_p_inlib__sg__atb_vertices swig_types[92]
#define SWIGTYPE_p_inlib__sg__base_camera swig_types[93]
#define SWIGTYPE_p_inlib__sg__base_freetype swig_types[94]
#define SWIGTYPE_p_inlib__sg__base_tex swig_types[95]
#define SWIGTYPE_p_inlib__sg__blend swig_types[96]
#define SWIGTYPE_p_inlib__sg__colored_sized_points swig_types[97]
#define SWIGTYPE_p_inlib__sg__cone_hat swig_types[98]
#define SWIGTYPE_p_inlib__sg__cube swig_types[99]
#define SWIGTYPE_p_inlib__sg__draw_style swig_types[100]
#define SWIGTYPE_p_inlib__sg__draw_type swig_types[101]
#define SWIGTYPE_p_inlib__sg__font_modeling swig_types[102]
#define SWIGTYPE_p_inlib__sg__frustum swig_types[103]
#define SWIGTYPE_p_inlib__sg__gl2ps_action swig_types[104]
#define SWIGTYPE_p_inlib__sg__gl2ps_manager swig_types[105]
#define SWIGTYPE_p_inlib__sg__group swig_types[106]
#define SWIGTYPE_p_inlib__sg__gui_viewer swig_types[107]
#define SWIGTYPE_p_inlib__sg__guiv swig_types[108]
#define SWIGTYPE_p_inlib__sg__h1d2plot swig_types[109]
#define SWIGTYPE_p_inlib__sg__h1d2plot_cp swig_types[110]
#define SWIGTYPE_p_inlib__sg__hatching_policy swig_types[111]
#define SWIGTYPE_p_inlib__sg__head_light swig_types[112]
#define SWIGTYPE_p_inlib__sg__hjust swig_types[113]
#define SWIGTYPE_p_inlib__sg__lrbt swig_types[114]
#define SWIGTYPE_p_inlib__sg__marker_style swig_types[115]
#define SWIGTYPE_p_inlib__sg__matrix swig_types[116]
#define SWIGTYPE_p_inlib__sg__mfT_float_t swig_types[117]
#define SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t swig_types[118]
#define SWIGTYPE_p_inlib__sg__mf_string swig_types[119]
#define SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t swig_types[120]
#define SWIGTYPE_p_inlib__sg__node swig_types[121]
#define SWIGTYPE_p_inlib__sg__ortho swig_types[122]
#define SWIGTYPE_p_inlib__sg__painting_policy swig_types[123]
#define SWIGTYPE_p_inlib__sg__perspective swig_types[124]
#define SWIGTYPE_p_inlib__sg__plots swig_types[125]
#define SWIGTYPE_p_inlib__sg__plottable swig_types[126]
#define SWIGTYPE_p_inlib__sg__plotter swig_types[127]
#define SWIGTYPE_p_inlib__sg__plotter__colormap_axis_labeling_type swig_types[128]
#define SWIGTYPE_p_inlib__sg__plotter__shape_type swig_types[129]
#define SWIGTYPE_p_inlib__sg__polyhedron swig_types[130]
#define SWIGTYPE_p_inlib__sg__projection_type swig_types[131]
#define SWIGTYPE_p_inlib__sg__render_action swig_types[132]
#define SWIGTYPE_p_inlib__sg__render_manager swig_types[133]
#define SWIGTYPE_p_inlib__sg__rgba swig_types[134]
#define SWIGTYPE_p_inlib__sg__selection swig_types[135]
#define SWIGTYPE_p_inlib__sg__separator swig_types[136]
#define SWIGTYPE_p_inlib__sg__sfT_bool_t swig_types[137]
#define SWIGTYPE_p_inlib__sg__sfT_float_t swig_types[138]
#define SWIGTYPE_p_inlib__sg__sfT_int_t swig_types[139]
#define SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t swig_types[140]
#define SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t swig_types[141]
#define SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t swig_types[142]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t swig_types[143]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t swig_types[144]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t swig_types[145]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t swig_types[146]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t swig_types[147]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t swig_types[148]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t swig_types[149]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t swig_types[150]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t swig_types[151]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t swig_types[152]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t swig_types[153]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t swig_types[154]
#define SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t swig_types[155]
#define SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t swig_types[156]
#define SWIGTYPE_p_inlib__sg__sf_mat4f swig_types[157]
#define SWIGTYPE_p_inlib__sg__sf_rotf swig_types[158]
#define SWIGTYPE_p_inlib__sg__sf_string swig_types[159]
#define SWIGTYPE_p_inlib__sg__sf_vec3f swig_types[160]
#define SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t swig_types[161]
#define SWIGTYPE_p_inlib__sg__shade_model swig_types[162]
#define SWIGTYPE_p_inlib__sg__shade_type swig_types[163]
#define SWIGTYPE_p_inlib__sg__sphere swig_types[164]
#define SWIGTYPE_p_inlib__sg__style swig_types[165]
#define SWIGTYPE_p_inlib__sg__style_ROOT_colormap swig_types[166]
#define SWIGTYPE_p_inlib__sg__style_colormap swig_types[167]
#define SWIGTYPE_p_inlib__sg__style_default_colormap swig_types[168]
#define SWIGTYPE_p_inlib__sg__tex_rect swig_types[169]
#define SWIGTYPE_p_inlib__sg__text_style swig_types[170]
#define SWIGTYPE_p_inlib__sg__torche swig_types[171]
#define SWIGTYPE_p_inlib__sg__vertices swig_types[172]
#define SWIGTYPE_p_inlib__sg__viewer swig_types[173]
#define SWIGTYPE_p_inlib__sg__vjust swig_types[174]
#define SWIGTYPE_p_inlib__sg__winding_type swig_types[175]
#define SWIGTYPE_p_inlib__sg__write_action swig_types[176]
#define SWIGTYPE_p_inlib__sg__write_bsg swig_types[177]
#define SWIGTYPE_p_inlib__sg__zb_action swig_types[178]
#define SWIGTYPE_p_inlib__sg__zb_manager swig_types[179]
#define SWIGTYPE_p_inlib__std_string swig_types[180]
#define SWIGTYPE_p_inlib__uchar swig_types[181]
#define SWIGTYPE_p_inlib__ushort swig_types[182]
#define SWIGTYPE_p_inlib__vec2f swig_types[183]
#define SWIGTYPE_p_inlib__vec3d swig_types[184]
#define SWIGTYPE_p_inlib__vec3f swig_types[185]
#define SWIGTYPE_p_inlib__waxml__file swig_types[186]
#define SWIGTYPE_p_inlib__wps swig_types[187]
#define SWIGTYPE_p_inlib__xml__styles swig_types[188]
#define SWIGTYPE_p_inlib__zb__buffer swig_types[189]
#define SWIGTYPE_p_size_type swig_types[190]
#define SWIGTYPE_p_std__ostream swig_types[191]
#define SWIGTYPE_p_std__string swig_types[192]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[193]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[194]
#define SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t swig_types[195]
#define SWIGTYPE_p_std__vectorT_inlib__sg__plotter__unit_type_t swig_types[196]
#define SWIGTYPE_p_std__vectorT_inlib__vec2f_t swig_types[197]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[199]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[200]
#define SWIGTYPE_p_unsigned_char swig_types[201]
#define SWIGTYPE_p_unsigned_short swig_types[202]
#define SWIGTYPE_p_value_type swig_types[203]
static swig_type_info *swig_types[205];
static swig_module_info swig_module = {swig_types, 204, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "inlib"
#define SWIG_init      luaopen_inlib
#define SWIG_init_user luaopen_inlib_user

#define SWIG_LUACODE   luaopen_inlib_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>

SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg____getitem__(std::vector< unsigned int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem__(std::vector< unsigned int > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_int_Sg____getitem__(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN float std_vector_Sl_float_Sg____getitem__(std::vector< float > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_float_Sg____setitem__(std::vector< float > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN double std_vector_Sl_double_Sg____getitem__(std::vector< double > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN bool inlib_opener_open(inlib::opener *self,std::string const &a_path){
    bool done;
    return self->open(a_path,inlib::file::s_format_guessed(),inlib::args(),done);
  }
SWIGINTERN void inlib_rdir2d_shoot(inlib::rdir2d const *self,std::vector< double > &a_v){
    if(a_v.size()<2) a_v.resize(2);
    self->shoot(a_v[0],a_v[1]);
  }
SWIGINTERN void inlib_rdir3d_shoot(inlib::rdir3d const *self,std::vector< double > &a_v){
    if(a_v.size()<3) a_v.resize(3);
    self->shoot(a_v[0],a_v[1],a_v[2]);
  }
SWIGINTERN bool inlib_sg_sf_Sl_bool_Sg__value_cp(inlib::sg::sf< bool > const *self){return self->value();}
SWIGINTERN float inlib_sg_sf_Sl_float_Sg__value_cp(inlib::sg::sf< float > const *self){return self->value();}
SWIGINTERN unsigned char inlib_sg_sf_Sl_inlib_gl_mode_t_Sg__value_cp(inlib::sg::sf< inlib::gl::mode_t > const *self){return self->value();}
SWIGINTERN void inlib_sg_plotter_plot__SWIG_0(inlib::sg::plotter *self,inlib::histo::h1d const &a_histo){self->add_plottable(new inlib::sg::h1d2plot(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot_cp__SWIG_0(inlib::sg::plotter *self,inlib::histo::h1d const &a_histo){self->add_plottable(new inlib::sg::h1d2plot_cp(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot__SWIG_1(inlib::sg::plotter *self,inlib::histo::h2d const &a_histo){self->add_plottable(new inlib::sg::h2d2plot(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot_cp__SWIG_1(inlib::sg::plotter *self,inlib::histo::h2d const &a_histo){self->add_plottable(new inlib::sg::h2d2plot_cp(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot__SWIG_2(inlib::sg::plotter *self,inlib::histo::p1d const &a_histo){self->add_plottable(new inlib::sg::p1d2plot(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot_cp__SWIG_2(inlib::sg::plotter *self,inlib::histo::p1d const &a_histo){self->add_plottable(new inlib::sg::p1d2plot_cp(a_histo));}
SWIGINTERN void inlib_sg_plotter_plot__SWIG_3(inlib::sg::plotter *self,inlib::histo::c2d const &a_cloud){self->add_plottable(new inlib::sg::c2d2plot(a_cloud));}
SWIGINTERN void inlib_sg_plotter_plot_cp__SWIG_3(inlib::sg::plotter *self,inlib::histo::c2d const &a_cloud){self->add_plottable(new inlib::sg::c2d2plot_cp(a_cloud));}
SWIGINTERN void inlib_sg_plotter_plot__SWIG_4(inlib::sg::plotter *self,inlib::histo::c3d const &a_cloud){self->add_plottable(new inlib::sg::c3d2plot(a_cloud));}
SWIGINTERN void inlib_sg_plotter_plot_cp__SWIG_4(inlib::sg::plotter *self,inlib::histo::c3d const &a_cloud){self->add_plottable(new inlib::sg::c3d2plot_cp(a_cloud));}
SWIGINTERN void inlib_wps_PS_IMAGE(inlib::wps *self,inlib::sg::zb_action const &a_action){
    self->PS_IMAGE(a_action.ww(),a_action.wh(),inlib::wps::rgb_4,inlib::sg::zb_action::get_rgb,(void*)&a_action);
  }
SWIGINTERN bool inlib_sg_gui_viewer_find_file(inlib::sg::gui_viewer *self,std::string const &a_what,inlib::std_string &a_path){return self->find_file(a_what,a_path);}
SWIGINTERN inlib::rroot::key *std_vector_Sl_inlib_rroot_key_Sm__Sg____getitem__(std::vector< inlib::rroot::key * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_inlib_rroot_key_Sm__Sg____setitem__(std::vector< inlib::rroot::key * > *self,unsigned int idx,inlib::rroot::key *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN bool inlib_rroot_branch_find_entry(inlib::rroot::branch *self,inlib::rroot::ifile &a_file,unsigned int a_entry){
    unsigned int n;
    return self->find_entry(a_file,a_entry,n);
  }
SWIGINTERN int inlib_rroot_leaf_Sl_int_Sg__value(inlib::rroot::leaf< int > const *self,unsigned int a_index){
    int v;
    if(!self->value(a_index,v)) {}
    return v;
  }
SWIGINTERN float inlib_rroot_leaf_Sl_float_Sg__value(inlib::rroot::leaf< float > const *self,unsigned int a_index){
    float v;
    if(!self->value(a_index,v)) {}
    return v;
  }
SWIGINTERN double inlib_rroot_leaf_Sl_double_Sg__value(inlib::rroot::leaf< double > const *self,unsigned int a_index){
    double v;
    if(!self->value(a_index,v)) {}
    return v;
  }
SWIGINTERN unsigned int inlib_rroot_tree_entries(inlib::rroot::tree const *self){return (unsigned int)(self->entries());}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { int _v; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_string__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
  "  Possible C/C++ prototypes are:\n" "    std::string::string()\n" "    std::string::string(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_length(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_empty(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_c_str(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_data(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_assign(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_std_vector_uint__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< unsigned int > *result = 0 ;
  SWIG_check_num_args("std::vector< unsigned int >::vector",0,0)
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_uint__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< unsigned int > *result = 0 ; SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_uint__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ; SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"std::vector< unsigned int > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_std_vector_uint",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_uint__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; unsigned int arg2 ;
  std::vector< unsigned int > *result = 0 ; SWIG_check_num_args("std::vector< unsigned int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::vector",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_uint(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_vector_uint__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_uint__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_std_vector_uint__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_std_vector_uint__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_vector_uint'\n"
  "  Possible C/C++ prototypes are:\n" "    std::vector< unsigned int >::vector()\n"
  "    std::vector< unsigned int >::vector(unsigned int)\n"
  "    std::vector< unsigned int >::vector(std::vector< unsigned int > const &)\n"
  "    std::vector< unsigned int >::vector(unsigned int,unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_std_vector_uint_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< unsigned int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::size",1,"std::vector< unsigned int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< unsigned int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::max_size",1,"std::vector< unsigned int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; bool result;
  SWIG_check_num_args("std::vector< unsigned int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::empty",1,"std::vector< unsigned int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  SWIG_check_num_args("std::vector< unsigned int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::clear",1,"std::vector< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int arg2 ;
  SWIG_check_num_args("std::vector< unsigned int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::push_back",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::push_back",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  SWIG_check_num_args("std::vector< unsigned int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::pop_back",1,"std::vector< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< unsigned int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::front",1,"std::vector< unsigned int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< unsigned int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::back",1,"std::vector< unsigned int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int arg2 ; unsigned int result;
  SWIG_check_num_args("std::vector< unsigned int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_uint___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ; unsigned int arg2 ; unsigned int arg3 ;
  SWIG_check_num_args("std::vector< unsigned int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("std_vector_uint___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3); try {
    std_vector_Sl_unsigned_SS_int_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_std_vector_uint(void *obj) {
std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_vector_uint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_vector_uint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_vector_uint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_uint_methods[]= {
    { "size", _wrap_std_vector_uint_size},
    { "max_size", _wrap_std_vector_uint_max_size},
    { "empty", _wrap_std_vector_uint_empty},
    { "clear", _wrap_std_vector_uint_clear},
    { "push_back", _wrap_std_vector_uint_push_back},
    { "pop_back", _wrap_std_vector_uint_pop_back},
    { "front", _wrap_std_vector_uint_front},
    { "back", _wrap_std_vector_uint_back},
    { "__getitem", _wrap_std_vector_uint___getitem},
    { "__setitem", _wrap_std_vector_uint___setitem},
    {0,0}
};
static swig_lua_method swig_std_vector_uint_meta[] = {
    { "__getitem", _wrap_std_vector_uint___getitem},
    { "__setitem", _wrap_std_vector_uint___setitem},
    {0,0}
};

static swig_lua_attribute swig_std_vector_uint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_vector_uint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_vector_uint_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_vector_uint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_vector_uint_Sf_SwigStatic = {
    "std_vector_uint",
    swig_std_vector_uint_Sf_SwigStatic_methods,
    swig_std_vector_uint_Sf_SwigStatic_attributes,
    swig_std_vector_uint_Sf_SwigStatic_constants,
    swig_std_vector_uint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_vector_uint_bases[] = {0};
static const char *swig_std_vector_uint_base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_uint = { "std_vector_uint", "std_vector_uint", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_proxy__wrap_new_std_vector_uint, swig_delete_std_vector_uint, swig_std_vector_uint_methods, swig_std_vector_uint_attributes, &swig_std_vector_uint_Sf_SwigStatic, swig_std_vector_uint_meta, swig_std_vector_uint_bases, swig_std_vector_uint_base_names };

static int _wrap_new_std_vector_int__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< int > *result = 0 ;
  SWIG_check_num_args("std::vector< int >::vector",0,0) result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_int__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< int > *result = 0 ; SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_int__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ; SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_std_vector_int",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_int__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; int arg2 ;
  std::vector< int > *result = 0 ; SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_int(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_vector_int__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_int__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_std_vector_int__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_std_vector_int__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_vector_int'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< int >::vector()\n" "    std::vector< int >::vector(unsigned int)\n"
  "    std::vector< int >::vector(std::vector< int > const &)\n" "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0; }
static int _wrap_std_vector_int_size(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_size",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (unsigned int)((std::vector< int > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_max_size(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_max_size",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_empty(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result; SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_empty",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (bool)((std::vector< int > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_clear(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_clear",1,SWIGTYPE_p_std__vectorT_int_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; int arg2 ; SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_push_back",1,SWIGTYPE_p_std__vectorT_int_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_pop_back(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_pop_back",1,SWIGTYPE_p_std__vectorT_int_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_front(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result; SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_front",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (int)((std::vector< int > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int_back(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result; SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int_back",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (int)((std::vector< int > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; unsigned int arg2 ; int result;
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int___getitem",1,SWIGTYPE_p_std__vectorT_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (int)std_vector_Sl_int_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_int___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ; unsigned int arg2 ; int arg3 ;
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("std_vector_int___setitem",1,SWIGTYPE_p_std__vectorT_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); try { std_vector_Sl_int_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_std_vector_int(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_vector_int(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_vector_int);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_vector_int_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_int_methods[]= {
    { "size", _wrap_std_vector_int_size},
    { "max_size", _wrap_std_vector_int_max_size},
    { "empty", _wrap_std_vector_int_empty},
    { "clear", _wrap_std_vector_int_clear},
    { "push_back", _wrap_std_vector_int_push_back},
    { "pop_back", _wrap_std_vector_int_pop_back},
    { "front", _wrap_std_vector_int_front},
    { "back", _wrap_std_vector_int_back},
    { "__getitem", _wrap_std_vector_int___getitem},
    { "__setitem", _wrap_std_vector_int___setitem},
    {0,0}
};
static swig_lua_method swig_std_vector_int_meta[] = {
    { "__getitem", _wrap_std_vector_int___getitem},
    { "__setitem", _wrap_std_vector_int___setitem},
    {0,0}
};

static swig_lua_attribute swig_std_vector_int_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_vector_int_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_vector_int_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_vector_int_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_vector_int_Sf_SwigStatic = {
    "std_vector_int",
    swig_std_vector_int_Sf_SwigStatic_methods,
    swig_std_vector_int_Sf_SwigStatic_attributes,
    swig_std_vector_int_Sf_SwigStatic_constants,
    swig_std_vector_int_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_vector_int_bases[] = {0};
static const char *swig_std_vector_int_base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_int = { "std_vector_int", "std_vector_int", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_std_vector_int, swig_delete_std_vector_int, swig_std_vector_int_methods, swig_std_vector_int_attributes, &swig_std_vector_int_Sf_SwigStatic, swig_std_vector_int_meta, swig_std_vector_int_bases, swig_std_vector_int_base_names };

static int _wrap_new_std_vector_float__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< float > *result = 0 ;
  SWIG_check_num_args("std::vector< float >::vector",0,0) result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_float__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_float__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_std_vector_float",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_float__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; float arg2 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (std::vector< float > *)new std::vector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_float(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_vector_float__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_float__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_std_vector_float__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_std_vector_float__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_vector_float'\n"
  "  Possible C/C++ prototypes are:\n" "    std::vector< float >::vector()\n" "    std::vector< float >::vector(unsigned int)\n"
  "    std::vector< float >::vector(std::vector< float > const &)\n" "    std::vector< float >::vector(unsigned int,float)\n");
  lua_error(L);return 0; }
static int _wrap_std_vector_float_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_max_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; bool result; SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_empty",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (bool)((std::vector< float > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_clear",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; float arg2 ;
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_push_back",1,SWIGTYPE_p_std__vectorT_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_pop_back",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; float result; SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_front",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; float result; SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float_back",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float result;
  SWIG_check_num_args("std::vector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float___getitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (float)std_vector_Sl_float_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_float___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float arg3 ;
  SWIG_check_num_args("std::vector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem__",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("std_vector_float___setitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); try { std_vector_Sl_float_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_std_vector_float(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_vector_float(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_vector_float);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_vector_float_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_float_methods[]= {
    { "size", _wrap_std_vector_float_size},
    { "max_size", _wrap_std_vector_float_max_size},
    { "empty", _wrap_std_vector_float_empty},
    { "clear", _wrap_std_vector_float_clear},
    { "push_back", _wrap_std_vector_float_push_back},
    { "pop_back", _wrap_std_vector_float_pop_back},
    { "front", _wrap_std_vector_float_front},
    { "back", _wrap_std_vector_float_back},
    { "__getitem", _wrap_std_vector_float___getitem},
    { "__setitem", _wrap_std_vector_float___setitem},
    {0,0}
};
static swig_lua_method swig_std_vector_float_meta[] = {
    { "__getitem", _wrap_std_vector_float___getitem},
    { "__setitem", _wrap_std_vector_float___setitem},
    {0,0}
};

static swig_lua_attribute swig_std_vector_float_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_vector_float_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_vector_float_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_vector_float_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_vector_float_Sf_SwigStatic = {
    "std_vector_float",
    swig_std_vector_float_Sf_SwigStatic_methods,
    swig_std_vector_float_Sf_SwigStatic_attributes,
    swig_std_vector_float_Sf_SwigStatic_constants,
    swig_std_vector_float_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_vector_float_bases[] = {0};
static const char *swig_std_vector_float_base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_float = { "std_vector_float", "std_vector_float", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_std_vector_float, swig_delete_std_vector_float, swig_std_vector_float_methods, swig_std_vector_float_attributes, &swig_std_vector_float_Sf_SwigStatic, swig_std_vector_float_meta, swig_std_vector_float_bases, swig_std_vector_float_base_names };

static int _wrap_new_std_vector_double__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< double > *result = 0 ;
  SWIG_check_num_args("std::vector< double >::vector",0,0) result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_double__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_double__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_std_vector_double",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_double__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; double arg2 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_double(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_vector_double__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_double__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_std_vector_double__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_std_vector_double__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_vector_double'\n"
  "  Possible C/C++ prototypes are:\n" "    std::vector< double >::vector()\n"
  "    std::vector< double >::vector(unsigned int)\n" "    std::vector< double >::vector(std::vector< double > const &)\n"
  "    std::vector< double >::vector(unsigned int,double)\n"); lua_error(L);return 0; }
static int _wrap_std_vector_double_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_size",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (unsigned int)((std::vector< double > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_max_size",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (unsigned int)((std::vector< double > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; bool result;
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_empty",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (bool)((std::vector< double > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_clear",1,SWIGTYPE_p_std__vectorT_double_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; double arg2 ;
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_push_back",1,SWIGTYPE_p_std__vectorT_double_t); }  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_pop_back",1,SWIGTYPE_p_std__vectorT_double_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; double result;
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_front",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (double)((std::vector< double > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; double result;
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double_back",1,SWIGTYPE_p_std__vectorT_double_t); } 
  result = (double)((std::vector< double > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; unsigned int arg2 ; double result;
  SWIG_check_num_args("std::vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double___getitem",1,SWIGTYPE_p_std__vectorT_double_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (double)std_vector_Sl_double_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_double___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ; unsigned int arg2 ; double arg3 ;
  SWIG_check_num_args("std::vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem__",3,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("std_vector_double___setitem",1,SWIGTYPE_p_std__vectorT_double_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); try { std_vector_Sl_double_Sg____setitem__(arg1,arg2,arg3);}
   catch(std::out_of_range &_e) { SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_std_vector_double(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_vector_double(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_vector_double);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_vector_double_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_double_methods[]= {
    { "size", _wrap_std_vector_double_size},
    { "max_size", _wrap_std_vector_double_max_size},
    { "empty", _wrap_std_vector_double_empty},
    { "clear", _wrap_std_vector_double_clear},
    { "push_back", _wrap_std_vector_double_push_back},
    { "pop_back", _wrap_std_vector_double_pop_back},
    { "front", _wrap_std_vector_double_front},
    { "back", _wrap_std_vector_double_back},
    { "__getitem", _wrap_std_vector_double___getitem},
    { "__setitem", _wrap_std_vector_double___setitem},
    {0,0}
};
static swig_lua_method swig_std_vector_double_meta[] = {
    { "__getitem", _wrap_std_vector_double___getitem},
    { "__setitem", _wrap_std_vector_double___setitem},
    {0,0}
};

static swig_lua_attribute swig_std_vector_double_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_vector_double_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_vector_double_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_vector_double_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_vector_double_Sf_SwigStatic = {
    "std_vector_double",
    swig_std_vector_double_Sf_SwigStatic_methods,
    swig_std_vector_double_Sf_SwigStatic_attributes,
    swig_std_vector_double_Sf_SwigStatic_constants,
    swig_std_vector_double_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_vector_double_bases[] = {0};
static const char *swig_std_vector_double_base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_double = { "std_vector_double", "std_vector_double", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_std_vector_double, swig_delete_std_vector_double, swig_std_vector_double_methods, swig_std_vector_double_attributes, &swig_std_vector_double_Sf_SwigStatic, swig_std_vector_double_meta, swig_std_vector_double_bases, swig_std_vector_double_base_names };

static int _wrap_get_cout(lua_State* L) { int SWIG_arg = 0; std::ostream *result = 0 ;
  SWIG_check_num_args("inlib::get_cout",0,0) result = (std::ostream *) &inlib::get_cout();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__ostream,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_env_append_path(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::env_append_path",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::env_append_path",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::env_append_path",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)inlib::env_append_path((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sep(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ; SWIG_check_num_args("inlib::sep",0,0)
  result = (std::string *) &inlib::sep(); lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_std_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::std_string *result = 0 ;
  SWIG_check_num_args("inlib::std_string::std_string",0,0) result = (inlib::std_string *)new inlib::std_string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__std_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  inlib::std_string *result = 0 ; SWIG_check_num_args("inlib::std_string::std_string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::std_string::std_string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (inlib::std_string *)new inlib::std_string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__std_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_string__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::std_string *arg1 = 0 ;
  inlib::std_string *result = 0 ; SWIG_check_num_args("inlib::std_string::std_string",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::std_string::std_string",1,"inlib::std_string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("new_std_string",1,SWIGTYPE_p_inlib__std_string); } 
  result = (inlib::std_string *)new inlib::std_string((inlib::std_string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__std_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_std_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_string__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__std_string, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_string__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_std_string__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_string'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::std_string::std_string()\n" "    inlib::std_string::std_string(std::string const &)\n"
  "    inlib::std_string::std_string(inlib::std_string const &)\n"); lua_error(L);return 0; }
static int _wrap_std_string_cast(lua_State* L) { int SWIG_arg = 0; inlib::std_string *arg1 = (inlib::std_string *) 0 ;
  std::string *result = 0 ; SWIG_check_num_args("inlib::std_string::cast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::std_string::cast",1,"inlib::std_string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("std_string_cast",1,SWIGTYPE_p_inlib__std_string); } 
  result = (std::string *) &((inlib::std_string const *)arg1)->cast();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_std_string(void *obj) {
inlib::std_string *arg1 = (inlib::std_string *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_string_methods[]= {
    { "cast", _wrap_std_string_cast},
    {0,0}
};
static swig_lua_method swig_std_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_std_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_string_Sf_SwigStatic = {
    "std_string",
    swig_std_string_Sf_SwigStatic_methods,
    swig_std_string_Sf_SwigStatic_attributes,
    swig_std_string_Sf_SwigStatic_constants,
    swig_std_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "std_string", "std_string", &SWIGTYPE_p_inlib__std_string,_proxy__wrap_new_std_string, swig_delete_std_string, swig_std_string_methods, swig_std_string_attributes, &swig_std_string_Sf_SwigStatic, swig_std_string_meta, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_printer__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::printer *result = 0 ;
  SWIG_check_num_args("inlib::printer::printer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::printer::printer",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_printer",1,SWIGTYPE_p_std__ostream); }  result = (inlib::printer *)new inlib::printer(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__printer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_printer__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::printer *arg1 = 0 ; inlib::printer *result = 0 ;
  SWIG_check_num_args("inlib::printer::printer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::printer::printer",1,"inlib::printer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__printer,0))){
    SWIG_fail_ptr("new_printer",1,SWIGTYPE_p_inlib__printer); } 
  result = (inlib::printer *)new inlib::printer((inlib::printer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__printer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_printer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_printer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__printer, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_printer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_printer'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::printer::printer(std::ostream &)\n" "    inlib::printer::printer(inlib::printer const &)\n");
  lua_error(L);return 0; }
static int _wrap_printer_write(lua_State* L) { int SWIG_arg = 0; inlib::printer *arg1 = (inlib::printer *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("inlib::printer::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::printer::write",1,"inlib::printer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::printer::write",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__printer,0))){
    SWIG_fail_ptr("printer_write",1,SWIGTYPE_p_inlib__printer); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->write((std::string const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_printer(void *obj) {
inlib::printer *arg1 = (inlib::printer *) obj;
delete arg1;
}
static int _proxy__wrap_new_printer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_printer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_printer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_printer_methods[]= {
    { "write", _wrap_printer_write},
    {0,0}
};
static swig_lua_method swig_printer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_printer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_printer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_printer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_printer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_printer_Sf_SwigStatic = {
    "printer",
    swig_printer_Sf_SwigStatic_methods,
    swig_printer_Sf_SwigStatic_attributes,
    swig_printer_Sf_SwigStatic_constants,
    swig_printer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_printer_bases[] = {0};
static const char *swig_printer_base_names[] = {0};
static swig_lua_class _wrap_class_printer = { "printer", "printer", &SWIGTYPE_p_inlib__printer,_proxy__wrap_new_printer, swig_delete_printer, swig_printer_methods, swig_printer_attributes, &swig_printer_Sf_SwigStatic, swig_printer_meta, swig_printer_bases, swig_printer_base_names };

static int _wrap_new_args__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::args *result = 0 ;
  SWIG_check_num_args("inlib::args::args",0,0) result = (inlib::args *)new inlib::args();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__args,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_args__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = 0 ; inlib::args *result = 0 ;
  SWIG_check_num_args("inlib::args::args",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::args::args",1,"inlib::args const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("new_args",1,SWIGTYPE_p_inlib__args); }  result = (inlib::args *)new inlib::args((inlib::args const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__args,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_args(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_args__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__args, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_args__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_args'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::args::args()\n" "    inlib::args::args(inlib::args const &)\n"); lua_error(L);return 0; }
static int _wrap_args_add__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = (inlib::args *) 0 ;
  std::string *arg2 = 0 ; std::string *arg3 = 0 ; bool arg4 ; std::string temp2 ; std::string temp3 ; bool result;
  SWIG_check_num_args("inlib::args::add",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::args::add",1,"inlib::args *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::args::add",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::args::add",3,"std::string const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("inlib::args::add",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("args_add",1,SWIGTYPE_p_inlib__args); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_args_add__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = (inlib::args *) 0 ;
  std::string *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp2 ; std::string temp3 ; bool result;
  SWIG_check_num_args("inlib::args::add",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::args::add",1,"inlib::args *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::args::add",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::args::add",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("args_add",1,SWIGTYPE_p_inlib__args); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)(arg1)->add((std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_args_add__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = (inlib::args *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::args::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::args::add",1,"inlib::args *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::args::add",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("args_add",1,SWIGTYPE_p_inlib__args); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->add((std::string const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_args_add(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__args, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_args_add__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__args, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_args_add__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__args, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_args_add__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'args_add'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::args::add(std::string const &,std::string const &,bool)\n"
  "    inlib::args::add(std::string const &,std::string const &)\n" "    inlib::args::add(std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_args_remove(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = (inlib::args *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; int result; SWIG_check_num_args("inlib::args::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::args::remove",1,"inlib::args *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::args::remove",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("args_remove",1,SWIGTYPE_p_inlib__args); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->remove((std::string const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_args_remove_first(lua_State* L) { int SWIG_arg = 0; inlib::args *arg1 = (inlib::args *) 0 ;
  SWIG_check_num_args("inlib::args::remove_first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::args::remove_first",1,"inlib::args *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__args,0))){
    SWIG_fail_ptr("args_remove_first",1,SWIGTYPE_p_inlib__args); }  (arg1)->remove_first(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static void swig_delete_args(void *obj) {
inlib::args *arg1 = (inlib::args *) obj;
delete arg1;
}
static int _proxy__wrap_new_args(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_args);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_args_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_args_methods[]= {
    { "add", _wrap_args_add},
    { "remove", _wrap_args_remove},
    { "remove_first", _wrap_args_remove_first},
    {0,0}
};
static swig_lua_method swig_args_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_args_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_args_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_args_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_args_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_args_Sf_SwigStatic = {
    "args",
    swig_args_Sf_SwigStatic_methods,
    swig_args_Sf_SwigStatic_attributes,
    swig_args_Sf_SwigStatic_constants,
    swig_args_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_args_bases[] = {0};
static const char *swig_args_base_names[] = {0};
static swig_lua_class _wrap_class_args = { "args", "args", &SWIGTYPE_p_inlib__args,_proxy__wrap_new_args, swig_delete_args, swig_args_methods, swig_args_attributes, &swig_args_Sf_SwigStatic, swig_args_meta, swig_args_bases, swig_args_base_names };

static swig_lua_attribute swig_guiv_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_guiv_methods[]= {
    {0,0}
};
static swig_lua_method swig_guiv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_guiv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_guiv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_guiv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_guiv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_guiv_Sf_SwigStatic = {
    "guiv",
    swig_guiv_Sf_SwigStatic_methods,
    swig_guiv_Sf_SwigStatic_attributes,
    swig_guiv_Sf_SwigStatic_constants,
    swig_guiv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_guiv_bases[] = {0};
static const char *swig_guiv_base_names[] = {0};
static swig_lua_class _wrap_class_guiv = { "guiv", "guiv", &SWIGTYPE_p_inlib__sg__guiv,0,0, swig_guiv_methods, swig_guiv_attributes, &swig_guiv_Sf_SwigStatic, swig_guiv_meta, swig_guiv_bases, swig_guiv_base_names };

static int _wrap_new_opener__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::guiv *arg1 = 0 ; unsigned int arg2 ;
  inlib::opener *result = 0 ; SWIG_check_num_args("inlib::opener::opener",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::opener::opener",1,"inlib::sg::guiv &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::opener::opener",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__guiv,0))){
    SWIG_fail_ptr("new_opener",1,SWIGTYPE_p_inlib__sg__guiv); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::opener *)new inlib::opener(*arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__opener,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_opener__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::opener *arg1 = 0 ; inlib::opener *result = 0 ;
  SWIG_check_num_args("inlib::opener::opener",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::opener::opener",1,"inlib::opener const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__opener,0))){
    SWIG_fail_ptr("new_opener",1,SWIGTYPE_p_inlib__opener); } 
  result = (inlib::opener *)new inlib::opener((inlib::opener const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__opener,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_opener(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__opener, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_opener__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__guiv, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_opener__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_opener'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::opener::opener(inlib::sg::guiv &,unsigned int)\n" "    inlib::opener::opener(inlib::opener const &)\n");
  lua_error(L);return 0; }
static int _wrap_opener_open(lua_State* L) { int SWIG_arg = 0; inlib::opener *arg1 = (inlib::opener *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::opener::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::opener::open",1,"inlib::opener *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::opener::open",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__opener,0))){
    SWIG_fail_ptr("opener_open",1,SWIGTYPE_p_inlib__opener); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)inlib_opener_open(arg1,(std::string const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_opener(void *obj) {
inlib::opener *arg1 = (inlib::opener *) obj;
delete arg1;
}
static int _proxy__wrap_new_opener(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_opener);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_opener_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_opener_methods[]= {
    { "open", _wrap_opener_open},
    {0,0}
};
static swig_lua_method swig_opener_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_opener_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_opener_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_opener_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_opener_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_opener_Sf_SwigStatic = {
    "opener",
    swig_opener_Sf_SwigStatic_methods,
    swig_opener_Sf_SwigStatic_attributes,
    swig_opener_Sf_SwigStatic_constants,
    swig_opener_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_opener_bases[] = {0};
static const char *swig_opener_base_names[] = {0};
static swig_lua_class _wrap_class_opener = { "opener", "opener", &SWIGTYPE_p_inlib__opener,_proxy__wrap_new_opener, swig_delete_opener, swig_opener_methods, swig_opener_attributes, &swig_opener_Sf_SwigStatic, swig_opener_meta, swig_opener_bases, swig_opener_base_names };

static int _wrap_file_exists(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; bool result;
  SWIG_check_num_args("inlib::file::exists",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::file::exists",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (bool)inlib::file::exists((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_file_write__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::file::write",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::file::write",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::file::write",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)inlib::file::write((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_file_write__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ; std::string temp1 ; bool result; SWIG_check_num_args("inlib::file::write",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::file::write",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::file::write",2,"std::vector< std::string > const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("file_write",2,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (bool)inlib::file::write((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_file_write(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_file_write__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_file_write__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'file_write'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::file::write(std::string const &,std::string const &)\n"
  "    inlib::file::write(std::string const &,std::vector< std::string > const &)\n"); lua_error(L);return 0; }
static int _wrap_file_paper_format_extension(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ;
  inlib::std_string *arg2 = 0 ; std::string temp1 ; bool result; SWIG_check_num_args("inlib::file::paper_format_extension",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::file::paper_format_extension",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::file::paper_format_extension",2,"inlib::std_string &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("file_paper_format_extension",2,SWIGTYPE_p_inlib__std_string); } 
  result = (bool)inlib::file::paper_format_extension((std::string const &)*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_h1d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; std::string temp1 ; inlib::histo::h1d *result = 0 ;
  SWIG_check_num_args("inlib::histo::h1d::h1d",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::h1d::h1d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::h1d::h1d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::h1d::h1d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::h1d::h1d",4,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = (inlib::histo::h1d *)new inlib::histo::h1d((std::string const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__h1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_h1d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = 0 ;
  inlib::histo::h1d *result = 0 ; SWIG_check_num_args("inlib::histo::h1d::h1d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::h1d::h1d",1,"inlib::histo::h1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("new_histo_h1d",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (inlib::histo::h1d *)new inlib::histo::h1d((inlib::histo::h1d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__h1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_h1d(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_h1d__SWIG_1(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_histo_h1d__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_h1d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::h1d::h1d(std::string const &,unsigned int,double,double)\n"
  "    inlib::histo::h1d::h1d(inlib::histo::h1d const &)\n"); lua_error(L);return 0; }
static int _wrap_histo_h1d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  double arg2 ; double arg3 ; bool result; SWIG_check_num_args("inlib::histo::h1d::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::fill",1,"inlib::histo::h1d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::h1d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::h1d::fill",3,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_fill",1,SWIGTYPE_p_inlib__histo__h1d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); result = (bool)(arg1)->fill(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::h1d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::entries",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_entries",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (unsigned int)((inlib::histo::h1d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_mean(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h1d::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::mean",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_mean",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (double)((inlib::histo::h1d const *)arg1)->mean(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_rms(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h1d::rms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::rms",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_rms",1,SWIGTYPE_p_inlib__histo__h1d); }  result = (double)((inlib::histo::h1d const *)arg1)->rms();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_bins_sum_w(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h1d::bins_sum_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::bins_sum_w",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_bins_sum_w",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (std::vector< double > *) &((inlib::histo::h1d const *)arg1)->bins_sum_w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_bins_sum_w2(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h1d::bins_sum_w2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::bins_sum_w2",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_bins_sum_w2",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (std::vector< double > *) &((inlib::histo::h1d const *)arg1)->bins_sum_w2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_bins_sum_xw(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h1d::bins_sum_xw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::bins_sum_xw",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_bins_sum_xw",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (std::vector< double > *) &((inlib::histo::h1d const *)arg1)->bins_sum_xw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h1d_bins_sum_x2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = (inlib::histo::h1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h1d::bins_sum_x2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h1d::bins_sum_x2w",1,"inlib::histo::h1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("histo_h1d_bins_sum_x2w",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (std::vector< double > *) &((inlib::histo::h1d const *)arg1)->bins_sum_x2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_histo_h1d(void *obj) {
inlib::histo::h1d *arg1 = (inlib::histo::h1d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_h1d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_h1d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_h1d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_h1d_methods[]= {
    { "fill", _wrap_histo_h1d_fill},
    { "entries", _wrap_histo_h1d_entries},
    { "mean", _wrap_histo_h1d_mean},
    { "rms", _wrap_histo_h1d_rms},
    { "bins_sum_w", _wrap_histo_h1d_bins_sum_w},
    { "bins_sum_w2", _wrap_histo_h1d_bins_sum_w2},
    { "bins_sum_xw", _wrap_histo_h1d_bins_sum_xw},
    { "bins_sum_x2w", _wrap_histo_h1d_bins_sum_x2w},
    {0,0}
};
static swig_lua_method swig_histo_h1d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_h1d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_h1d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_h1d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_h1d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_h1d_Sf_SwigStatic = {
    "histo_h1d",
    swig_histo_h1d_Sf_SwigStatic_methods,
    swig_histo_h1d_Sf_SwigStatic_attributes,
    swig_histo_h1d_Sf_SwigStatic_constants,
    swig_histo_h1d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_h1d_bases[] = {0};
static const char *swig_histo_h1d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_h1d = { "histo_h1d", "histo_h1d", &SWIGTYPE_p_inlib__histo__h1d,_proxy__wrap_new_histo_h1d, swig_delete_histo_h1d, swig_histo_h1d_methods, swig_histo_h1d_attributes, &swig_histo_h1d_Sf_SwigStatic, swig_histo_h1d_meta, swig_histo_h1d_bases, swig_histo_h1d_base_names };

static int _wrap_new_histo_h2d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; unsigned int arg5 ; double arg6 ; double arg7 ; std::string temp1 ;
  inlib::histo::h2d *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::h2d",7,7)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::h2d::h2d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::h2d::h2d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::h2d::h2d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::h2d::h2d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::h2d::h2d",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::histo::h2d::h2d",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::histo::h2d::h2d",7,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7);
  result = (inlib::histo::h2d *)new inlib::histo::h2d((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__h2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_h2d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = 0 ;
  inlib::histo::h2d *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::h2d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::h2d::h2d",1,"inlib::histo::h2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("new_histo_h2d",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (inlib::histo::h2d *)new inlib::histo::h2d((inlib::histo::h2d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__h2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_h2d(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__h2d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_h2d__SWIG_1(L);}  }  if (argc == 7) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_new_histo_h2d__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_h2d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::h2d::h2d(std::string const &,unsigned int,double,double,unsigned int,double,double)\n"
  "    inlib::histo::h2d::h2d(inlib::histo::h2d const &)\n"); lua_error(L);return 0; }
static int _wrap_histo_h2d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; bool result; SWIG_check_num_args("inlib::histo::h2d::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::fill",1,"inlib::histo::h2d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::h2d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::h2d::fill",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::h2d::fill",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_fill",1,SWIGTYPE_p_inlib__histo__h2d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); result = (bool)(arg1)->fill(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::h2d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::entries",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_entries",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (unsigned int)((inlib::histo::h2d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_mean_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h2d::mean_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::mean_x",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_mean_x",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (double)((inlib::histo::h2d const *)arg1)->mean_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_rms_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h2d::rms_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::rms_x",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_rms_x",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (double)((inlib::histo::h2d const *)arg1)->rms_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_mean_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h2d::mean_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::mean_y",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_mean_y",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (double)((inlib::histo::h2d const *)arg1)->mean_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_rms_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::h2d::rms_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::rms_y",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_rms_y",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (double)((inlib::histo::h2d const *)arg1)->rms_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_bins_sum_w(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::bins_sum_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::bins_sum_w",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_bins_sum_w",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (std::vector< double > *) &((inlib::histo::h2d const *)arg1)->bins_sum_w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_bins_sum_w2(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::bins_sum_w2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::bins_sum_w2",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_bins_sum_w2",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (std::vector< double > *) &((inlib::histo::h2d const *)arg1)->bins_sum_w2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_bins_sum_xw(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::bins_sum_xw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::bins_sum_xw",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_bins_sum_xw",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (std::vector< double > *) &((inlib::histo::h2d const *)arg1)->bins_sum_xw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_h2d_bins_sum_x2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::h2d *arg1 = (inlib::histo::h2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::h2d::bins_sum_x2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::h2d::bins_sum_x2w",1,"inlib::histo::h2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("histo_h2d_bins_sum_x2w",1,SWIGTYPE_p_inlib__histo__h2d); } 
  result = (std::vector< double > *) &((inlib::histo::h2d const *)arg1)->bins_sum_x2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_histo_h2d(void *obj) {
inlib::histo::h2d *arg1 = (inlib::histo::h2d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_h2d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_h2d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_h2d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_h2d_methods[]= {
    { "fill", _wrap_histo_h2d_fill},
    { "entries", _wrap_histo_h2d_entries},
    { "mean_x", _wrap_histo_h2d_mean_x},
    { "rms_x", _wrap_histo_h2d_rms_x},
    { "mean_y", _wrap_histo_h2d_mean_y},
    { "rms_y", _wrap_histo_h2d_rms_y},
    { "bins_sum_w", _wrap_histo_h2d_bins_sum_w},
    { "bins_sum_w2", _wrap_histo_h2d_bins_sum_w2},
    { "bins_sum_xw", _wrap_histo_h2d_bins_sum_xw},
    { "bins_sum_x2w", _wrap_histo_h2d_bins_sum_x2w},
    {0,0}
};
static swig_lua_method swig_histo_h2d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_h2d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_h2d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_h2d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_h2d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_h2d_Sf_SwigStatic = {
    "histo_h2d",
    swig_histo_h2d_Sf_SwigStatic_methods,
    swig_histo_h2d_Sf_SwigStatic_attributes,
    swig_histo_h2d_Sf_SwigStatic_constants,
    swig_histo_h2d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_h2d_bases[] = {0};
static const char *swig_histo_h2d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_h2d = { "histo_h2d", "histo_h2d", &SWIGTYPE_p_inlib__histo__h2d,_proxy__wrap_new_histo_h2d, swig_delete_histo_h2d, swig_histo_h2d_methods, swig_histo_h2d_attributes, &swig_histo_h2d_Sf_SwigStatic, swig_histo_h2d_meta, swig_histo_h2d_bases, swig_histo_h2d_base_names };

static int _wrap_new_histo_p1d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; std::string temp1 ; inlib::histo::p1d *result = 0 ;
  SWIG_check_num_args("inlib::histo::p1d::p1d",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::p1d::p1d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p1d::p1d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p1d::p1d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p1d::p1d",4,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = (inlib::histo::p1d *)new inlib::histo::p1d((std::string const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p1d__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; double arg5 ; double arg6 ; std::string temp1 ; inlib::histo::p1d *result = 0 ;
  SWIG_check_num_args("inlib::histo::p1d::p1d",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::p1d::p1d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p1d::p1d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p1d::p1d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p1d::p1d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::p1d::p1d",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::histo::p1d::p1d",6,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  result = (inlib::histo::p1d *)new inlib::histo::p1d((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p1d__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = 0 ;
  inlib::histo::p1d *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::p1d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::p1d::p1d",1,"inlib::histo::p1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("new_histo_p1d",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (inlib::histo::p1d *)new inlib::histo::p1d((inlib::histo::p1d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p1d(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__p1d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_p1d__SWIG_2(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_histo_p1d__SWIG_0(L);}  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_new_histo_p1d__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_p1d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::p1d::p1d(std::string const &,unsigned int,double,double)\n"
  "    inlib::histo::p1d::p1d(std::string const &,unsigned int,double,double,double,double)\n"
  "    inlib::histo::p1d::p1d(inlib::histo::p1d const &)\n"); lua_error(L);return 0; }
static int _wrap_histo_p1d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; bool result; SWIG_check_num_args("inlib::histo::p1d::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::fill",1,"inlib::histo::p1d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p1d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p1d::fill",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p1d::fill",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_fill",1,SWIGTYPE_p_inlib__histo__p1d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); result = (bool)(arg1)->fill(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::p1d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::entries",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_entries",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (unsigned int)((inlib::histo::p1d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_mean(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p1d::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::mean",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_mean",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (double)((inlib::histo::p1d const *)arg1)->mean(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_rms(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p1d::rms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::rms",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_rms",1,SWIGTYPE_p_inlib__histo__p1d); }  result = (double)((inlib::histo::p1d const *)arg1)->rms();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_w",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_w",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_w2(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_w2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_w2",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_w2",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_w2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_xw(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_xw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_xw",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_xw",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_xw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_x2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_x2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_x2w",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_x2w",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_x2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_vw(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_vw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_vw",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_vw",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_vw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p1d_bins_sum_v2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p1d *arg1 = (inlib::histo::p1d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p1d::bins_sum_v2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p1d::bins_sum_v2w",1,"inlib::histo::p1d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("histo_p1d_bins_sum_v2w",1,SWIGTYPE_p_inlib__histo__p1d); } 
  result = (std::vector< double > *) &((inlib::histo::p1d const *)arg1)->bins_sum_v2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_histo_p1d(void *obj) {
inlib::histo::p1d *arg1 = (inlib::histo::p1d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_p1d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_p1d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_p1d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_p1d_methods[]= {
    { "fill", _wrap_histo_p1d_fill},
    { "entries", _wrap_histo_p1d_entries},
    { "mean", _wrap_histo_p1d_mean},
    { "rms", _wrap_histo_p1d_rms},
    { "bins_sum_w", _wrap_histo_p1d_bins_sum_w},
    { "bins_sum_w2", _wrap_histo_p1d_bins_sum_w2},
    { "bins_sum_xw", _wrap_histo_p1d_bins_sum_xw},
    { "bins_sum_x2w", _wrap_histo_p1d_bins_sum_x2w},
    { "bins_sum_vw", _wrap_histo_p1d_bins_sum_vw},
    { "bins_sum_v2w", _wrap_histo_p1d_bins_sum_v2w},
    {0,0}
};
static swig_lua_method swig_histo_p1d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_p1d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_p1d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_p1d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_p1d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_p1d_Sf_SwigStatic = {
    "histo_p1d",
    swig_histo_p1d_Sf_SwigStatic_methods,
    swig_histo_p1d_Sf_SwigStatic_attributes,
    swig_histo_p1d_Sf_SwigStatic_constants,
    swig_histo_p1d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_p1d_bases[] = {0};
static const char *swig_histo_p1d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_p1d = { "histo_p1d", "histo_p1d", &SWIGTYPE_p_inlib__histo__p1d,_proxy__wrap_new_histo_p1d, swig_delete_histo_p1d, swig_histo_p1d_methods, swig_histo_p1d_attributes, &swig_histo_p1d_Sf_SwigStatic, swig_histo_p1d_meta, swig_histo_p1d_bases, swig_histo_p1d_base_names };

static int _wrap_new_histo_p2d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; unsigned int arg5 ; double arg6 ; double arg7 ; std::string temp1 ;
  inlib::histo::p2d *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::p2d",7,7)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::p2d::p2d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p2d::p2d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p2d::p2d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p2d::p2d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::p2d::p2d",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::histo::p2d::p2d",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::histo::p2d::p2d",7,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7);
  result = (inlib::histo::p2d *)new inlib::histo::p2d((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p2d__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; unsigned int arg2 ;
  double arg3 ; double arg4 ; unsigned int arg5 ; double arg6 ; double arg7 ; double arg8 ; double arg9 ; std::string temp1 ;
  inlib::histo::p2d *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::p2d",9,9)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::p2d::p2d",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p2d::p2d",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p2d::p2d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p2d::p2d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::p2d::p2d",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::histo::p2d::p2d",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::histo::p2d::p2d",7,"double");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("inlib::histo::p2d::p2d",8,"double");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("inlib::histo::p2d::p2d",9,"double");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7); arg8 = (double)lua_tonumber(L, 8);
  arg9 = (double)lua_tonumber(L, 9);
  result = (inlib::histo::p2d *)new inlib::histo::p2d((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p2d__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = 0 ;
  inlib::histo::p2d *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::p2d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::p2d::p2d",1,"inlib::histo::p2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("new_histo_p2d",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (inlib::histo::p2d *)new inlib::histo::p2d((inlib::histo::p2d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__p2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_p2d(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__p2d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_p2d__SWIG_2(L);}  }  if (argc == 7) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_new_histo_p2d__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 9) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_new_histo_p2d__SWIG_1(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_p2d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::p2d::p2d(std::string const &,unsigned int,double,double,unsigned int,double,double)\n"
  "    inlib::histo::p2d::p2d(std::string const &,unsigned int,double,double,unsigned int,double,double,double,double)\n"
  "    inlib::histo::p2d::p2d(inlib::histo::p2d const &)\n"); lua_error(L);return 0; }
static int _wrap_histo_p2d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; bool result; SWIG_check_num_args("inlib::histo::p2d::fill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::fill",1,"inlib::histo::p2d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::p2d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::p2d::fill",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::p2d::fill",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::p2d::fill",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_fill",1,SWIGTYPE_p_inlib__histo__p2d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  result = (bool)(arg1)->fill(arg2,arg3,arg4,arg5); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::p2d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::entries",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_entries",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (unsigned int)((inlib::histo::p2d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_mean_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p2d::mean_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::mean_x",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_mean_x",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (double)((inlib::histo::p2d const *)arg1)->mean_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_rms_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p2d::rms_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::rms_x",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_rms_x",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (double)((inlib::histo::p2d const *)arg1)->rms_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_mean_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p2d::mean_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::mean_y",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_mean_y",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (double)((inlib::histo::p2d const *)arg1)->mean_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_rms_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::p2d::rms_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::rms_y",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_rms_y",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (double)((inlib::histo::p2d const *)arg1)->rms_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_w",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_w",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_w2(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_w2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_w2",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_w2",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_w2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_xw(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_xw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_xw",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_xw",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_xw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_x2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_x2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_x2w",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_x2w",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_x2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_vw(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_vw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_vw",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_vw",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_vw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_histo_p2d_bins_sum_v2w(lua_State* L) { int SWIG_arg = 0; inlib::histo::p2d *arg1 = (inlib::histo::p2d *) 0 ;
  std::vector< double > *result = 0 ; SWIG_check_num_args("inlib::histo::p2d::bins_sum_v2w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::p2d::bins_sum_v2w",1,"inlib::histo::p2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("histo_p2d_bins_sum_v2w",1,SWIGTYPE_p_inlib__histo__p2d); } 
  result = (std::vector< double > *) &((inlib::histo::p2d const *)arg1)->bins_sum_v2w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_histo_p2d(void *obj) {
inlib::histo::p2d *arg1 = (inlib::histo::p2d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_p2d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_p2d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_p2d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_p2d_methods[]= {
    { "fill", _wrap_histo_p2d_fill},
    { "entries", _wrap_histo_p2d_entries},
    { "mean_x", _wrap_histo_p2d_mean_x},
    { "rms_x", _wrap_histo_p2d_rms_x},
    { "mean_y", _wrap_histo_p2d_mean_y},
    { "rms_y", _wrap_histo_p2d_rms_y},
    { "bins_sum_w", _wrap_histo_p2d_bins_sum_w},
    { "bins_sum_w2", _wrap_histo_p2d_bins_sum_w2},
    { "bins_sum_xw", _wrap_histo_p2d_bins_sum_xw},
    { "bins_sum_x2w", _wrap_histo_p2d_bins_sum_x2w},
    { "bins_sum_vw", _wrap_histo_p2d_bins_sum_vw},
    { "bins_sum_v2w", _wrap_histo_p2d_bins_sum_v2w},
    {0,0}
};
static swig_lua_method swig_histo_p2d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_p2d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_p2d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_p2d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_p2d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_p2d_Sf_SwigStatic = {
    "histo_p2d",
    swig_histo_p2d_Sf_SwigStatic_methods,
    swig_histo_p2d_Sf_SwigStatic_attributes,
    swig_histo_p2d_Sf_SwigStatic_constants,
    swig_histo_p2d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_p2d_bases[] = {0};
static const char *swig_histo_p2d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_p2d = { "histo_p2d", "histo_p2d", &SWIGTYPE_p_inlib__histo__p2d,_proxy__wrap_new_histo_p2d, swig_delete_histo_p2d, swig_histo_p2d_methods, swig_histo_p2d_attributes, &swig_histo_p2d_Sf_SwigStatic, swig_histo_p2d_meta, swig_histo_p2d_bases, swig_histo_p2d_base_names };

static int _wrap_new_histo_c2d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  inlib::histo::c2d *result = 0 ; SWIG_check_num_args("inlib::histo::c2d::c2d",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::c2d::c2d",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (inlib::histo::c2d *)new inlib::histo::c2d((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__c2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_c2d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = 0 ;
  inlib::histo::c2d *result = 0 ; SWIG_check_num_args("inlib::histo::c2d::c2d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::c2d::c2d",1,"inlib::histo::c2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("new_histo_c2d",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (inlib::histo::c2d *)new inlib::histo::c2d((inlib::histo::c2d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__c2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_c2d(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__c2d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_c2d__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_histo_c2d__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_c2d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::c2d::c2d(std::string const &)\n" "    inlib::histo::c2d::c2d(inlib::histo::c2d const &)\n");
  lua_error(L);return 0; }
static int _wrap_histo_c2d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; bool result; SWIG_check_num_args("inlib::histo::c2d::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::fill",1,"inlib::histo::c2d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::c2d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::c2d::fill",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::c2d::fill",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_fill",1,SWIGTYPE_p_inlib__histo__c2d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); result = (bool)(arg1)->fill(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::c2d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::entries",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_entries",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (unsigned int)((inlib::histo::c2d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_lower_edge_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::lower_edge_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::lower_edge_x",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_lower_edge_x",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->lower_edge_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_upper_edge_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::upper_edge_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::upper_edge_x",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_upper_edge_x",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->upper_edge_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_lower_edge_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::lower_edge_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::lower_edge_y",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_lower_edge_y",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->lower_edge_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_upper_edge_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::upper_edge_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::upper_edge_y",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_upper_edge_y",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->upper_edge_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_mean_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::mean_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::mean_x",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_mean_x",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->mean_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_rms_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::rms_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::rms_x",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_rms_x",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->rms_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_mean_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::mean_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::mean_y",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_mean_y",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->mean_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c2d_rms_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c2d *arg1 = (inlib::histo::c2d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c2d::rms_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c2d::rms_y",1,"inlib::histo::c2d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("histo_c2d_rms_y",1,SWIGTYPE_p_inlib__histo__c2d); } 
  result = (double)((inlib::histo::c2d const *)arg1)->rms_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_histo_c2d(void *obj) {
inlib::histo::c2d *arg1 = (inlib::histo::c2d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_c2d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_c2d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_c2d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_c2d_methods[]= {
    { "fill", _wrap_histo_c2d_fill},
    { "entries", _wrap_histo_c2d_entries},
    { "lower_edge_x", _wrap_histo_c2d_lower_edge_x},
    { "upper_edge_x", _wrap_histo_c2d_upper_edge_x},
    { "lower_edge_y", _wrap_histo_c2d_lower_edge_y},
    { "upper_edge_y", _wrap_histo_c2d_upper_edge_y},
    { "mean_x", _wrap_histo_c2d_mean_x},
    { "rms_x", _wrap_histo_c2d_rms_x},
    { "mean_y", _wrap_histo_c2d_mean_y},
    { "rms_y", _wrap_histo_c2d_rms_y},
    {0,0}
};
static swig_lua_method swig_histo_c2d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_c2d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_c2d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_c2d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_c2d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_c2d_Sf_SwigStatic = {
    "histo_c2d",
    swig_histo_c2d_Sf_SwigStatic_methods,
    swig_histo_c2d_Sf_SwigStatic_attributes,
    swig_histo_c2d_Sf_SwigStatic_constants,
    swig_histo_c2d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_c2d_bases[] = {0};
static const char *swig_histo_c2d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_c2d = { "histo_c2d", "histo_c2d", &SWIGTYPE_p_inlib__histo__c2d,_proxy__wrap_new_histo_c2d, swig_delete_histo_c2d, swig_histo_c2d_methods, swig_histo_c2d_attributes, &swig_histo_c2d_Sf_SwigStatic, swig_histo_c2d_meta, swig_histo_c2d_bases, swig_histo_c2d_base_names };

static int _wrap_new_histo_c3d__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  inlib::histo::c3d *result = 0 ; SWIG_check_num_args("inlib::histo::c3d::c3d",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::histo::c3d::c3d",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (inlib::histo::c3d *)new inlib::histo::c3d((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__c3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_c3d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = 0 ;
  inlib::histo::c3d *result = 0 ; SWIG_check_num_args("inlib::histo::c3d::c3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::histo::c3d::c3d",1,"inlib::histo::c3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("new_histo_c3d",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (inlib::histo::c3d *)new inlib::histo::c3d((inlib::histo::c3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__c3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_histo_c3d(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__c3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_histo_c3d__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_histo_c3d__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_histo_c3d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::histo::c3d::c3d(std::string const &)\n" "    inlib::histo::c3d::c3d(inlib::histo::c3d const &)\n");
  lua_error(L);return 0; }
static int _wrap_histo_c3d_fill(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; bool result; SWIG_check_num_args("inlib::histo::c3d::fill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::fill",1,"inlib::histo::c3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::histo::c3d::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::histo::c3d::fill",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::histo::c3d::fill",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::histo::c3d::fill",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_fill",1,SWIGTYPE_p_inlib__histo__c3d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  result = (bool)(arg1)->fill(arg2,arg3,arg4,arg5); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_entries(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::histo::c3d::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::entries",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_entries",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (unsigned int)((inlib::histo::c3d const *)arg1)->entries(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_lower_edge_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::lower_edge_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::lower_edge_x",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_lower_edge_x",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->lower_edge_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_upper_edge_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::upper_edge_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::upper_edge_x",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_upper_edge_x",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->upper_edge_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_lower_edge_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::lower_edge_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::lower_edge_y",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_lower_edge_y",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->lower_edge_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_upper_edge_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::upper_edge_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::upper_edge_y",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_upper_edge_y",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->upper_edge_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_lower_edge_z(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::lower_edge_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::lower_edge_z",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_lower_edge_z",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->lower_edge_z(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_upper_edge_z(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::upper_edge_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::upper_edge_z",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_upper_edge_z",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->upper_edge_z(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_mean_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::mean_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::mean_x",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_mean_x",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->mean_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_rms_x(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::rms_x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::rms_x",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_rms_x",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->rms_x(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_mean_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::mean_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::mean_y",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_mean_y",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->mean_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_rms_y(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::rms_y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::rms_y",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_rms_y",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->rms_y(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_mean_z(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::mean_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::mean_z",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_mean_z",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->mean_z(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_histo_c3d_rms_z(lua_State* L) { int SWIG_arg = 0; inlib::histo::c3d *arg1 = (inlib::histo::c3d *) 0 ;
  double result; SWIG_check_num_args("inlib::histo::c3d::rms_z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::histo::c3d::rms_z",1,"inlib::histo::c3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("histo_c3d_rms_z",1,SWIGTYPE_p_inlib__histo__c3d); } 
  result = (double)((inlib::histo::c3d const *)arg1)->rms_z(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_histo_c3d(void *obj) {
inlib::histo::c3d *arg1 = (inlib::histo::c3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_histo_c3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_histo_c3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_histo_c3d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_histo_c3d_methods[]= {
    { "fill", _wrap_histo_c3d_fill},
    { "entries", _wrap_histo_c3d_entries},
    { "lower_edge_x", _wrap_histo_c3d_lower_edge_x},
    { "upper_edge_x", _wrap_histo_c3d_upper_edge_x},
    { "lower_edge_y", _wrap_histo_c3d_lower_edge_y},
    { "upper_edge_y", _wrap_histo_c3d_upper_edge_y},
    { "lower_edge_z", _wrap_histo_c3d_lower_edge_z},
    { "upper_edge_z", _wrap_histo_c3d_upper_edge_z},
    { "mean_x", _wrap_histo_c3d_mean_x},
    { "rms_x", _wrap_histo_c3d_rms_x},
    { "mean_y", _wrap_histo_c3d_mean_y},
    { "rms_y", _wrap_histo_c3d_rms_y},
    { "mean_z", _wrap_histo_c3d_mean_z},
    { "rms_z", _wrap_histo_c3d_rms_z},
    {0,0}
};
static swig_lua_method swig_histo_c3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_histo_c3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_histo_c3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_histo_c3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_histo_c3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_histo_c3d_Sf_SwigStatic = {
    "histo_c3d",
    swig_histo_c3d_Sf_SwigStatic_methods,
    swig_histo_c3d_Sf_SwigStatic_attributes,
    swig_histo_c3d_Sf_SwigStatic_constants,
    swig_histo_c3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_histo_c3d_bases[] = {0};
static const char *swig_histo_c3d_base_names[] = {0};
static swig_lua_class _wrap_class_histo_c3d = { "histo_c3d", "histo_c3d", &SWIGTYPE_p_inlib__histo__c3d,_proxy__wrap_new_histo_c3d, swig_delete_histo_c3d, swig_histo_c3d_methods, swig_histo_c3d_attributes, &swig_histo_c3d_Sf_SwigStatic, swig_histo_c3d_meta, swig_histo_c3d_bases, swig_histo_c3d_base_names };

static int _wrap_new_random_flat__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::random::flat *result = 0 ;
  SWIG_check_num_args("inlib::random::flat::flat",0,0) result = (inlib::random::flat *)new inlib::random::flat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__flat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_flat__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::random::flat *arg1 = 0 ;
  inlib::random::flat *result = 0 ; SWIG_check_num_args("inlib::random::flat::flat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::random::flat::flat",1,"inlib::random::flat const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__flat,0))){
    SWIG_fail_ptr("new_random_flat",1,SWIGTYPE_p_inlib__random__flat); } 
  result = (inlib::random::flat *)new inlib::random::flat((inlib::random::flat const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__flat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_flat(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_random_flat__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__random__flat, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_random_flat__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_random_flat'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::random::flat::flat()\n" "    inlib::random::flat::flat(inlib::random::flat const &)\n"); lua_error(L);return 0; }
static int _wrap_random_flat_shoot(lua_State* L) { int SWIG_arg = 0; inlib::random::flat *arg1 = (inlib::random::flat *) 0 ;
  double result; SWIG_check_num_args("inlib::random::flat::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::random::flat::shoot",1,"inlib::random::flat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__flat,0))){
    SWIG_fail_ptr("random_flat_shoot",1,SWIGTYPE_p_inlib__random__flat); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_random_flat(void *obj) {
inlib::random::flat *arg1 = (inlib::random::flat *) obj;
delete arg1;
}
static int _proxy__wrap_new_random_flat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_random_flat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_random_flat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_random_flat_methods[]= {
    { "shoot", _wrap_random_flat_shoot},
    {0,0}
};
static swig_lua_method swig_random_flat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_random_flat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_random_flat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_random_flat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_random_flat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_random_flat_Sf_SwigStatic = {
    "random_flat",
    swig_random_flat_Sf_SwigStatic_methods,
    swig_random_flat_Sf_SwigStatic_attributes,
    swig_random_flat_Sf_SwigStatic_constants,
    swig_random_flat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_random_flat_bases[] = {0};
static const char *swig_random_flat_base_names[] = {0};
static swig_lua_class _wrap_class_random_flat = { "random_flat", "random_flat", &SWIGTYPE_p_inlib__random__flat,_proxy__wrap_new_random_flat, swig_delete_random_flat, swig_random_flat_methods, swig_random_flat_attributes, &swig_random_flat_Sf_SwigStatic, swig_random_flat_meta, swig_random_flat_bases, swig_random_flat_base_names };

static int _wrap_new_random_gauss__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ;
  inlib::random::gauss *result = 0 ; SWIG_check_num_args("inlib::random::gauss::gauss",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::random::gauss::gauss",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::random::gauss::gauss",2,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); result = (inlib::random::gauss *)new inlib::random::gauss(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__gauss,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_gauss__SWIG_1(lua_State* L) { int SWIG_arg = 0; double arg1 ; inlib::random::gauss *result = 0 ;
  SWIG_check_num_args("inlib::random::gauss::gauss",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::random::gauss::gauss",1,"double"); arg1 = (double)lua_tonumber(L, 1);
  result = (inlib::random::gauss *)new inlib::random::gauss(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__gauss,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_gauss__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::random::gauss *result = 0 ;
  SWIG_check_num_args("inlib::random::gauss::gauss",0,0) result = (inlib::random::gauss *)new inlib::random::gauss();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__gauss,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_gauss__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::random::gauss *arg1 = 0 ;
  inlib::random::gauss *result = 0 ; SWIG_check_num_args("inlib::random::gauss::gauss",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::random::gauss::gauss",1,"inlib::random::gauss const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__gauss,0))){
    SWIG_fail_ptr("new_random_gauss",1,SWIGTYPE_p_inlib__random__gauss); } 
  result = (inlib::random::gauss *)new inlib::random::gauss((inlib::random::gauss const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__gauss,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_gauss(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_random_gauss__SWIG_2(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__random__gauss, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_random_gauss__SWIG_3(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_random_gauss__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_random_gauss__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_random_gauss'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::random::gauss::gauss(double,double)\n" "    inlib::random::gauss::gauss(double)\n"
  "    inlib::random::gauss::gauss()\n" "    inlib::random::gauss::gauss(inlib::random::gauss const &)\n");
  lua_error(L);return 0; }
static int _wrap_random_gauss_shoot(lua_State* L) { int SWIG_arg = 0; inlib::random::gauss *arg1 = (inlib::random::gauss *) 0 ;
  double result; SWIG_check_num_args("inlib::random::gauss::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::random::gauss::shoot",1,"inlib::random::gauss *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__gauss,0))){
    SWIG_fail_ptr("random_gauss_shoot",1,SWIGTYPE_p_inlib__random__gauss); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_random_gauss(void *obj) {
inlib::random::gauss *arg1 = (inlib::random::gauss *) obj;
delete arg1;
}
static int _proxy__wrap_new_random_gauss(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_random_gauss);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_random_gauss_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_random_gauss_methods[]= {
    { "shoot", _wrap_random_gauss_shoot},
    {0,0}
};
static swig_lua_method swig_random_gauss_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_random_gauss_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_random_gauss_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_random_gauss_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_random_gauss_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_random_gauss_Sf_SwigStatic = {
    "random_gauss",
    swig_random_gauss_Sf_SwigStatic_methods,
    swig_random_gauss_Sf_SwigStatic_attributes,
    swig_random_gauss_Sf_SwigStatic_constants,
    swig_random_gauss_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_random_gauss_bases[] = {0};
static const char *swig_random_gauss_base_names[] = {0};
static swig_lua_class _wrap_class_random_gauss = { "random_gauss", "random_gauss", &SWIGTYPE_p_inlib__random__gauss,_proxy__wrap_new_random_gauss, swig_delete_random_gauss, swig_random_gauss_methods, swig_random_gauss_attributes, &swig_random_gauss_Sf_SwigStatic, swig_random_gauss_meta, swig_random_gauss_bases, swig_random_gauss_base_names };

static int _wrap_new_random_bw__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ;
  inlib::random::bw *result = 0 ; SWIG_check_num_args("inlib::random::bw::bw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::random::bw::bw",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::random::bw::bw",2,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); result = (inlib::random::bw *)new inlib::random::bw(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__bw,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_bw__SWIG_1(lua_State* L) { int SWIG_arg = 0; double arg1 ; inlib::random::bw *result = 0 ;
  SWIG_check_num_args("inlib::random::bw::bw",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::random::bw::bw",1,"double");
  arg1 = (double)lua_tonumber(L, 1); result = (inlib::random::bw *)new inlib::random::bw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__bw,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_bw__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::random::bw *result = 0 ;
  SWIG_check_num_args("inlib::random::bw::bw",0,0) result = (inlib::random::bw *)new inlib::random::bw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__bw,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_bw__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::random::bw *arg1 = 0 ;
  inlib::random::bw *result = 0 ; SWIG_check_num_args("inlib::random::bw::bw",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::random::bw::bw",1,"inlib::random::bw const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__bw,0))){
    SWIG_fail_ptr("new_random_bw",1,SWIGTYPE_p_inlib__random__bw); } 
  result = (inlib::random::bw *)new inlib::random::bw((inlib::random::bw const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__bw,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_bw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_random_bw__SWIG_2(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__random__bw, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_random_bw__SWIG_3(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_random_bw__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_random_bw__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_random_bw'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::random::bw::bw(double,double)\n" "    inlib::random::bw::bw(double)\n" "    inlib::random::bw::bw()\n"
  "    inlib::random::bw::bw(inlib::random::bw const &)\n"); lua_error(L);return 0; }
static int _wrap_random_bw_shoot(lua_State* L) { int SWIG_arg = 0; inlib::random::bw *arg1 = (inlib::random::bw *) 0 ;
  double result; SWIG_check_num_args("inlib::random::bw::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::random::bw::shoot",1,"inlib::random::bw *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__bw,0))){
    SWIG_fail_ptr("random_bw_shoot",1,SWIGTYPE_p_inlib__random__bw); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_random_bw(void *obj) {
inlib::random::bw *arg1 = (inlib::random::bw *) obj;
delete arg1;
}
static int _proxy__wrap_new_random_bw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_random_bw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_random_bw_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_random_bw_methods[]= {
    { "shoot", _wrap_random_bw_shoot},
    {0,0}
};
static swig_lua_method swig_random_bw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_random_bw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_random_bw_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_random_bw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_random_bw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_random_bw_Sf_SwigStatic = {
    "random_bw",
    swig_random_bw_Sf_SwigStatic_methods,
    swig_random_bw_Sf_SwigStatic_attributes,
    swig_random_bw_Sf_SwigStatic_constants,
    swig_random_bw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_random_bw_bases[] = {0};
static const char *swig_random_bw_base_names[] = {0};
static swig_lua_class _wrap_class_random_bw = { "random_bw", "random_bw", &SWIGTYPE_p_inlib__random__bw,_proxy__wrap_new_random_bw, swig_delete_random_bw, swig_random_bw_methods, swig_random_bw_attributes, &swig_random_bw_Sf_SwigStatic, swig_random_bw_meta, swig_random_bw_bases, swig_random_bw_base_names };

static int _wrap_new_random_exp__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; inlib::random::exp *result = 0 ;
  SWIG_check_num_args("inlib::random::exp::exp",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::random::exp::exp",1,"double");
  arg1 = (double)lua_tonumber(L, 1); result = (inlib::random::exp *)new inlib::random::exp(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__exp,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_exp__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::random::exp *result = 0 ;
  SWIG_check_num_args("inlib::random::exp::exp",0,0) result = (inlib::random::exp *)new inlib::random::exp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__exp,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_exp__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::random::exp *arg1 = 0 ;
  inlib::random::exp *result = 0 ; SWIG_check_num_args("inlib::random::exp::exp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::random::exp::exp",1,"inlib::random::exp const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__exp,0))){
    SWIG_fail_ptr("new_random_exp",1,SWIGTYPE_p_inlib__random__exp); } 
  result = (inlib::random::exp *)new inlib::random::exp((inlib::random::exp const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__random__exp,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_random_exp(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_random_exp__SWIG_1(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__random__exp, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_random_exp__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_random_exp__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_random_exp'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::random::exp::exp(double)\n" "    inlib::random::exp::exp()\n"
  "    inlib::random::exp::exp(inlib::random::exp const &)\n"); lua_error(L);return 0; }
static int _wrap_random_exp_shoot(lua_State* L) { int SWIG_arg = 0; inlib::random::exp *arg1 = (inlib::random::exp *) 0 ;
  double result; SWIG_check_num_args("inlib::random::exp::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::random::exp::shoot",1,"inlib::random::exp *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__random__exp,0))){
    SWIG_fail_ptr("random_exp_shoot",1,SWIGTYPE_p_inlib__random__exp); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_random_exp(void *obj) {
inlib::random::exp *arg1 = (inlib::random::exp *) obj;
delete arg1;
}
static int _proxy__wrap_new_random_exp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_random_exp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_random_exp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_random_exp_methods[]= {
    { "shoot", _wrap_random_exp_shoot},
    {0,0}
};
static swig_lua_method swig_random_exp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_random_exp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_random_exp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_random_exp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_random_exp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_random_exp_SwigStatic = {
    "random_exp",
    swig_random_exp_SwigStatic_methods,
    swig_random_exp_SwigStatic_attributes,
    swig_random_exp_SwigStatic_constants,
    swig_random_exp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_random_exp_bases[] = {0};
static const char *swig_random_exp_base_names[] = {0};
static swig_lua_class _wrap_class_random_exp = { "random_exp", "random_exp", &SWIGTYPE_p_inlib__random__exp,_proxy__wrap_new_random_exp, swig_delete_random_exp, swig_random_exp_methods, swig_random_exp_attributes, &swig_random_exp_SwigStatic, swig_random_exp_meta, swig_random_exp_bases, swig_random_exp_base_names };

static int _wrap_new_rtausmeui__SWIG_0(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; inlib::rtausmeui *result = 0 ;
  SWIG_check_num_args("inlib::rtausmeui::rtausmeui",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::rtausmeui::rtausmeui",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (inlib::rtausmeui *)new inlib::rtausmeui(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmeui,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rtausmeui__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rtausmeui *result = 0 ;
  SWIG_check_num_args("inlib::rtausmeui::rtausmeui",0,0) result = (inlib::rtausmeui *)new inlib::rtausmeui();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmeui,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rtausmeui__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::rtausmeui *arg1 = 0 ;
  inlib::rtausmeui *result = 0 ; SWIG_check_num_args("inlib::rtausmeui::rtausmeui",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rtausmeui::rtausmeui",1,"inlib::rtausmeui const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmeui,0))){
    SWIG_fail_ptr("new_rtausmeui",1,SWIGTYPE_p_inlib__rtausmeui); } 
  result = (inlib::rtausmeui *)new inlib::rtausmeui((inlib::rtausmeui const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmeui,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rtausmeui(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rtausmeui__SWIG_1(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rtausmeui, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rtausmeui__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_rtausmeui__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rtausmeui'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rtausmeui::rtausmeui(unsigned int)\n" "    inlib::rtausmeui::rtausmeui()\n"
  "    inlib::rtausmeui::rtausmeui(inlib::rtausmeui const &)\n"); lua_error(L);return 0; }
static int _wrap_rtausmeui_set_seed(lua_State* L) { int SWIG_arg = 0; inlib::rtausmeui *arg1 = (inlib::rtausmeui *) 0 ;
  unsigned int arg2 ; SWIG_check_num_args("inlib::rtausmeui::set_seed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmeui::set_seed",1,"inlib::rtausmeui *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rtausmeui::set_seed",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmeui,0))){
    SWIG_fail_ptr("rtausmeui_set_seed",1,SWIGTYPE_p_inlib__rtausmeui); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->set_seed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rtausmeui_seed(lua_State* L) { int SWIG_arg = 0; inlib::rtausmeui *arg1 = (inlib::rtausmeui *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::rtausmeui::seed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmeui::seed",1,"inlib::rtausmeui const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmeui,0))){
    SWIG_fail_ptr("rtausmeui_seed",1,SWIGTYPE_p_inlib__rtausmeui); } 
  result = (unsigned int)((inlib::rtausmeui const *)arg1)->seed(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rtausmeui_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rtausmeui *arg1 = (inlib::rtausmeui *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::rtausmeui::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmeui::shoot",1,"inlib::rtausmeui *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmeui,0))){
    SWIG_fail_ptr("rtausmeui_shoot",1,SWIGTYPE_p_inlib__rtausmeui); }  result = (unsigned int)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rtausmeui(void *obj) {
inlib::rtausmeui *arg1 = (inlib::rtausmeui *) obj;
delete arg1;
}
static int _proxy__wrap_new_rtausmeui(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rtausmeui);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rtausmeui_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rtausmeui_methods[]= {
    { "set_seed", _wrap_rtausmeui_set_seed},
    { "seed", _wrap_rtausmeui_seed},
    { "shoot", _wrap_rtausmeui_shoot},
    {0,0}
};
static swig_lua_method swig_rtausmeui_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rtausmeui_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rtausmeui_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rtausmeui_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rtausmeui_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rtausmeui_Sf_SwigStatic = {
    "rtausmeui",
    swig_rtausmeui_Sf_SwigStatic_methods,
    swig_rtausmeui_Sf_SwigStatic_attributes,
    swig_rtausmeui_Sf_SwigStatic_constants,
    swig_rtausmeui_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rtausmeui_bases[] = {0};
static const char *swig_rtausmeui_base_names[] = {0};
static swig_lua_class _wrap_class_rtausmeui = { "rtausmeui", "rtausmeui", &SWIGTYPE_p_inlib__rtausmeui,_proxy__wrap_new_rtausmeui, swig_delete_rtausmeui, swig_rtausmeui_methods, swig_rtausmeui_attributes, &swig_rtausmeui_Sf_SwigStatic, swig_rtausmeui_meta, swig_rtausmeui_bases, swig_rtausmeui_base_names };

static int _wrap_new_rtausmed__SWIG_0(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; inlib::rtausmed *result = 0 ;
  SWIG_check_num_args("inlib::rtausmed::rtausmed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::rtausmed::rtausmed",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (inlib::rtausmed *)new inlib::rtausmed(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmed,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_rtausmed__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rtausmed *result = 0 ;
  SWIG_check_num_args("inlib::rtausmed::rtausmed",0,0) result = (inlib::rtausmed *)new inlib::rtausmed();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmed,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rtausmed__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::rtausmed *arg1 = 0 ;
  inlib::rtausmed *result = 0 ; SWIG_check_num_args("inlib::rtausmed::rtausmed",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rtausmed::rtausmed",1,"inlib::rtausmed const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmed,0))){
    SWIG_fail_ptr("new_rtausmed",1,SWIGTYPE_p_inlib__rtausmed); } 
  result = (inlib::rtausmed *)new inlib::rtausmed((inlib::rtausmed const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rtausmed,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rtausmed(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rtausmed__SWIG_1(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rtausmed, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rtausmed__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_rtausmed__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rtausmed'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rtausmed::rtausmed(unsigned int)\n" "    inlib::rtausmed::rtausmed()\n"
  "    inlib::rtausmed::rtausmed(inlib::rtausmed const &)\n"); lua_error(L);return 0; }
static int _wrap_rtausmed_set_seed(lua_State* L) { int SWIG_arg = 0; inlib::rtausmed *arg1 = (inlib::rtausmed *) 0 ;
  unsigned int arg2 ; SWIG_check_num_args("inlib::rtausmed::set_seed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmed::set_seed",1,"inlib::rtausmed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rtausmed::set_seed",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmed,0))){
    SWIG_fail_ptr("rtausmed_set_seed",1,SWIGTYPE_p_inlib__rtausmed); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->set_seed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rtausmed_seed(lua_State* L) { int SWIG_arg = 0; inlib::rtausmed *arg1 = (inlib::rtausmed *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::rtausmed::seed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmed::seed",1,"inlib::rtausmed const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmed,0))){
    SWIG_fail_ptr("rtausmed_seed",1,SWIGTYPE_p_inlib__rtausmed); } 
  result = (unsigned int)((inlib::rtausmed const *)arg1)->seed(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rtausmed_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rtausmed *arg1 = (inlib::rtausmed *) 0 ; double result;
  SWIG_check_num_args("inlib::rtausmed::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rtausmed::shoot",1,"inlib::rtausmed *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rtausmed,0))){
    SWIG_fail_ptr("rtausmed_shoot",1,SWIGTYPE_p_inlib__rtausmed); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rtausmed(void *obj) {
inlib::rtausmed *arg1 = (inlib::rtausmed *) obj;
delete arg1;
}
static int _proxy__wrap_new_rtausmed(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rtausmed);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rtausmed_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rtausmed_methods[]= {
    { "set_seed", _wrap_rtausmed_set_seed},
    { "seed", _wrap_rtausmed_seed},
    { "shoot", _wrap_rtausmed_shoot},
    {0,0}
};
static swig_lua_method swig_rtausmed_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rtausmed_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rtausmed_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rtausmed_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rtausmed_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rtausmed_Sf_SwigStatic = {
    "rtausmed",
    swig_rtausmed_Sf_SwigStatic_methods,
    swig_rtausmed_Sf_SwigStatic_attributes,
    swig_rtausmed_Sf_SwigStatic_constants,
    swig_rtausmed_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rtausmed_bases[] = {0};
static const char *swig_rtausmed_base_names[] = {0};
static swig_lua_class _wrap_class_rtausmed = { "rtausmed", "rtausmed", &SWIGTYPE_p_inlib__rtausmed,_proxy__wrap_new_rtausmed, swig_delete_rtausmed, swig_rtausmed_methods, swig_rtausmed_attributes, &swig_rtausmed_Sf_SwigStatic, swig_rtausmed_meta, swig_rtausmed_bases, swig_rtausmed_base_names };

static int _wrap_new_rgaussd__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; inlib::rgaussd *result = 0 ;
  SWIG_check_num_args("inlib::rgaussd::rgaussd",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::rgaussd::rgaussd",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rgaussd::rgaussd",2,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); result = (inlib::rgaussd *)new inlib::rgaussd(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rgaussd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rgaussd__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rgaussd *arg1 = 0 ; inlib::rgaussd *result = 0 ;
  SWIG_check_num_args("inlib::rgaussd::rgaussd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rgaussd::rgaussd",1,"inlib::rgaussd const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rgaussd,0))){
    SWIG_fail_ptr("new_rgaussd",1,SWIGTYPE_p_inlib__rgaussd); } 
  result = (inlib::rgaussd *)new inlib::rgaussd((inlib::rgaussd const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rgaussd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rgaussd(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rgaussd, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rgaussd__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_rgaussd__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rgaussd'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rgaussd::rgaussd(double,double)\n" "    inlib::rgaussd::rgaussd(inlib::rgaussd const &)\n");
  lua_error(L);return 0; }
static int _wrap_rgaussd_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rgaussd *arg1 = (inlib::rgaussd *) 0 ; double result;
  SWIG_check_num_args("inlib::rgaussd::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rgaussd::shoot",1,"inlib::rgaussd *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rgaussd,0))){
    SWIG_fail_ptr("rgaussd_shoot",1,SWIGTYPE_p_inlib__rgaussd); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rgaussd(void *obj) {
inlib::rgaussd *arg1 = (inlib::rgaussd *) obj;
delete arg1;
}
static int _proxy__wrap_new_rgaussd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rgaussd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rgaussd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rgaussd_methods[]= {
    { "shoot", _wrap_rgaussd_shoot},
    {0,0}
};
static swig_lua_method swig_rgaussd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rgaussd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rgaussd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rgaussd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rgaussd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rgaussd_Sf_SwigStatic = {
    "rgaussd",
    swig_rgaussd_Sf_SwigStatic_methods,
    swig_rgaussd_Sf_SwigStatic_attributes,
    swig_rgaussd_Sf_SwigStatic_constants,
    swig_rgaussd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rgaussd_bases[] = {0};
static const char *swig_rgaussd_base_names[] = {0};
static swig_lua_class _wrap_class_rgaussd = { "rgaussd", "rgaussd", &SWIGTYPE_p_inlib__rgaussd,_proxy__wrap_new_rgaussd, swig_delete_rgaussd, swig_rgaussd_methods, swig_rgaussd_attributes, &swig_rgaussd_Sf_SwigStatic, swig_rgaussd_meta, swig_rgaussd_bases, swig_rgaussd_base_names };

static int _wrap_new_rbwd__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; inlib::rbwd *result = 0 ;
  SWIG_check_num_args("inlib::rbwd::rbwd",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::rbwd::rbwd",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rbwd::rbwd",2,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); result = (inlib::rbwd *)new inlib::rbwd(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rbwd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rbwd__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rbwd *arg1 = 0 ; inlib::rbwd *result = 0 ;
  SWIG_check_num_args("inlib::rbwd::rbwd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rbwd::rbwd",1,"inlib::rbwd const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rbwd,0))){
    SWIG_fail_ptr("new_rbwd",1,SWIGTYPE_p_inlib__rbwd); }  result = (inlib::rbwd *)new inlib::rbwd((inlib::rbwd const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rbwd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rbwd(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rbwd, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rbwd__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_rbwd__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rbwd'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::rbwd::rbwd(double,double)\n" "    inlib::rbwd::rbwd(inlib::rbwd const &)\n");
  lua_error(L);return 0; }
static int _wrap_rbwd_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rbwd *arg1 = (inlib::rbwd *) 0 ; double result;
  SWIG_check_num_args("inlib::rbwd::shoot",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rbwd::shoot",1,"inlib::rbwd *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rbwd,0))){
    SWIG_fail_ptr("rbwd_shoot",1,SWIGTYPE_p_inlib__rbwd); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rbwd(void *obj) {
inlib::rbwd *arg1 = (inlib::rbwd *) obj;
delete arg1;
}
static int _proxy__wrap_new_rbwd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rbwd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rbwd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rbwd_methods[]= {
    { "shoot", _wrap_rbwd_shoot},
    {0,0}
};
static swig_lua_method swig_rbwd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rbwd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rbwd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rbwd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rbwd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rbwd_Sf_SwigStatic = {
    "rbwd",
    swig_rbwd_Sf_SwigStatic_methods,
    swig_rbwd_Sf_SwigStatic_attributes,
    swig_rbwd_Sf_SwigStatic_constants,
    swig_rbwd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rbwd_bases[] = {0};
static const char *swig_rbwd_base_names[] = {0};
static swig_lua_class _wrap_class_rbwd = { "rbwd", "rbwd", &SWIGTYPE_p_inlib__rbwd,_proxy__wrap_new_rbwd, swig_delete_rbwd, swig_rbwd_methods, swig_rbwd_attributes, &swig_rbwd_Sf_SwigStatic, swig_rbwd_meta, swig_rbwd_bases, swig_rbwd_base_names };

static int _wrap_new_rexpd__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; inlib::rexpd *result = 0 ;
  SWIG_check_num_args("inlib::rexpd::rexpd",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::rexpd::rexpd",1,"double");
  arg1 = (double)lua_tonumber(L, 1); result = (inlib::rexpd *)new inlib::rexpd(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rexpd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rexpd__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rexpd *arg1 = 0 ; inlib::rexpd *result = 0 ;
  SWIG_check_num_args("inlib::rexpd::rexpd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rexpd::rexpd",1,"inlib::rexpd const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rexpd,0))){
    SWIG_fail_ptr("new_rexpd",1,SWIGTYPE_p_inlib__rexpd); } 
  result = (inlib::rexpd *)new inlib::rexpd((inlib::rexpd const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rexpd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rexpd(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rexpd, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rexpd__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_rexpd__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rexpd'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rexpd::rexpd(double)\n" "    inlib::rexpd::rexpd(inlib::rexpd const &)\n"); lua_error(L);return 0; }
static int _wrap_rexpd_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rexpd *arg1 = (inlib::rexpd *) 0 ; double result;
  SWIG_check_num_args("inlib::rexpd::shoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rexpd::shoot",1,"inlib::rexpd *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rexpd,0))){
    SWIG_fail_ptr("rexpd_shoot",1,SWIGTYPE_p_inlib__rexpd); }  result = (double)(arg1)->shoot();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rexpd(void *obj) {
inlib::rexpd *arg1 = (inlib::rexpd *) obj;
delete arg1;
}
static int _proxy__wrap_new_rexpd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rexpd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rexpd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rexpd_methods[]= {
    { "shoot", _wrap_rexpd_shoot},
    {0,0}
};
static swig_lua_method swig_rexpd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rexpd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rexpd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rexpd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rexpd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rexpd_Sf_SwigStatic = {
    "rexpd",
    swig_rexpd_Sf_SwigStatic_methods,
    swig_rexpd_Sf_SwigStatic_attributes,
    swig_rexpd_Sf_SwigStatic_constants,
    swig_rexpd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rexpd_bases[] = {0};
static const char *swig_rexpd_base_names[] = {0};
static swig_lua_class _wrap_class_rexpd = { "rexpd", "rexpd", &SWIGTYPE_p_inlib__rexpd,_proxy__wrap_new_rexpd, swig_delete_rexpd, swig_rexpd_methods, swig_rexpd_attributes, &swig_rexpd_Sf_SwigStatic, swig_rexpd_meta, swig_rexpd_bases, swig_rexpd_base_names };

static int _wrap_new_rdir2d__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::rdir2d *result = 0 ;
  SWIG_check_num_args("inlib::rdir2d::rdir2d",0,0) result = (inlib::rdir2d *)new inlib::rdir2d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rdir2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rdir2d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rdir2d *arg1 = 0 ; inlib::rdir2d *result = 0 ;
  SWIG_check_num_args("inlib::rdir2d::rdir2d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rdir2d::rdir2d",1,"inlib::rdir2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rdir2d,0))){
    SWIG_fail_ptr("new_rdir2d",1,SWIGTYPE_p_inlib__rdir2d); } 
  result = (inlib::rdir2d *)new inlib::rdir2d((inlib::rdir2d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rdir2d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rdir2d(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rdir2d__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rdir2d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rdir2d__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rdir2d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rdir2d::rdir2d()\n" "    inlib::rdir2d::rdir2d(inlib::rdir2d const &)\n"); lua_error(L);return 0; }
static int _wrap_rdir2d_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rdir2d *arg1 = (inlib::rdir2d *) 0 ;
  std::vector< double > *arg2 = 0 ; SWIG_check_num_args("inlib::rdir2d::shoot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rdir2d::shoot",1,"inlib::rdir2d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rdir2d::shoot",2,"std::vector< double > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rdir2d,0))){
    SWIG_fail_ptr("rdir2d_shoot",1,SWIGTYPE_p_inlib__rdir2d); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("rdir2d_shoot",2,SWIGTYPE_p_std__vectorT_double_t); }  inlib_rdir2d_shoot((inlib::rdir2d const *)arg1,*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rdir2d(void *obj) {
inlib::rdir2d *arg1 = (inlib::rdir2d *) obj;
delete arg1;
}
static int _proxy__wrap_new_rdir2d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rdir2d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rdir2d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rdir2d_methods[]= {
    { "shoot", _wrap_rdir2d_shoot},
    {0,0}
};
static swig_lua_method swig_rdir2d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rdir2d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rdir2d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rdir2d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rdir2d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rdir2d_Sf_SwigStatic = {
    "rdir2d",
    swig_rdir2d_Sf_SwigStatic_methods,
    swig_rdir2d_Sf_SwigStatic_attributes,
    swig_rdir2d_Sf_SwigStatic_constants,
    swig_rdir2d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rdir2d_bases[] = {0};
static const char *swig_rdir2d_base_names[] = {0};
static swig_lua_class _wrap_class_rdir2d = { "rdir2d", "rdir2d", &SWIGTYPE_p_inlib__rdir2d,_proxy__wrap_new_rdir2d, swig_delete_rdir2d, swig_rdir2d_methods, swig_rdir2d_attributes, &swig_rdir2d_Sf_SwigStatic, swig_rdir2d_meta, swig_rdir2d_bases, swig_rdir2d_base_names };

static int _wrap_new_rdir3d__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::rdir3d *result = 0 ;
  SWIG_check_num_args("inlib::rdir3d::rdir3d",0,0) result = (inlib::rdir3d *)new inlib::rdir3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rdir3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rdir3d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rdir3d *arg1 = 0 ; inlib::rdir3d *result = 0 ;
  SWIG_check_num_args("inlib::rdir3d::rdir3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rdir3d::rdir3d",1,"inlib::rdir3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rdir3d,0))){
    SWIG_fail_ptr("new_rdir3d",1,SWIGTYPE_p_inlib__rdir3d); } 
  result = (inlib::rdir3d *)new inlib::rdir3d((inlib::rdir3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rdir3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rdir3d(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rdir3d__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rdir3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rdir3d__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rdir3d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rdir3d::rdir3d()\n" "    inlib::rdir3d::rdir3d(inlib::rdir3d const &)\n"); lua_error(L);return 0; }
static int _wrap_rdir3d_shoot(lua_State* L) { int SWIG_arg = 0; inlib::rdir3d *arg1 = (inlib::rdir3d *) 0 ;
  std::vector< double > *arg2 = 0 ; SWIG_check_num_args("inlib::rdir3d::shoot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rdir3d::shoot",1,"inlib::rdir3d const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rdir3d::shoot",2,"std::vector< double > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rdir3d,0))){
    SWIG_fail_ptr("rdir3d_shoot",1,SWIGTYPE_p_inlib__rdir3d); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("rdir3d_shoot",2,SWIGTYPE_p_std__vectorT_double_t); }  inlib_rdir3d_shoot((inlib::rdir3d const *)arg1,*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rdir3d(void *obj) {
inlib::rdir3d *arg1 = (inlib::rdir3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_rdir3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rdir3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rdir3d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rdir3d_methods[]= {
    { "shoot", _wrap_rdir3d_shoot},
    {0,0}
};
static swig_lua_method swig_rdir3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rdir3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rdir3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rdir3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rdir3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rdir3d_Sf_SwigStatic = {
    "rdir3d",
    swig_rdir3d_Sf_SwigStatic_methods,
    swig_rdir3d_Sf_SwigStatic_attributes,
    swig_rdir3d_Sf_SwigStatic_constants,
    swig_rdir3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rdir3d_bases[] = {0};
static const char *swig_rdir3d_base_names[] = {0};
static swig_lua_class _wrap_class_rdir3d = { "rdir3d", "rdir3d", &SWIGTYPE_p_inlib__rdir3d,_proxy__wrap_new_rdir3d, swig_delete_rdir3d, swig_rdir3d_methods, swig_rdir3d_attributes, &swig_rdir3d_Sf_SwigStatic, swig_rdir3d_meta, swig_rdir3d_bases, swig_rdir3d_base_names };

static int _wrap_new_sg_style_colormap__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::style_colormap *result = 0 ;
  SWIG_check_num_args("inlib::sg::style_colormap::style_colormap",0,0)
  result = (inlib::sg::style_colormap *)new inlib::sg::style_colormap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_colormap__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::style_colormap *arg1 = 0 ;
  inlib::sg::style_colormap *result = 0 ; SWIG_check_num_args("inlib::sg::style_colormap::style_colormap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::style_colormap::style_colormap",1,"inlib::sg::style_colormap const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style_colormap,0))){
    SWIG_fail_ptr("new_sg_style_colormap",1,SWIGTYPE_p_inlib__sg__style_colormap); } 
  result = (inlib::sg::style_colormap *)new inlib::sg::style_colormap((inlib::sg::style_colormap const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_colormap(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_style_colormap__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__style_colormap, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_style_colormap__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_style_colormap'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::style_colormap::style_colormap()\n"
  "    inlib::sg::style_colormap::style_colormap(inlib::sg::style_colormap const &)\n"); lua_error(L);return 0; }
static void swig_delete_sg_style_colormap(void *obj) {
inlib::sg::style_colormap *arg1 = (inlib::sg::style_colormap *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_style_colormap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_style_colormap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_style_colormap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_style_colormap_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_style_colormap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_style_colormap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_style_colormap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_style_colormap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_style_colormap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_style_colormap_SwigStatic = {
    "sg_style_colormap",
    swig_sg_style_colormap_SwigStatic_methods,
    swig_sg_style_colormap_SwigStatic_attributes,
    swig_sg_style_colormap_SwigStatic_constants,
    swig_sg_style_colormap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_style_colormap_bases[] = {0};
static const char *swig_sg_style_colormap_base_names[] = {0};
static swig_lua_class _wrap_class_sg_style_colormap = { "sg_style_colormap", "sg_style_colormap", &SWIGTYPE_p_inlib__sg__style_colormap,_proxy__wrap_new_sg_style_colormap, swig_delete_sg_style_colormap, swig_sg_style_colormap_methods, swig_sg_style_colormap_attributes, &swig_sg_style_colormap_SwigStatic, swig_sg_style_colormap_meta, swig_sg_style_colormap_bases, swig_sg_style_colormap_base_names };

static int _wrap_new_sg_style_default_colormap__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::style_default_colormap *result = 0 ;
  SWIG_check_num_args("inlib::sg::style_default_colormap::style_default_colormap",0,0)
  result = (inlib::sg::style_default_colormap *)new inlib::sg::style_default_colormap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_default_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_default_colormap__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::style_default_colormap *arg1 = 0 ; inlib::sg::style_default_colormap *result = 0 ;
  SWIG_check_num_args("inlib::sg::style_default_colormap::style_default_colormap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::style_default_colormap::style_default_colormap",1,"inlib::sg::style_default_colormap const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style_default_colormap,0))){
    SWIG_fail_ptr("new_sg_style_default_colormap",1,SWIGTYPE_p_inlib__sg__style_default_colormap); } 
  result = (inlib::sg::style_default_colormap *)new inlib::sg::style_default_colormap((inlib::sg::style_default_colormap const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_default_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_default_colormap(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sg_style_default_colormap__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__style_default_colormap, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_style_default_colormap__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_style_default_colormap'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::style_default_colormap::style_default_colormap()\n"
  "    inlib::sg::style_default_colormap::style_default_colormap(inlib::sg::style_default_colormap const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_style_default_colormap(void *obj) {
inlib::sg::style_default_colormap *arg1 = (inlib::sg::style_default_colormap *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_style_default_colormap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_style_default_colormap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_style_default_colormap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_style_default_colormap_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_style_default_colormap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_style_default_colormap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_style_default_colormap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_style_default_colormap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_style_default_colormap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_style_default_colormap_SwigStatic = {
    "sg_style_default_colormap",
    swig_sg_style_default_colormap_SwigStatic_methods,
    swig_sg_style_default_colormap_SwigStatic_attributes,
    swig_sg_style_default_colormap_SwigStatic_constants,
    swig_sg_style_default_colormap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_style_default_colormap_bases[] = {0,0};
static const char *swig_sg_style_default_colormap_base_names[] = {"inlib::sg::style_colormap *",0};
static swig_lua_class _wrap_class_sg_style_default_colormap = { "sg_style_default_colormap", "sg_style_default_colormap", &SWIGTYPE_p_inlib__sg__style_default_colormap,_proxy__wrap_new_sg_style_default_colormap, swig_delete_sg_style_default_colormap, swig_sg_style_default_colormap_methods, swig_sg_style_default_colormap_attributes, &swig_sg_style_default_colormap_SwigStatic, swig_sg_style_default_colormap_meta, swig_sg_style_default_colormap_bases, swig_sg_style_default_colormap_base_names };

static int _wrap_new_sg_style_ROOT_colormap__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::style_ROOT_colormap *result = 0 ; SWIG_check_num_args("inlib::sg::style_ROOT_colormap::style_ROOT_colormap",0,0)
  result = (inlib::sg::style_ROOT_colormap *)new inlib::sg::style_ROOT_colormap();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_ROOT_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_ROOT_colormap__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::style_ROOT_colormap *arg1 = 0 ;
  inlib::sg::style_ROOT_colormap *result = 0 ; SWIG_check_num_args("inlib::sg::style_ROOT_colormap::style_ROOT_colormap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::style_ROOT_colormap::style_ROOT_colormap",1,"inlib::sg::style_ROOT_colormap const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style_ROOT_colormap,0))){
    SWIG_fail_ptr("new_sg_style_ROOT_colormap",1,SWIGTYPE_p_inlib__sg__style_ROOT_colormap); } 
  result = (inlib::sg::style_ROOT_colormap *)new inlib::sg::style_ROOT_colormap((inlib::sg::style_ROOT_colormap const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style_ROOT_colormap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_style_ROOT_colormap(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sg_style_ROOT_colormap__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__style_ROOT_colormap, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_style_ROOT_colormap__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_style_ROOT_colormap'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::style_ROOT_colormap::style_ROOT_colormap()\n"
  "    inlib::sg::style_ROOT_colormap::style_ROOT_colormap(inlib::sg::style_ROOT_colormap const &)\n"); lua_error(L);return 0; }
static void swig_delete_sg_style_ROOT_colormap(void *obj) {
inlib::sg::style_ROOT_colormap *arg1 = (inlib::sg::style_ROOT_colormap *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_style_ROOT_colormap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_style_ROOT_colormap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_style_ROOT_colormap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_style_ROOT_colormap_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_style_ROOT_colormap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_style_ROOT_colormap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_style_ROOT_colormap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_style_ROOT_colormap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_style_ROOT_colormap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_style_ROOT_colormap_SwigStatic = {
    "sg_style_ROOT_colormap",
    swig_sg_style_ROOT_colormap_SwigStatic_methods,
    swig_sg_style_ROOT_colormap_SwigStatic_attributes,
    swig_sg_style_ROOT_colormap_SwigStatic_constants,
    swig_sg_style_ROOT_colormap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_style_ROOT_colormap_bases[] = {0,0};
static const char *swig_sg_style_ROOT_colormap_base_names[] = {"inlib::sg::style_colormap *",0};
static swig_lua_class _wrap_class_sg_style_ROOT_colormap = { "sg_style_ROOT_colormap", "sg_style_ROOT_colormap", &SWIGTYPE_p_inlib__sg__style_ROOT_colormap,_proxy__wrap_new_sg_style_ROOT_colormap, swig_delete_sg_style_ROOT_colormap, swig_sg_style_ROOT_colormap_methods, swig_sg_style_ROOT_colormap_attributes, &swig_sg_style_ROOT_colormap_SwigStatic, swig_sg_style_ROOT_colormap_meta, swig_sg_style_ROOT_colormap_bases, swig_sg_style_ROOT_colormap_base_names };

static int _wrap_new_xml_styles__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ;
  inlib::xml::styles *result = 0 ; SWIG_check_num_args("inlib::xml::styles::styles",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::xml::styles::styles",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_xml_styles",1,SWIGTYPE_p_std__ostream); }  result = (inlib::xml::styles *)new inlib::xml::styles(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__xml__styles,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_xml_styles__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::xml::styles *arg1 = 0 ;
  inlib::xml::styles *result = 0 ; SWIG_check_num_args("inlib::xml::styles::styles",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::xml::styles::styles",1,"inlib::xml::styles const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__xml__styles,0))){
    SWIG_fail_ptr("new_xml_styles",1,SWIGTYPE_p_inlib__xml__styles); } 
  result = (inlib::xml::styles *)new inlib::xml::styles((inlib::xml::styles const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__xml__styles,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_xml_styles(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_xml_styles__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__xml__styles, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_xml_styles__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_xml_styles'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::xml::styles::styles(std::ostream &)\n" "    inlib::xml::styles::styles(inlib::xml::styles const &)\n");
  lua_error(L);return 0; }
static int _wrap_xml_styles_out(lua_State* L) { int SWIG_arg = 0; inlib::xml::styles *arg1 = (inlib::xml::styles *) 0 ;
  std::ostream *result = 0 ; SWIG_check_num_args("inlib::xml::styles::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::xml::styles::out",1,"inlib::xml::styles const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__xml__styles,0))){
    SWIG_fail_ptr("xml_styles_out",1,SWIGTYPE_p_inlib__xml__styles); } 
  result = (std::ostream *) &((inlib::xml::styles const *)arg1)->out();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__ostream,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_xml_styles_add_colormap(lua_State* L) { int SWIG_arg = 0; inlib::xml::styles *arg1 = (inlib::xml::styles *) 0 ;
  std::string *arg2 = 0 ; inlib::sg::style_colormap *arg3 = 0 ; std::string temp2 ;
  SWIG_check_num_args("inlib::xml::styles::add_colormap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::xml::styles::add_colormap",1,"inlib::xml::styles *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::xml::styles::add_colormap",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::xml::styles::add_colormap",3,"inlib::sg::style_colormap const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__xml__styles,0))){
    SWIG_fail_ptr("xml_styles_add_colormap",1,SWIGTYPE_p_inlib__xml__styles); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__sg__style_colormap,0))){
    SWIG_fail_ptr("xml_styles_add_colormap",3,SWIGTYPE_p_inlib__sg__style_colormap); } 
  (arg1)->add_colormap((std::string const &)*arg2,(inlib::sg::style_colormap const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static void swig_delete_xml_styles(void *obj) {
inlib::xml::styles *arg1 = (inlib::xml::styles *) obj;
delete arg1;
}
static int _proxy__wrap_new_xml_styles(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_xml_styles);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_xml_styles_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_xml_styles_methods[]= {
    { "out", _wrap_xml_styles_out},
    { "add_colormap", _wrap_xml_styles_add_colormap},
    {0,0}
};
static swig_lua_method swig_xml_styles_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_xml_styles_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_xml_styles_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_xml_styles_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_xml_styles_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_xml_styles_Sf_SwigStatic = {
    "xml_styles",
    swig_xml_styles_Sf_SwigStatic_methods,
    swig_xml_styles_Sf_SwigStatic_attributes,
    swig_xml_styles_Sf_SwigStatic_constants,
    swig_xml_styles_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_xml_styles_bases[] = {0};
static const char *swig_xml_styles_base_names[] = {0};
static swig_lua_class _wrap_class_xml_styles = { "xml_styles", "xml_styles", &SWIGTYPE_p_inlib__xml__styles,_proxy__wrap_new_xml_styles, swig_delete_xml_styles, swig_xml_styles_methods, swig_xml_styles_attributes, &swig_xml_styles_Sf_SwigStatic, swig_xml_styles_meta, swig_xml_styles_bases, swig_xml_styles_base_names };

static int _wrap_new_SOPI_color__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::color::color",0,0) result = (inlib::SOPI::color *)new inlib::SOPI::color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__color,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_color__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::ushort arg1 ; inlib::ushort arg2 ;
  inlib::ushort arg3 ; inlib::ushort *argp1 ; inlib::ushort *argp2 ; inlib::ushort *argp3 ; inlib::SOPI::color *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::color::color",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::color::color",1,"inlib::ushort");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::SOPI::color::color",2,"inlib::ushort");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::SOPI::color::color",3,"inlib::ushort");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_inlib__ushort,0))){
    SWIG_fail_ptr("new_SOPI_color",1,SWIGTYPE_p_inlib__ushort); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_inlib__ushort,0))){
    SWIG_fail_ptr("new_SOPI_color",2,SWIGTYPE_p_inlib__ushort); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_inlib__ushort,0))){
    SWIG_fail_ptr("new_SOPI_color",3,SWIGTYPE_p_inlib__ushort); }  arg3 = *argp3;
  result = (inlib::SOPI::color *)new inlib::SOPI::color(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__color,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_color__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = 0 ;
  inlib::SOPI::color *result = 0 ; SWIG_check_num_args("inlib::SOPI::color::color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::color::color",1,"inlib::SOPI::color const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("new_SOPI_color",1,SWIGTYPE_p_inlib__SOPI__color); } 
  result = (inlib::SOPI::color *)new inlib::SOPI::color((inlib::SOPI::color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__color,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_color(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_color__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__color, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_color__SWIG_2(L);}  }  if (argc == 3) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__ushort, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__ushort, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_inlib__ushort, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_color__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_color'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::color::color()\n" "    inlib::SOPI::color::color(inlib::ushort,inlib::ushort,inlib::ushort)\n"
  "    inlib::SOPI::color::color(inlib::SOPI::color const &)\n"); lua_error(L);return 0; }
static int _wrap_SOPI_color_rchar(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  inlib::uchar result; SWIG_check_num_args("inlib::SOPI::color::rchar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::rchar",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_rchar",1,SWIGTYPE_p_inlib__SOPI__color); }  result = ((inlib::SOPI::color const *)arg1)->rchar();
  { inlib::uchar * resultptr = new inlib::uchar((const inlib::uchar &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__uchar,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_color_gchar(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  inlib::uchar result; SWIG_check_num_args("inlib::SOPI::color::gchar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::gchar",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_gchar",1,SWIGTYPE_p_inlib__SOPI__color); }  result = ((inlib::SOPI::color const *)arg1)->gchar();
  { inlib::uchar * resultptr = new inlib::uchar((const inlib::uchar &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__uchar,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_color_bchar(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  inlib::uchar result; SWIG_check_num_args("inlib::SOPI::color::bchar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::bchar",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_bchar",1,SWIGTYPE_p_inlib__SOPI__color); }  result = ((inlib::SOPI::color const *)arg1)->bchar();
  { inlib::uchar * resultptr = new inlib::uchar((const inlib::uchar &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__uchar,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_color_r(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  float result; SWIG_check_num_args("inlib::SOPI::color::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::r",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_r",1,SWIGTYPE_p_inlib__SOPI__color); }  result = (float)((inlib::SOPI::color const *)arg1)->r();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_color_g(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  float result; SWIG_check_num_args("inlib::SOPI::color::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::g",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_g",1,SWIGTYPE_p_inlib__SOPI__color); }  result = (float)((inlib::SOPI::color const *)arg1)->g();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_color_b(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *arg1 = (inlib::SOPI::color *) 0 ;
  float result; SWIG_check_num_args("inlib::SOPI::color::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::color::b",1,"inlib::SOPI::color const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__color,0))){
    SWIG_fail_ptr("SOPI_color_b",1,SWIGTYPE_p_inlib__SOPI__color); }  result = (float)((inlib::SOPI::color const *)arg1)->b();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_SOPI_color(void *obj) {
inlib::SOPI::color *arg1 = (inlib::SOPI::color *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_color(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_color);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_color_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_color_methods[]= {
    { "rchar", _wrap_SOPI_color_rchar},
    { "gchar", _wrap_SOPI_color_gchar},
    { "bchar", _wrap_SOPI_color_bchar},
    { "r", _wrap_SOPI_color_r},
    { "g", _wrap_SOPI_color_g},
    { "b", _wrap_SOPI_color_b},
    {0,0}
};
static swig_lua_method swig_SOPI_color_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_color_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_color_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_color_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_color_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_color_Sf_SwigStatic = {
    "SOPI_color",
    swig_SOPI_color_Sf_SwigStatic_methods,
    swig_SOPI_color_Sf_SwigStatic_attributes,
    swig_SOPI_color_Sf_SwigStatic_constants,
    swig_SOPI_color_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_color_bases[] = {0};
static const char *swig_SOPI_color_base_names[] = {0};
static swig_lua_class _wrap_class_SOPI_color = { "SOPI_color", "SOPI_color", &SWIGTYPE_p_inlib__SOPI__color,_proxy__wrap_new_SOPI_color, swig_delete_SOPI_color, swig_SOPI_color_methods, swig_SOPI_color_attributes, &swig_SOPI_color_Sf_SwigStatic, swig_SOPI_color_meta, swig_SOPI_color_bases, swig_SOPI_color_base_names };

static int _wrap_SOPI_cmap_black(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::color *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::cmap::black",0,0) result = (inlib::SOPI::color *) &inlib::SOPI::cmap::black();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__color,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_cmap__SWIG_0(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; inlib::SOPI::cmap *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::cmap::cmap",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::SOPI::cmap::cmap",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (inlib::SOPI::cmap *)new inlib::SOPI::cmap(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__cmap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_cmap__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::cmap *arg1 = 0 ;
  inlib::SOPI::cmap *result = 0 ; SWIG_check_num_args("inlib::SOPI::cmap::cmap",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::cmap::cmap",1,"inlib::SOPI::cmap const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__cmap,0))){
    SWIG_fail_ptr("new_SOPI_cmap",1,SWIGTYPE_p_inlib__SOPI__cmap); } 
  result = (inlib::SOPI::cmap *)new inlib::SOPI::cmap((inlib::SOPI::cmap const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__cmap,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_cmap(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__cmap, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_cmap__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_SOPI_cmap__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_cmap'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::cmap::cmap(unsigned int)\n" "    inlib::SOPI::cmap::cmap(inlib::SOPI::cmap const &)\n");
  lua_error(L);return 0; }
static int _wrap_SOPI_cmap_get_color(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::cmap *arg1 = (inlib::SOPI::cmap *) 0 ;
  unsigned int arg2 ; inlib::SOPI::color *result = 0 ; SWIG_check_num_args("inlib::SOPI::cmap::get_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::cmap::get_color",1,"inlib::SOPI::cmap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::SOPI::cmap::get_color",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__cmap,0))){
    SWIG_fail_ptr("SOPI_cmap_get_color",1,SWIGTYPE_p_inlib__SOPI__cmap); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::SOPI::color *) &((inlib::SOPI::cmap const *)arg1)->get_color(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__color,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SOPI_cmap_size(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::cmap *arg1 = (inlib::SOPI::cmap *) 0 ;
  size_t result; SWIG_check_num_args("inlib::SOPI::cmap::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::SOPI::cmap::size",1,"inlib::SOPI::cmap const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__cmap,0))){
    SWIG_fail_ptr("SOPI_cmap_size",1,SWIGTYPE_p_inlib__SOPI__cmap); }  result = ((inlib::SOPI::cmap const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_SOPI_cmap(void *obj) {
inlib::SOPI::cmap *arg1 = (inlib::SOPI::cmap *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_cmap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_cmap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_cmap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_cmap_methods[]= {
    { "get_color", _wrap_SOPI_cmap_get_color},
    { "size", _wrap_SOPI_cmap_size},
    {0,0}
};
static swig_lua_method swig_SOPI_cmap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_cmap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_cmap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_cmap_SwigStatic_methods[]= {
    { "black", _wrap_SOPI_cmap_black},
    {0,0}
};
static swig_lua_class* swig_SOPI_cmap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_cmap_SwigStatic = {
    "SOPI_cmap",
    swig_SOPI_cmap_SwigStatic_methods,
    swig_SOPI_cmap_SwigStatic_attributes,
    swig_SOPI_cmap_SwigStatic_constants,
    swig_SOPI_cmap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_cmap_bases[] = {0};
static const char *swig_SOPI_cmap_base_names[] = {0};
static swig_lua_class _wrap_class_SOPI_cmap = { "SOPI_cmap", "SOPI_cmap", &SWIGTYPE_p_inlib__SOPI__cmap,_proxy__wrap_new_SOPI_cmap, swig_delete_SOPI_cmap, swig_SOPI_cmap_methods, swig_SOPI_cmap_attributes, &swig_SOPI_cmap_SwigStatic, swig_SOPI_cmap_meta, swig_SOPI_cmap_bases, swig_SOPI_cmap_base_names };

static int _wrap_new_SOPI_grey32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::grey32::grey32",0,0) result = (inlib::SOPI::grey32 *)new inlib::SOPI::grey32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey32 *arg1 = 0 ;
  inlib::SOPI::grey32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::grey32::grey32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::grey32::grey32",1,"inlib::SOPI::grey32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__grey32,0))){
    SWIG_fail_ptr("new_SOPI_grey32",1,SWIGTYPE_p_inlib__SOPI__grey32); } 
  result = (inlib::SOPI::grey32 *)new inlib::SOPI::grey32((inlib::SOPI::grey32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_grey32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__grey32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_grey32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_grey32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::grey32::grey32()\n" "    inlib::SOPI::grey32::grey32(inlib::SOPI::grey32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_grey32(void *obj) {
inlib::SOPI::grey32 *arg1 = (inlib::SOPI::grey32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_grey32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_grey32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_grey32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_grey32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_grey32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_grey32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_grey32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_grey32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_grey32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_grey32_Sf_SwigStatic = {
    "SOPI_grey32",
    swig_SOPI_grey32_Sf_SwigStatic_methods,
    swig_SOPI_grey32_Sf_SwigStatic_attributes,
    swig_SOPI_grey32_Sf_SwigStatic_constants,
    swig_SOPI_grey32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_grey32_bases[] = {0,0};
static const char *swig_SOPI_grey32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_grey32 = { "SOPI_grey32", "SOPI_grey32", &SWIGTYPE_p_inlib__SOPI__grey32,_proxy__wrap_new_SOPI_grey32, swig_delete_SOPI_grey32, swig_SOPI_grey32_methods, swig_SOPI_grey32_attributes, &swig_SOPI_grey32_Sf_SwigStatic, swig_SOPI_grey32_meta, swig_SOPI_grey32_bases, swig_SOPI_grey32_base_names };

static int _wrap_new_SOPI_greyinv32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::greyinv32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::greyinv32::greyinv32",0,0) result = (inlib::SOPI::greyinv32 *)new inlib::SOPI::greyinv32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__greyinv32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_greyinv32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::greyinv32 *arg1 = 0 ;
  inlib::SOPI::greyinv32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::greyinv32::greyinv32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::greyinv32::greyinv32",1,"inlib::SOPI::greyinv32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__greyinv32,0))){
    SWIG_fail_ptr("new_SOPI_greyinv32",1,SWIGTYPE_p_inlib__SOPI__greyinv32); } 
  result = (inlib::SOPI::greyinv32 *)new inlib::SOPI::greyinv32((inlib::SOPI::greyinv32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__greyinv32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_greyinv32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_greyinv32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__greyinv32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_greyinv32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_greyinv32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::greyinv32::greyinv32()\n" "    inlib::SOPI::greyinv32::greyinv32(inlib::SOPI::greyinv32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_greyinv32(void *obj) {
inlib::SOPI::greyinv32 *arg1 = (inlib::SOPI::greyinv32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_greyinv32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_greyinv32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_greyinv32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_greyinv32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_greyinv32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_greyinv32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_greyinv32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_greyinv32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_greyinv32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_greyinv32_Sf_SwigStatic = {
    "SOPI_greyinv32",
    swig_SOPI_greyinv32_Sf_SwigStatic_methods,
    swig_SOPI_greyinv32_Sf_SwigStatic_attributes,
    swig_SOPI_greyinv32_Sf_SwigStatic_constants,
    swig_SOPI_greyinv32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_greyinv32_bases[] = {0,0};
static const char *swig_SOPI_greyinv32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_greyinv32 = { "SOPI_greyinv32", "SOPI_greyinv32", &SWIGTYPE_p_inlib__SOPI__greyinv32,_proxy__wrap_new_SOPI_greyinv32, swig_delete_SOPI_greyinv32, swig_SOPI_greyinv32_methods, swig_SOPI_greyinv32_attributes, &swig_SOPI_greyinv32_Sf_SwigStatic, swig_SOPI_greyinv32_meta, swig_SOPI_greyinv32_bases, swig_SOPI_greyinv32_base_names };

static int _wrap_new_SOPI_grey128__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey128 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::grey128::grey128",0,0) result = (inlib::SOPI::grey128 *)new inlib::SOPI::grey128();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey128__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey128 *arg1 = 0 ;
  inlib::SOPI::grey128 *result = 0 ; SWIG_check_num_args("inlib::SOPI::grey128::grey128",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::grey128::grey128",1,"inlib::SOPI::grey128 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__grey128,0))){
    SWIG_fail_ptr("new_SOPI_grey128",1,SWIGTYPE_p_inlib__SOPI__grey128); } 
  result = (inlib::SOPI::grey128 *)new inlib::SOPI::grey128((inlib::SOPI::grey128 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey128(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_grey128__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__grey128, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_grey128__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_grey128'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::grey128::grey128()\n" "    inlib::SOPI::grey128::grey128(inlib::SOPI::grey128 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_grey128(void *obj) {
inlib::SOPI::grey128 *arg1 = (inlib::SOPI::grey128 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_grey128(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_grey128);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_grey128_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_grey128_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_grey128_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_grey128_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_grey128_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_grey128_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_grey128_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_grey128_Sf_SwigStatic = {
    "SOPI_grey128",
    swig_SOPI_grey128_Sf_SwigStatic_methods,
    swig_SOPI_grey128_Sf_SwigStatic_attributes,
    swig_SOPI_grey128_Sf_SwigStatic_constants,
    swig_SOPI_grey128_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_grey128_bases[] = {0,0};
static const char *swig_SOPI_grey128_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_grey128 = { "SOPI_grey128", "SOPI_grey128", &SWIGTYPE_p_inlib__SOPI__grey128,_proxy__wrap_new_SOPI_grey128, swig_delete_SOPI_grey128, swig_SOPI_grey128_methods, swig_SOPI_grey128_attributes, &swig_SOPI_grey128_Sf_SwigStatic, swig_SOPI_grey128_meta, swig_SOPI_grey128_bases, swig_SOPI_grey128_base_names };

static int _wrap_new_SOPI_greyinv128__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::greyinv128 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::greyinv128::greyinv128",0,0)
  result = (inlib::SOPI::greyinv128 *)new inlib::SOPI::greyinv128();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__greyinv128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_greyinv128__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::greyinv128 *arg1 = 0 ;
  inlib::SOPI::greyinv128 *result = 0 ; SWIG_check_num_args("inlib::SOPI::greyinv128::greyinv128",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::greyinv128::greyinv128",1,"inlib::SOPI::greyinv128 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__greyinv128,0))){
    SWIG_fail_ptr("new_SOPI_greyinv128",1,SWIGTYPE_p_inlib__SOPI__greyinv128); } 
  result = (inlib::SOPI::greyinv128 *)new inlib::SOPI::greyinv128((inlib::SOPI::greyinv128 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__greyinv128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_greyinv128(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_greyinv128__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__greyinv128, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_greyinv128__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_greyinv128'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::greyinv128::greyinv128()\n"
  "    inlib::SOPI::greyinv128::greyinv128(inlib::SOPI::greyinv128 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_greyinv128(void *obj) {
inlib::SOPI::greyinv128 *arg1 = (inlib::SOPI::greyinv128 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_greyinv128(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_greyinv128);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_greyinv128_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_greyinv128_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_greyinv128_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_greyinv128_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_greyinv128_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_greyinv128_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_greyinv128_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_greyinv128_Sf_SwigStatic = {
    "SOPI_greyinv128",
    swig_SOPI_greyinv128_Sf_SwigStatic_methods,
    swig_SOPI_greyinv128_Sf_SwigStatic_attributes,
    swig_SOPI_greyinv128_Sf_SwigStatic_constants,
    swig_SOPI_greyinv128_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_greyinv128_bases[] = {0,0};
static const char *swig_SOPI_greyinv128_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_greyinv128 = { "SOPI_greyinv128", "SOPI_greyinv128", &SWIGTYPE_p_inlib__SOPI__greyinv128,_proxy__wrap_new_SOPI_greyinv128, swig_delete_SOPI_greyinv128, swig_SOPI_greyinv128_methods, swig_SOPI_greyinv128_attributes, &swig_SOPI_greyinv128_Sf_SwigStatic, swig_SOPI_greyinv128_meta, swig_SOPI_greyinv128_bases, swig_SOPI_greyinv128_base_names };

static int _wrap_new_SOPI_grey256__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey256 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::grey256::grey256",0,0) result = (inlib::SOPI::grey256 *)new inlib::SOPI::grey256();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey256,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey256__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::grey256 *arg1 = 0 ;
  inlib::SOPI::grey256 *result = 0 ; SWIG_check_num_args("inlib::SOPI::grey256::grey256",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::grey256::grey256",1,"inlib::SOPI::grey256 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__grey256,0))){
    SWIG_fail_ptr("new_SOPI_grey256",1,SWIGTYPE_p_inlib__SOPI__grey256); } 
  result = (inlib::SOPI::grey256 *)new inlib::SOPI::grey256((inlib::SOPI::grey256 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__grey256,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_grey256(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_grey256__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__grey256, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_grey256__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_grey256'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::grey256::grey256()\n" "    inlib::SOPI::grey256::grey256(inlib::SOPI::grey256 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_grey256(void *obj) {
inlib::SOPI::grey256 *arg1 = (inlib::SOPI::grey256 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_grey256(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_grey256);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_grey256_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_grey256_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_grey256_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_grey256_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_grey256_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_grey256_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_grey256_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_grey256_Sf_SwigStatic = {
    "SOPI_grey256",
    swig_SOPI_grey256_Sf_SwigStatic_methods,
    swig_SOPI_grey256_Sf_SwigStatic_attributes,
    swig_SOPI_grey256_Sf_SwigStatic_constants,
    swig_SOPI_grey256_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_grey256_bases[] = {0,0};
static const char *swig_SOPI_grey256_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_grey256 = { "SOPI_grey256", "SOPI_grey256", &SWIGTYPE_p_inlib__SOPI__grey256,_proxy__wrap_new_SOPI_grey256, swig_delete_SOPI_grey256, swig_SOPI_grey256_methods, swig_SOPI_grey256_attributes, &swig_SOPI_grey256_Sf_SwigStatic, swig_SOPI_grey256_meta, swig_SOPI_grey256_bases, swig_SOPI_grey256_base_names };

static int _wrap_new_SOPI_col16__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::col16 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::col16::col16",0,0) result = (inlib::SOPI::col16 *)new inlib::SOPI::col16();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__col16,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_col16__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::col16 *arg1 = 0 ;
  inlib::SOPI::col16 *result = 0 ; SWIG_check_num_args("inlib::SOPI::col16::col16",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::col16::col16",1,"inlib::SOPI::col16 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__col16,0))){
    SWIG_fail_ptr("new_SOPI_col16",1,SWIGTYPE_p_inlib__SOPI__col16); } 
  result = (inlib::SOPI::col16 *)new inlib::SOPI::col16((inlib::SOPI::col16 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__col16,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_col16(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_col16__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__col16, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_col16__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_col16'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::col16::col16()\n" "    inlib::SOPI::col16::col16(inlib::SOPI::col16 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_col16(void *obj) {
inlib::SOPI::col16 *arg1 = (inlib::SOPI::col16 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_col16(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_col16);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_col16_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_col16_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_col16_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_col16_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_col16_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_col16_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_col16_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_col16_Sf_SwigStatic = {
    "SOPI_col16",
    swig_SOPI_col16_Sf_SwigStatic_methods,
    swig_SOPI_col16_Sf_SwigStatic_attributes,
    swig_SOPI_col16_Sf_SwigStatic_constants,
    swig_SOPI_col16_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_col16_bases[] = {0,0};
static const char *swig_SOPI_col16_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_col16 = { "SOPI_col16", "SOPI_col16", &SWIGTYPE_p_inlib__SOPI__col16,_proxy__wrap_new_SOPI_col16, swig_delete_SOPI_col16, swig_SOPI_col16_methods, swig_SOPI_col16_attributes, &swig_SOPI_col16_Sf_SwigStatic, swig_SOPI_col16_meta, swig_SOPI_col16_bases, swig_SOPI_col16_base_names };

static int _wrap_new_SOPI_colrj32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrj32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::colrj32::colrj32",0,0) result = (inlib::SOPI::colrj32 *)new inlib::SOPI::colrj32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrj32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrj32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrj32 *arg1 = 0 ;
  inlib::SOPI::colrj32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::colrj32::colrj32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::colrj32::colrj32",1,"inlib::SOPI::colrj32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__colrj32,0))){
    SWIG_fail_ptr("new_SOPI_colrj32",1,SWIGTYPE_p_inlib__SOPI__colrj32); } 
  result = (inlib::SOPI::colrj32 *)new inlib::SOPI::colrj32((inlib::SOPI::colrj32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrj32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrj32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_colrj32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__colrj32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_colrj32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_colrj32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::colrj32::colrj32()\n" "    inlib::SOPI::colrj32::colrj32(inlib::SOPI::colrj32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_colrj32(void *obj) {
inlib::SOPI::colrj32 *arg1 = (inlib::SOPI::colrj32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_colrj32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_colrj32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_colrj32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_colrj32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_colrj32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_colrj32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_colrj32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_colrj32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_colrj32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_colrj32_Sf_SwigStatic = {
    "SOPI_colrj32",
    swig_SOPI_colrj32_Sf_SwigStatic_methods,
    swig_SOPI_colrj32_Sf_SwigStatic_attributes,
    swig_SOPI_colrj32_Sf_SwigStatic_constants,
    swig_SOPI_colrj32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_colrj32_bases[] = {0,0};
static const char *swig_SOPI_colrj32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_colrj32 = { "SOPI_colrj32", "SOPI_colrj32", &SWIGTYPE_p_inlib__SOPI__colrj32,_proxy__wrap_new_SOPI_colrj32, swig_delete_SOPI_colrj32, swig_SOPI_colrj32_methods, swig_SOPI_colrj32_attributes, &swig_SOPI_colrj32_Sf_SwigStatic, swig_SOPI_colrj32_meta, swig_SOPI_colrj32_bases, swig_SOPI_colrj32_base_names };

static int _wrap_new_SOPI_colbr32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colbr32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::colbr32::colbr32",0,0) result = (inlib::SOPI::colbr32 *)new inlib::SOPI::colbr32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colbr32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colbr32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colbr32 *arg1 = 0 ;
  inlib::SOPI::colbr32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::colbr32::colbr32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::colbr32::colbr32",1,"inlib::SOPI::colbr32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__colbr32,0))){
    SWIG_fail_ptr("new_SOPI_colbr32",1,SWIGTYPE_p_inlib__SOPI__colbr32); } 
  result = (inlib::SOPI::colbr32 *)new inlib::SOPI::colbr32((inlib::SOPI::colbr32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colbr32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colbr32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_colbr32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__colbr32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_colbr32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_colbr32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::colbr32::colbr32()\n" "    inlib::SOPI::colbr32::colbr32(inlib::SOPI::colbr32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_colbr32(void *obj) {
inlib::SOPI::colbr32 *arg1 = (inlib::SOPI::colbr32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_colbr32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_colbr32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_colbr32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_colbr32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_colbr32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_colbr32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_colbr32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_colbr32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_colbr32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_colbr32_Sf_SwigStatic = {
    "SOPI_colbr32",
    swig_SOPI_colbr32_Sf_SwigStatic_methods,
    swig_SOPI_colbr32_Sf_SwigStatic_attributes,
    swig_SOPI_colbr32_Sf_SwigStatic_constants,
    swig_SOPI_colbr32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_colbr32_bases[] = {0,0};
static const char *swig_SOPI_colbr32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_colbr32 = { "SOPI_colbr32", "SOPI_colbr32", &SWIGTYPE_p_inlib__SOPI__colbr32,_proxy__wrap_new_SOPI_colbr32, swig_delete_SOPI_colbr32, swig_SOPI_colbr32_methods, swig_SOPI_colbr32_attributes, &swig_SOPI_colbr32_Sf_SwigStatic, swig_SOPI_colbr32_meta, swig_SOPI_colbr32_bases, swig_SOPI_colbr32_base_names };

static int _wrap_new_SOPI_colrv32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrv32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::colrv32::colrv32",0,0) result = (inlib::SOPI::colrv32 *)new inlib::SOPI::colrv32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrv32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrv32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrv32 *arg1 = 0 ;
  inlib::SOPI::colrv32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::colrv32::colrv32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::colrv32::colrv32",1,"inlib::SOPI::colrv32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__colrv32,0))){
    SWIG_fail_ptr("new_SOPI_colrv32",1,SWIGTYPE_p_inlib__SOPI__colrv32); } 
  result = (inlib::SOPI::colrv32 *)new inlib::SOPI::colrv32((inlib::SOPI::colrv32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrv32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrv32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_colrv32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__colrv32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_colrv32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_colrv32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::colrv32::colrv32()\n" "    inlib::SOPI::colrv32::colrv32(inlib::SOPI::colrv32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_colrv32(void *obj) {
inlib::SOPI::colrv32 *arg1 = (inlib::SOPI::colrv32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_colrv32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_colrv32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_colrv32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_colrv32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_colrv32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_colrv32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_colrv32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_colrv32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_colrv32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_colrv32_Sf_SwigStatic = {
    "SOPI_colrv32",
    swig_SOPI_colrv32_Sf_SwigStatic_methods,
    swig_SOPI_colrv32_Sf_SwigStatic_attributes,
    swig_SOPI_colrv32_Sf_SwigStatic_constants,
    swig_SOPI_colrv32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_colrv32_bases[] = {0,0};
static const char *swig_SOPI_colrv32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_colrv32 = { "SOPI_colrv32", "SOPI_colrv32", &SWIGTYPE_p_inlib__SOPI__colrv32,_proxy__wrap_new_SOPI_colrv32, swig_delete_SOPI_colrv32, swig_SOPI_colrv32_methods, swig_SOPI_colrv32_attributes, &swig_SOPI_colrv32_Sf_SwigStatic, swig_SOPI_colrv32_meta, swig_SOPI_colrv32_bases, swig_SOPI_colrv32_base_names };

static int _wrap_new_SOPI_colrj128__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrj128 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::colrj128::colrj128",0,0) result = (inlib::SOPI::colrj128 *)new inlib::SOPI::colrj128();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrj128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrj128__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colrj128 *arg1 = 0 ;
  inlib::SOPI::colrj128 *result = 0 ; SWIG_check_num_args("inlib::SOPI::colrj128::colrj128",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::colrj128::colrj128",1,"inlib::SOPI::colrj128 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__colrj128,0))){
    SWIG_fail_ptr("new_SOPI_colrj128",1,SWIGTYPE_p_inlib__SOPI__colrj128); } 
  result = (inlib::SOPI::colrj128 *)new inlib::SOPI::colrj128((inlib::SOPI::colrj128 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colrj128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colrj128(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_colrj128__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__colrj128, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_colrj128__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_colrj128'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::colrj128::colrj128()\n" "    inlib::SOPI::colrj128::colrj128(inlib::SOPI::colrj128 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_colrj128(void *obj) {
inlib::SOPI::colrj128 *arg1 = (inlib::SOPI::colrj128 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_colrj128(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_colrj128);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_colrj128_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_colrj128_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_colrj128_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_colrj128_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_colrj128_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_colrj128_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_colrj128_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_colrj128_Sf_SwigStatic = {
    "SOPI_colrj128",
    swig_SOPI_colrj128_Sf_SwigStatic_methods,
    swig_SOPI_colrj128_Sf_SwigStatic_attributes,
    swig_SOPI_colrj128_Sf_SwigStatic_constants,
    swig_SOPI_colrj128_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_colrj128_bases[] = {0,0};
static const char *swig_SOPI_colrj128_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_colrj128 = { "SOPI_colrj128", "SOPI_colrj128", &SWIGTYPE_p_inlib__SOPI__colrj128,_proxy__wrap_new_SOPI_colrj128, swig_delete_SOPI_colrj128, swig_SOPI_colrj128_methods, swig_SOPI_colrj128_attributes, &swig_SOPI_colrj128_Sf_SwigStatic, swig_SOPI_colrj128_meta, swig_SOPI_colrj128_bases, swig_SOPI_colrj128_base_names };

static int _wrap_new_SOPI_colbr128__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colbr128 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::colbr128::colbr128",0,0) result = (inlib::SOPI::colbr128 *)new inlib::SOPI::colbr128();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colbr128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colbr128__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::colbr128 *arg1 = 0 ;
  inlib::SOPI::colbr128 *result = 0 ; SWIG_check_num_args("inlib::SOPI::colbr128::colbr128",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::colbr128::colbr128",1,"inlib::SOPI::colbr128 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__colbr128,0))){
    SWIG_fail_ptr("new_SOPI_colbr128",1,SWIGTYPE_p_inlib__SOPI__colbr128); } 
  result = (inlib::SOPI::colbr128 *)new inlib::SOPI::colbr128((inlib::SOPI::colbr128 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__colbr128,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_colbr128(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_colbr128__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__colbr128, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_colbr128__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_colbr128'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::colbr128::colbr128()\n" "    inlib::SOPI::colbr128::colbr128(inlib::SOPI::colbr128 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_colbr128(void *obj) {
inlib::SOPI::colbr128 *arg1 = (inlib::SOPI::colbr128 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_colbr128(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_colbr128);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_colbr128_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_colbr128_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_colbr128_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_colbr128_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_colbr128_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_colbr128_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_colbr128_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_colbr128_Sf_SwigStatic = {
    "SOPI_colbr128",
    swig_SOPI_colbr128_Sf_SwigStatic_methods,
    swig_SOPI_colbr128_Sf_SwigStatic_attributes,
    swig_SOPI_colbr128_Sf_SwigStatic_constants,
    swig_SOPI_colbr128_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_colbr128_bases[] = {0,0};
static const char *swig_SOPI_colbr128_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_colbr128 = { "SOPI_colbr128", "SOPI_colbr128", &SWIGTYPE_p_inlib__SOPI__colbr128,_proxy__wrap_new_SOPI_colbr128, swig_delete_SOPI_colbr128, swig_SOPI_colbr128_methods, swig_SOPI_colbr128_attributes, &swig_SOPI_colbr128_Sf_SwigStatic, swig_SOPI_colbr128_meta, swig_SOPI_colbr128_bases, swig_SOPI_colbr128_base_names };

static int _wrap_new_SOPI_red32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::red32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::red32::red32",0,0) result = (inlib::SOPI::red32 *)new inlib::SOPI::red32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__red32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_red32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::red32 *arg1 = 0 ;
  inlib::SOPI::red32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::red32::red32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::red32::red32",1,"inlib::SOPI::red32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__red32,0))){
    SWIG_fail_ptr("new_SOPI_red32",1,SWIGTYPE_p_inlib__SOPI__red32); } 
  result = (inlib::SOPI::red32 *)new inlib::SOPI::red32((inlib::SOPI::red32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__red32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_red32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_red32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__red32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_red32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_red32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::red32::red32()\n" "    inlib::SOPI::red32::red32(inlib::SOPI::red32 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_red32(void *obj) {
inlib::SOPI::red32 *arg1 = (inlib::SOPI::red32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_red32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_red32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_red32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_red32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_red32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_red32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_red32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_red32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_red32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_red32_Sf_SwigStatic = {
    "SOPI_red32",
    swig_SOPI_red32_Sf_SwigStatic_methods,
    swig_SOPI_red32_Sf_SwigStatic_attributes,
    swig_SOPI_red32_Sf_SwigStatic_constants,
    swig_SOPI_red32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_red32_bases[] = {0,0};
static const char *swig_SOPI_red32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_red32 = { "SOPI_red32", "SOPI_red32", &SWIGTYPE_p_inlib__SOPI__red32,_proxy__wrap_new_SOPI_red32, swig_delete_SOPI_red32, swig_SOPI_red32_methods, swig_SOPI_red32_attributes, &swig_SOPI_red32_Sf_SwigStatic, swig_SOPI_red32_meta, swig_SOPI_red32_bases, swig_SOPI_red32_base_names };

static int _wrap_new_SOPI_green32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::green32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::green32::green32",0,0) result = (inlib::SOPI::green32 *)new inlib::SOPI::green32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__green32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_green32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::green32 *arg1 = 0 ;
  inlib::SOPI::green32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::green32::green32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::green32::green32",1,"inlib::SOPI::green32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__green32,0))){
    SWIG_fail_ptr("new_SOPI_green32",1,SWIGTYPE_p_inlib__SOPI__green32); } 
  result = (inlib::SOPI::green32 *)new inlib::SOPI::green32((inlib::SOPI::green32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__green32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_green32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_green32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__green32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_green32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_green32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::green32::green32()\n" "    inlib::SOPI::green32::green32(inlib::SOPI::green32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_green32(void *obj) {
inlib::SOPI::green32 *arg1 = (inlib::SOPI::green32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_green32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_green32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_green32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_green32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_green32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_green32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_green32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_green32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_green32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_green32_Sf_SwigStatic = {
    "SOPI_green32",
    swig_SOPI_green32_Sf_SwigStatic_methods,
    swig_SOPI_green32_Sf_SwigStatic_attributes,
    swig_SOPI_green32_Sf_SwigStatic_constants,
    swig_SOPI_green32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_green32_bases[] = {0,0};
static const char *swig_SOPI_green32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_green32 = { "SOPI_green32", "SOPI_green32", &SWIGTYPE_p_inlib__SOPI__green32,_proxy__wrap_new_SOPI_green32, swig_delete_SOPI_green32, swig_SOPI_green32_methods, swig_SOPI_green32_attributes, &swig_SOPI_green32_Sf_SwigStatic, swig_SOPI_green32_meta, swig_SOPI_green32_bases, swig_SOPI_green32_base_names };

static int _wrap_new_SOPI_blue32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::blue32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::blue32::blue32",0,0) result = (inlib::SOPI::blue32 *)new inlib::SOPI::blue32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__blue32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_blue32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::blue32 *arg1 = 0 ;
  inlib::SOPI::blue32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::blue32::blue32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::blue32::blue32",1,"inlib::SOPI::blue32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__blue32,0))){
    SWIG_fail_ptr("new_SOPI_blue32",1,SWIGTYPE_p_inlib__SOPI__blue32); } 
  result = (inlib::SOPI::blue32 *)new inlib::SOPI::blue32((inlib::SOPI::blue32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__blue32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_blue32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_blue32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__blue32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_blue32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_blue32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::blue32::blue32()\n" "    inlib::SOPI::blue32::blue32(inlib::SOPI::blue32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_blue32(void *obj) {
inlib::SOPI::blue32 *arg1 = (inlib::SOPI::blue32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_blue32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_blue32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_blue32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_blue32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_blue32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_blue32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_blue32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_blue32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_blue32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_blue32_Sf_SwigStatic = {
    "SOPI_blue32",
    swig_SOPI_blue32_Sf_SwigStatic_methods,
    swig_SOPI_blue32_Sf_SwigStatic_attributes,
    swig_SOPI_blue32_Sf_SwigStatic_constants,
    swig_SOPI_blue32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_blue32_bases[] = {0,0};
static const char *swig_SOPI_blue32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_blue32 = { "SOPI_blue32", "SOPI_blue32", &SWIGTYPE_p_inlib__SOPI__blue32,_proxy__wrap_new_SOPI_blue32, swig_delete_SOPI_blue32, swig_SOPI_blue32_methods, swig_SOPI_blue32_attributes, &swig_SOPI_blue32_Sf_SwigStatic, swig_SOPI_blue32_meta, swig_SOPI_blue32_bases, swig_SOPI_blue32_base_names };

static int _wrap_new_SOPI_yellow32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::yellow32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::yellow32::yellow32",0,0) result = (inlib::SOPI::yellow32 *)new inlib::SOPI::yellow32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__yellow32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_yellow32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::yellow32 *arg1 = 0 ;
  inlib::SOPI::yellow32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::yellow32::yellow32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::yellow32::yellow32",1,"inlib::SOPI::yellow32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__yellow32,0))){
    SWIG_fail_ptr("new_SOPI_yellow32",1,SWIGTYPE_p_inlib__SOPI__yellow32); } 
  result = (inlib::SOPI::yellow32 *)new inlib::SOPI::yellow32((inlib::SOPI::yellow32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__yellow32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_yellow32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_yellow32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__yellow32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_yellow32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_yellow32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::yellow32::yellow32()\n" "    inlib::SOPI::yellow32::yellow32(inlib::SOPI::yellow32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_yellow32(void *obj) {
inlib::SOPI::yellow32 *arg1 = (inlib::SOPI::yellow32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_yellow32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_yellow32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_yellow32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_yellow32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_yellow32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_yellow32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_yellow32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_yellow32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_yellow32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_yellow32_Sf_SwigStatic = {
    "SOPI_yellow32",
    swig_SOPI_yellow32_Sf_SwigStatic_methods,
    swig_SOPI_yellow32_Sf_SwigStatic_attributes,
    swig_SOPI_yellow32_Sf_SwigStatic_constants,
    swig_SOPI_yellow32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_yellow32_bases[] = {0,0};
static const char *swig_SOPI_yellow32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_yellow32 = { "SOPI_yellow32", "SOPI_yellow32", &SWIGTYPE_p_inlib__SOPI__yellow32,_proxy__wrap_new_SOPI_yellow32, swig_delete_SOPI_yellow32, swig_SOPI_yellow32_methods, swig_SOPI_yellow32_attributes, &swig_SOPI_yellow32_Sf_SwigStatic, swig_SOPI_yellow32_meta, swig_SOPI_yellow32_bases, swig_SOPI_yellow32_base_names };

static int _wrap_new_SOPI_orange32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::orange32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::orange32::orange32",0,0) result = (inlib::SOPI::orange32 *)new inlib::SOPI::orange32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__orange32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_orange32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::orange32 *arg1 = 0 ;
  inlib::SOPI::orange32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::orange32::orange32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::orange32::orange32",1,"inlib::SOPI::orange32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__orange32,0))){
    SWIG_fail_ptr("new_SOPI_orange32",1,SWIGTYPE_p_inlib__SOPI__orange32); } 
  result = (inlib::SOPI::orange32 *)new inlib::SOPI::orange32((inlib::SOPI::orange32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__orange32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_orange32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_orange32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__orange32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_orange32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_orange32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::orange32::orange32()\n" "    inlib::SOPI::orange32::orange32(inlib::SOPI::orange32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_orange32(void *obj) {
inlib::SOPI::orange32 *arg1 = (inlib::SOPI::orange32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_orange32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_orange32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_orange32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_orange32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_orange32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_orange32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_orange32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_orange32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_orange32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_orange32_Sf_SwigStatic = {
    "SOPI_orange32",
    swig_SOPI_orange32_Sf_SwigStatic_methods,
    swig_SOPI_orange32_Sf_SwigStatic_attributes,
    swig_SOPI_orange32_Sf_SwigStatic_constants,
    swig_SOPI_orange32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_orange32_bases[] = {0,0};
static const char *swig_SOPI_orange32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_orange32 = { "SOPI_orange32", "SOPI_orange32", &SWIGTYPE_p_inlib__SOPI__orange32,_proxy__wrap_new_SOPI_orange32, swig_delete_SOPI_orange32, swig_SOPI_orange32_methods, swig_SOPI_orange32_attributes, &swig_SOPI_orange32_Sf_SwigStatic, swig_SOPI_orange32_meta, swig_SOPI_orange32_bases, swig_SOPI_orange32_base_names };

static int _wrap_new_SOPI_cyan32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::cyan32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::cyan32::cyan32",0,0) result = (inlib::SOPI::cyan32 *)new inlib::SOPI::cyan32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__cyan32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_cyan32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::cyan32 *arg1 = 0 ;
  inlib::SOPI::cyan32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::cyan32::cyan32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::cyan32::cyan32",1,"inlib::SOPI::cyan32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__cyan32,0))){
    SWIG_fail_ptr("new_SOPI_cyan32",1,SWIGTYPE_p_inlib__SOPI__cyan32); } 
  result = (inlib::SOPI::cyan32 *)new inlib::SOPI::cyan32((inlib::SOPI::cyan32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__cyan32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_cyan32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_cyan32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__cyan32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_cyan32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_cyan32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::cyan32::cyan32()\n" "    inlib::SOPI::cyan32::cyan32(inlib::SOPI::cyan32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_cyan32(void *obj) {
inlib::SOPI::cyan32 *arg1 = (inlib::SOPI::cyan32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_cyan32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_cyan32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_cyan32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_cyan32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_cyan32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_cyan32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_cyan32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_cyan32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_cyan32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_cyan32_Sf_SwigStatic = {
    "SOPI_cyan32",
    swig_SOPI_cyan32_Sf_SwigStatic_methods,
    swig_SOPI_cyan32_Sf_SwigStatic_attributes,
    swig_SOPI_cyan32_Sf_SwigStatic_constants,
    swig_SOPI_cyan32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_cyan32_bases[] = {0,0};
static const char *swig_SOPI_cyan32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_cyan32 = { "SOPI_cyan32", "SOPI_cyan32", &SWIGTYPE_p_inlib__SOPI__cyan32,_proxy__wrap_new_SOPI_cyan32, swig_delete_SOPI_cyan32, swig_SOPI_cyan32_methods, swig_SOPI_cyan32_attributes, &swig_SOPI_cyan32_Sf_SwigStatic, swig_SOPI_cyan32_meta, swig_SOPI_cyan32_bases, swig_SOPI_cyan32_base_names };

static int _wrap_new_SOPI_violet32__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::violet32 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::violet32::violet32",0,0) result = (inlib::SOPI::violet32 *)new inlib::SOPI::violet32();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__violet32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_violet32__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::violet32 *arg1 = 0 ;
  inlib::SOPI::violet32 *result = 0 ; SWIG_check_num_args("inlib::SOPI::violet32::violet32",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::violet32::violet32",1,"inlib::SOPI::violet32 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__violet32,0))){
    SWIG_fail_ptr("new_SOPI_violet32",1,SWIGTYPE_p_inlib__SOPI__violet32); } 
  result = (inlib::SOPI::violet32 *)new inlib::SOPI::violet32((inlib::SOPI::violet32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__violet32,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_violet32(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_violet32__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__violet32, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_violet32__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_violet32'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::violet32::violet32()\n" "    inlib::SOPI::violet32::violet32(inlib::SOPI::violet32 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_violet32(void *obj) {
inlib::SOPI::violet32 *arg1 = (inlib::SOPI::violet32 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_violet32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_violet32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_violet32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_violet32_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_violet32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_violet32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_violet32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_violet32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_violet32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_violet32_Sf_SwigStatic = {
    "SOPI_violet32",
    swig_SOPI_violet32_Sf_SwigStatic_methods,
    swig_SOPI_violet32_Sf_SwigStatic_attributes,
    swig_SOPI_violet32_Sf_SwigStatic_constants,
    swig_SOPI_violet32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_violet32_bases[] = {0,0};
static const char *swig_SOPI_violet32_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_violet32 = { "SOPI_violet32", "SOPI_violet32", &SWIGTYPE_p_inlib__SOPI__violet32,_proxy__wrap_new_SOPI_violet32, swig_delete_SOPI_violet32, swig_SOPI_violet32_methods, swig_SOPI_violet32_attributes, &swig_SOPI_violet32_Sf_SwigStatic, swig_SOPI_violet32_meta, swig_SOPI_violet32_bases, swig_SOPI_violet32_base_names };

static int _wrap_new_SOPI_col64__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::col64 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::col64::col64",0,0) result = (inlib::SOPI::col64 *)new inlib::SOPI::col64();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__col64,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_col64__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::col64 *arg1 = 0 ;
  inlib::SOPI::col64 *result = 0 ; SWIG_check_num_args("inlib::SOPI::col64::col64",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::col64::col64",1,"inlib::SOPI::col64 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__col64,0))){
    SWIG_fail_ptr("new_SOPI_col64",1,SWIGTYPE_p_inlib__SOPI__col64); } 
  result = (inlib::SOPI::col64 *)new inlib::SOPI::col64((inlib::SOPI::col64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__col64,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_col64(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_col64__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__col64, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_col64__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_col64'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::col64::col64()\n" "    inlib::SOPI::col64::col64(inlib::SOPI::col64 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_col64(void *obj) {
inlib::SOPI::col64 *arg1 = (inlib::SOPI::col64 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_col64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_col64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_col64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_col64_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_col64_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_col64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_col64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_col64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_col64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_col64_Sf_SwigStatic = {
    "SOPI_col64",
    swig_SOPI_col64_Sf_SwigStatic_methods,
    swig_SOPI_col64_Sf_SwigStatic_attributes,
    swig_SOPI_col64_Sf_SwigStatic_constants,
    swig_SOPI_col64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_col64_bases[] = {0,0};
static const char *swig_SOPI_col64_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_col64 = { "SOPI_col64", "SOPI_col64", &SWIGTYPE_p_inlib__SOPI__col64,_proxy__wrap_new_SOPI_col64, swig_delete_SOPI_col64, swig_SOPI_col64_methods, swig_SOPI_col64_attributes, &swig_SOPI_col64_Sf_SwigStatic, swig_SOPI_col64_meta, swig_SOPI_col64_bases, swig_SOPI_col64_base_names };

static int _wrap_new_SOPI_rgb216__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb216 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::rgb216::rgb216",0,0) result = (inlib::SOPI::rgb216 *)new inlib::SOPI::rgb216();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb216,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb216__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb216 *arg1 = 0 ;
  inlib::SOPI::rgb216 *result = 0 ; SWIG_check_num_args("inlib::SOPI::rgb216::rgb216",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::rgb216::rgb216",1,"inlib::SOPI::rgb216 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__rgb216,0))){
    SWIG_fail_ptr("new_SOPI_rgb216",1,SWIGTYPE_p_inlib__SOPI__rgb216); } 
  result = (inlib::SOPI::rgb216 *)new inlib::SOPI::rgb216((inlib::SOPI::rgb216 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb216,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb216(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_rgb216__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__rgb216, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_rgb216__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_rgb216'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::rgb216::rgb216()\n" "    inlib::SOPI::rgb216::rgb216(inlib::SOPI::rgb216 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_rgb216(void *obj) {
inlib::SOPI::rgb216 *arg1 = (inlib::SOPI::rgb216 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_rgb216(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_rgb216);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_rgb216_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_rgb216_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_rgb216_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_rgb216_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_rgb216_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_rgb216_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_rgb216_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_rgb216_Sf_SwigStatic = {
    "SOPI_rgb216",
    swig_SOPI_rgb216_Sf_SwigStatic_methods,
    swig_SOPI_rgb216_Sf_SwigStatic_attributes,
    swig_SOPI_rgb216_Sf_SwigStatic_constants,
    swig_SOPI_rgb216_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_rgb216_bases[] = {0,0};
static const char *swig_SOPI_rgb216_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_rgb216 = { "SOPI_rgb216", "SOPI_rgb216", &SWIGTYPE_p_inlib__SOPI__rgb216,_proxy__wrap_new_SOPI_rgb216, swig_delete_SOPI_rgb216, swig_SOPI_rgb216_methods, swig_SOPI_rgb216_attributes, &swig_SOPI_rgb216_Sf_SwigStatic, swig_SOPI_rgb216_meta, swig_SOPI_rgb216_bases, swig_SOPI_rgb216_base_names };

static int _wrap_new_SOPI_rgb512__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb512 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::rgb512::rgb512",0,0) result = (inlib::SOPI::rgb512 *)new inlib::SOPI::rgb512();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb512,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb512__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb512 *arg1 = 0 ;
  inlib::SOPI::rgb512 *result = 0 ; SWIG_check_num_args("inlib::SOPI::rgb512::rgb512",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::rgb512::rgb512",1,"inlib::SOPI::rgb512 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__rgb512,0))){
    SWIG_fail_ptr("new_SOPI_rgb512",1,SWIGTYPE_p_inlib__SOPI__rgb512); } 
  result = (inlib::SOPI::rgb512 *)new inlib::SOPI::rgb512((inlib::SOPI::rgb512 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb512,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb512(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_rgb512__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__rgb512, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_rgb512__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_rgb512'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::rgb512::rgb512()\n" "    inlib::SOPI::rgb512::rgb512(inlib::SOPI::rgb512 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_rgb512(void *obj) {
inlib::SOPI::rgb512 *arg1 = (inlib::SOPI::rgb512 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_rgb512(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_rgb512);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_rgb512_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_rgb512_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_rgb512_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_rgb512_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_rgb512_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_rgb512_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_rgb512_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_rgb512_Sf_SwigStatic = {
    "SOPI_rgb512",
    swig_SOPI_rgb512_Sf_SwigStatic_methods,
    swig_SOPI_rgb512_Sf_SwigStatic_attributes,
    swig_SOPI_rgb512_Sf_SwigStatic_constants,
    swig_SOPI_rgb512_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_rgb512_bases[] = {0,0};
static const char *swig_SOPI_rgb512_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_rgb512 = { "SOPI_rgb512", "SOPI_rgb512", &SWIGTYPE_p_inlib__SOPI__rgb512,_proxy__wrap_new_SOPI_rgb512, swig_delete_SOPI_rgb512, swig_SOPI_rgb512_methods, swig_SOPI_rgb512_attributes, &swig_SOPI_rgb512_Sf_SwigStatic, swig_SOPI_rgb512_meta, swig_SOPI_rgb512_bases, swig_SOPI_rgb512_base_names };

static int _wrap_new_SOPI_rgb4096__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb4096 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::rgb4096::rgb4096",0,0) result = (inlib::SOPI::rgb4096 *)new inlib::SOPI::rgb4096();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb4096,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb4096__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb4096 *arg1 = 0 ;
  inlib::SOPI::rgb4096 *result = 0 ; SWIG_check_num_args("inlib::SOPI::rgb4096::rgb4096",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::rgb4096::rgb4096",1,"inlib::SOPI::rgb4096 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__rgb4096,0))){
    SWIG_fail_ptr("new_SOPI_rgb4096",1,SWIGTYPE_p_inlib__SOPI__rgb4096); } 
  result = (inlib::SOPI::rgb4096 *)new inlib::SOPI::rgb4096((inlib::SOPI::rgb4096 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb4096,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb4096(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_rgb4096__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__rgb4096, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_rgb4096__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_rgb4096'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::rgb4096::rgb4096()\n" "    inlib::SOPI::rgb4096::rgb4096(inlib::SOPI::rgb4096 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_rgb4096(void *obj) {
inlib::SOPI::rgb4096 *arg1 = (inlib::SOPI::rgb4096 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_rgb4096(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_rgb4096);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_rgb4096_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_rgb4096_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_rgb4096_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_rgb4096_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_rgb4096_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_rgb4096_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_rgb4096_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_rgb4096_Sf_SwigStatic = {
    "SOPI_rgb4096",
    swig_SOPI_rgb4096_Sf_SwigStatic_methods,
    swig_SOPI_rgb4096_Sf_SwigStatic_attributes,
    swig_SOPI_rgb4096_Sf_SwigStatic_constants,
    swig_SOPI_rgb4096_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_rgb4096_bases[] = {0,0};
static const char *swig_SOPI_rgb4096_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_rgb4096 = { "SOPI_rgb4096", "SOPI_rgb4096", &SWIGTYPE_p_inlib__SOPI__rgb4096,_proxy__wrap_new_SOPI_rgb4096, swig_delete_SOPI_rgb4096, swig_SOPI_rgb4096_methods, swig_SOPI_rgb4096_attributes, &swig_SOPI_rgb4096_Sf_SwigStatic, swig_SOPI_rgb4096_meta, swig_SOPI_rgb4096_bases, swig_SOPI_rgb4096_base_names };

static int _wrap_new_SOPI_rgb32768__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb32768 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::rgb32768::rgb32768",0,0) result = (inlib::SOPI::rgb32768 *)new inlib::SOPI::rgb32768();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb32768,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb32768__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::rgb32768 *arg1 = 0 ;
  inlib::SOPI::rgb32768 *result = 0 ; SWIG_check_num_args("inlib::SOPI::rgb32768::rgb32768",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::rgb32768::rgb32768",1,"inlib::SOPI::rgb32768 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__rgb32768,0))){
    SWIG_fail_ptr("new_SOPI_rgb32768",1,SWIGTYPE_p_inlib__SOPI__rgb32768); } 
  result = (inlib::SOPI::rgb32768 *)new inlib::SOPI::rgb32768((inlib::SOPI::rgb32768 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__rgb32768,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_rgb32768(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_rgb32768__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__rgb32768, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_rgb32768__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_rgb32768'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::SOPI::rgb32768::rgb32768()\n" "    inlib::SOPI::rgb32768::rgb32768(inlib::SOPI::rgb32768 const &)\n");
  lua_error(L);return 0; }
static void swig_delete_SOPI_rgb32768(void *obj) {
inlib::SOPI::rgb32768 *arg1 = (inlib::SOPI::rgb32768 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_rgb32768(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_rgb32768);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_rgb32768_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_rgb32768_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_rgb32768_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_rgb32768_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_rgb32768_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_rgb32768_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_rgb32768_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_rgb32768_Sf_SwigStatic = {
    "SOPI_rgb32768",
    swig_SOPI_rgb32768_Sf_SwigStatic_methods,
    swig_SOPI_rgb32768_Sf_SwigStatic_attributes,
    swig_SOPI_rgb32768_Sf_SwigStatic_constants,
    swig_SOPI_rgb32768_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_rgb32768_bases[] = {0,0};
static const char *swig_SOPI_rgb32768_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_rgb32768 = { "SOPI_rgb32768", "SOPI_rgb32768", &SWIGTYPE_p_inlib__SOPI__rgb32768,_proxy__wrap_new_SOPI_rgb32768, swig_delete_SOPI_rgb32768, swig_SOPI_rgb32768_methods, swig_SOPI_rgb32768_attributes, &swig_SOPI_rgb32768_Sf_SwigStatic, swig_SOPI_rgb32768_meta, swig_SOPI_rgb32768_bases, swig_SOPI_rgb32768_base_names };

static int _wrap_new_SOPI_midas_pastel__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_pastel *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_pastel::midas_pastel",0,0)
  result = (inlib::SOPI::midas_pastel *)new inlib::SOPI::midas_pastel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_pastel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_pastel__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_pastel *arg1 = 0 ;
  inlib::SOPI::midas_pastel *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_pastel::midas_pastel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_pastel::midas_pastel",1,"inlib::SOPI::midas_pastel const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_pastel,0))){
    SWIG_fail_ptr("new_SOPI_midas_pastel",1,SWIGTYPE_p_inlib__SOPI__midas_pastel); } 
  result = (inlib::SOPI::midas_pastel *)new inlib::SOPI::midas_pastel((inlib::SOPI::midas_pastel const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_pastel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_pastel(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_pastel__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_pastel, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_pastel__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_pastel'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_pastel::midas_pastel()\n"
  "    inlib::SOPI::midas_pastel::midas_pastel(inlib::SOPI::midas_pastel const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_pastel(void *obj) {
inlib::SOPI::midas_pastel *arg1 = (inlib::SOPI::midas_pastel *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_pastel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_pastel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_pastel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_pastel_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_pastel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_pastel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_pastel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_pastel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_pastel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_pastel_Sf_SwigStatic = {
    "SOPI_midas_pastel",
    swig_SOPI_midas_pastel_Sf_SwigStatic_methods,
    swig_SOPI_midas_pastel_Sf_SwigStatic_attributes,
    swig_SOPI_midas_pastel_Sf_SwigStatic_constants,
    swig_SOPI_midas_pastel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_pastel_bases[] = {0,0};
static const char *swig_SOPI_midas_pastel_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_pastel = { "SOPI_midas_pastel", "SOPI_midas_pastel", &SWIGTYPE_p_inlib__SOPI__midas_pastel,_proxy__wrap_new_SOPI_midas_pastel, swig_delete_SOPI_midas_pastel, swig_SOPI_midas_pastel_methods, swig_SOPI_midas_pastel_attributes, &swig_SOPI_midas_pastel_Sf_SwigStatic, swig_SOPI_midas_pastel_meta, swig_SOPI_midas_pastel_bases, swig_SOPI_midas_pastel_base_names };

static int _wrap_new_SOPI_midas_heat__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_heat *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_heat::midas_heat",0,0)
  result = (inlib::SOPI::midas_heat *)new inlib::SOPI::midas_heat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_heat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_heat__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_heat *arg1 = 0 ;
  inlib::SOPI::midas_heat *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_heat::midas_heat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_heat::midas_heat",1,"inlib::SOPI::midas_heat const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_heat,0))){
    SWIG_fail_ptr("new_SOPI_midas_heat",1,SWIGTYPE_p_inlib__SOPI__midas_heat); } 
  result = (inlib::SOPI::midas_heat *)new inlib::SOPI::midas_heat((inlib::SOPI::midas_heat const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_heat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_heat(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_heat__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_heat, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_heat__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_heat'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_heat::midas_heat()\n"
  "    inlib::SOPI::midas_heat::midas_heat(inlib::SOPI::midas_heat const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_heat(void *obj) {
inlib::SOPI::midas_heat *arg1 = (inlib::SOPI::midas_heat *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_heat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_heat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_heat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_heat_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_heat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_heat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_heat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_heat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_heat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_heat_Sf_SwigStatic = {
    "SOPI_midas_heat",
    swig_SOPI_midas_heat_Sf_SwigStatic_methods,
    swig_SOPI_midas_heat_Sf_SwigStatic_attributes,
    swig_SOPI_midas_heat_Sf_SwigStatic_constants,
    swig_SOPI_midas_heat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_heat_bases[] = {0,0};
static const char *swig_SOPI_midas_heat_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_heat = { "SOPI_midas_heat", "SOPI_midas_heat", &SWIGTYPE_p_inlib__SOPI__midas_heat,_proxy__wrap_new_SOPI_midas_heat, swig_delete_SOPI_midas_heat, swig_SOPI_midas_heat_methods, swig_SOPI_midas_heat_attributes, &swig_SOPI_midas_heat_Sf_SwigStatic, swig_SOPI_midas_heat_meta, swig_SOPI_midas_heat_bases, swig_SOPI_midas_heat_base_names };

static int _wrap_new_SOPI_midas_rainbow3__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_rainbow3 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_rainbow3::midas_rainbow3",0,0)
  result = (inlib::SOPI::midas_rainbow3 *)new inlib::SOPI::midas_rainbow3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_rainbow3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_rainbow3__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_rainbow3 *arg1 = 0 ;
  inlib::SOPI::midas_rainbow3 *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_rainbow3::midas_rainbow3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_rainbow3::midas_rainbow3",1,"inlib::SOPI::midas_rainbow3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_rainbow3,0))){
    SWIG_fail_ptr("new_SOPI_midas_rainbow3",1,SWIGTYPE_p_inlib__SOPI__midas_rainbow3); } 
  result = (inlib::SOPI::midas_rainbow3 *)new inlib::SOPI::midas_rainbow3((inlib::SOPI::midas_rainbow3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_rainbow3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_rainbow3(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_rainbow3__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_rainbow3, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_rainbow3__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_rainbow3'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_rainbow3::midas_rainbow3()\n"
  "    inlib::SOPI::midas_rainbow3::midas_rainbow3(inlib::SOPI::midas_rainbow3 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_rainbow3(void *obj) {
inlib::SOPI::midas_rainbow3 *arg1 = (inlib::SOPI::midas_rainbow3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_rainbow3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_rainbow3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_rainbow3_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_rainbow3_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_rainbow3_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_rainbow3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_rainbow3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_rainbow3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_rainbow3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_rainbow3_Sf_SwigStatic = {
    "SOPI_midas_rainbow3",
    swig_SOPI_midas_rainbow3_Sf_SwigStatic_methods,
    swig_SOPI_midas_rainbow3_Sf_SwigStatic_attributes,
    swig_SOPI_midas_rainbow3_Sf_SwigStatic_constants,
    swig_SOPI_midas_rainbow3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_rainbow3_bases[] = {0,0};
static const char *swig_SOPI_midas_rainbow3_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_rainbow3 = { "SOPI_midas_rainbow3", "SOPI_midas_rainbow3", &SWIGTYPE_p_inlib__SOPI__midas_rainbow3,_proxy__wrap_new_SOPI_midas_rainbow3, swig_delete_SOPI_midas_rainbow3, swig_SOPI_midas_rainbow3_methods, swig_SOPI_midas_rainbow3_attributes, &swig_SOPI_midas_rainbow3_Sf_SwigStatic, swig_SOPI_midas_rainbow3_meta, swig_SOPI_midas_rainbow3_bases, swig_SOPI_midas_rainbow3_base_names };

static int _wrap_new_SOPI_midas_bluered__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_bluered *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_bluered::midas_bluered",0,0)
  result = (inlib::SOPI::midas_bluered *)new inlib::SOPI::midas_bluered();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_bluered,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_bluered__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_bluered *arg1 = 0 ;
  inlib::SOPI::midas_bluered *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_bluered::midas_bluered",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_bluered::midas_bluered",1,"inlib::SOPI::midas_bluered const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_bluered,0))){
    SWIG_fail_ptr("new_SOPI_midas_bluered",1,SWIGTYPE_p_inlib__SOPI__midas_bluered); } 
  result = (inlib::SOPI::midas_bluered *)new inlib::SOPI::midas_bluered((inlib::SOPI::midas_bluered const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_bluered,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_bluered(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_bluered__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_bluered, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_bluered__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_bluered'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_bluered::midas_bluered()\n"
  "    inlib::SOPI::midas_bluered::midas_bluered(inlib::SOPI::midas_bluered const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_bluered(void *obj) {
inlib::SOPI::midas_bluered *arg1 = (inlib::SOPI::midas_bluered *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_bluered(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_bluered);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_bluered_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_bluered_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_bluered_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_bluered_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_bluered_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_bluered_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_bluered_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_bluered_Sf_SwigStatic = {
    "SOPI_midas_bluered",
    swig_SOPI_midas_bluered_Sf_SwigStatic_methods,
    swig_SOPI_midas_bluered_Sf_SwigStatic_attributes,
    swig_SOPI_midas_bluered_Sf_SwigStatic_constants,
    swig_SOPI_midas_bluered_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_bluered_bases[] = {0,0};
static const char *swig_SOPI_midas_bluered_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_bluered = { "SOPI_midas_bluered", "SOPI_midas_bluered", &SWIGTYPE_p_inlib__SOPI__midas_bluered,_proxy__wrap_new_SOPI_midas_bluered, swig_delete_SOPI_midas_bluered, swig_SOPI_midas_bluered_methods, swig_SOPI_midas_bluered_attributes, &swig_SOPI_midas_bluered_Sf_SwigStatic, swig_SOPI_midas_bluered_meta, swig_SOPI_midas_bluered_bases, swig_SOPI_midas_bluered_base_names };

static int _wrap_new_SOPI_midas_bluewhite__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_bluewhite *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_bluewhite::midas_bluewhite",0,0)
  result = (inlib::SOPI::midas_bluewhite *)new inlib::SOPI::midas_bluewhite();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_bluewhite,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_bluewhite__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_bluewhite *arg1 = 0 ;
  inlib::SOPI::midas_bluewhite *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_bluewhite::midas_bluewhite",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_bluewhite::midas_bluewhite",1,"inlib::SOPI::midas_bluewhite const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_bluewhite,0))){
    SWIG_fail_ptr("new_SOPI_midas_bluewhite",1,SWIGTYPE_p_inlib__SOPI__midas_bluewhite); } 
  result = (inlib::SOPI::midas_bluewhite *)new inlib::SOPI::midas_bluewhite((inlib::SOPI::midas_bluewhite const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_bluewhite,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_bluewhite(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_bluewhite__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_bluewhite, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_bluewhite__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_bluewhite'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_bluewhite::midas_bluewhite()\n"
  "    inlib::SOPI::midas_bluewhite::midas_bluewhite(inlib::SOPI::midas_bluewhite const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_bluewhite(void *obj) {
inlib::SOPI::midas_bluewhite *arg1 = (inlib::SOPI::midas_bluewhite *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_bluewhite(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_bluewhite);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_bluewhite_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_bluewhite_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_bluewhite_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_bluewhite_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_bluewhite_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_bluewhite_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_bluewhite_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_bluewhite_Sf_SwigStatic = {
    "SOPI_midas_bluewhite",
    swig_SOPI_midas_bluewhite_Sf_SwigStatic_methods,
    swig_SOPI_midas_bluewhite_Sf_SwigStatic_attributes,
    swig_SOPI_midas_bluewhite_Sf_SwigStatic_constants,
    swig_SOPI_midas_bluewhite_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_bluewhite_bases[] = {0,0};
static const char *swig_SOPI_midas_bluewhite_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_bluewhite = { "SOPI_midas_bluewhite", "SOPI_midas_bluewhite", &SWIGTYPE_p_inlib__SOPI__midas_bluewhite,_proxy__wrap_new_SOPI_midas_bluewhite, swig_delete_SOPI_midas_bluewhite, swig_SOPI_midas_bluewhite_methods, swig_SOPI_midas_bluewhite_attributes, &swig_SOPI_midas_bluewhite_Sf_SwigStatic, swig_SOPI_midas_bluewhite_meta, swig_SOPI_midas_bluewhite_bases, swig_SOPI_midas_bluewhite_base_names };

static int _wrap_new_SOPI_midas_stairs8__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_stairs8 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_stairs8::midas_stairs8",0,0)
  result = (inlib::SOPI::midas_stairs8 *)new inlib::SOPI::midas_stairs8();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_stairs8,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_stairs8__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_stairs8 *arg1 = 0 ;
  inlib::SOPI::midas_stairs8 *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_stairs8::midas_stairs8",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_stairs8::midas_stairs8",1,"inlib::SOPI::midas_stairs8 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_stairs8,0))){
    SWIG_fail_ptr("new_SOPI_midas_stairs8",1,SWIGTYPE_p_inlib__SOPI__midas_stairs8); } 
  result = (inlib::SOPI::midas_stairs8 *)new inlib::SOPI::midas_stairs8((inlib::SOPI::midas_stairs8 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_stairs8,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_stairs8(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_stairs8__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_stairs8, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_stairs8__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_stairs8'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_stairs8::midas_stairs8()\n"
  "    inlib::SOPI::midas_stairs8::midas_stairs8(inlib::SOPI::midas_stairs8 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_stairs8(void *obj) {
inlib::SOPI::midas_stairs8 *arg1 = (inlib::SOPI::midas_stairs8 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_stairs8(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_stairs8);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_stairs8_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_stairs8_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_stairs8_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_stairs8_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_stairs8_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_stairs8_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_stairs8_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_stairs8_Sf_SwigStatic = {
    "SOPI_midas_stairs8",
    swig_SOPI_midas_stairs8_Sf_SwigStatic_methods,
    swig_SOPI_midas_stairs8_Sf_SwigStatic_attributes,
    swig_SOPI_midas_stairs8_Sf_SwigStatic_constants,
    swig_SOPI_midas_stairs8_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_stairs8_bases[] = {0,0};
static const char *swig_SOPI_midas_stairs8_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_stairs8 = { "SOPI_midas_stairs8", "SOPI_midas_stairs8", &SWIGTYPE_p_inlib__SOPI__midas_stairs8,_proxy__wrap_new_SOPI_midas_stairs8, swig_delete_SOPI_midas_stairs8, swig_SOPI_midas_stairs8_methods, swig_SOPI_midas_stairs8_attributes, &swig_SOPI_midas_stairs8_Sf_SwigStatic, swig_SOPI_midas_stairs8_meta, swig_SOPI_midas_stairs8_bases, swig_SOPI_midas_stairs8_base_names };

static int _wrap_new_SOPI_midas_stairs9__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_stairs9 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_stairs9::midas_stairs9",0,0)
  result = (inlib::SOPI::midas_stairs9 *)new inlib::SOPI::midas_stairs9();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_stairs9,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_stairs9__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_stairs9 *arg1 = 0 ;
  inlib::SOPI::midas_stairs9 *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_stairs9::midas_stairs9",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_stairs9::midas_stairs9",1,"inlib::SOPI::midas_stairs9 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_stairs9,0))){
    SWIG_fail_ptr("new_SOPI_midas_stairs9",1,SWIGTYPE_p_inlib__SOPI__midas_stairs9); } 
  result = (inlib::SOPI::midas_stairs9 *)new inlib::SOPI::midas_stairs9((inlib::SOPI::midas_stairs9 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_stairs9,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_stairs9(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_stairs9__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_stairs9, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_stairs9__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_stairs9'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_stairs9::midas_stairs9()\n"
  "    inlib::SOPI::midas_stairs9::midas_stairs9(inlib::SOPI::midas_stairs9 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_stairs9(void *obj) {
inlib::SOPI::midas_stairs9 *arg1 = (inlib::SOPI::midas_stairs9 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_stairs9(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_stairs9);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_stairs9_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_stairs9_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_stairs9_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_stairs9_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_stairs9_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_stairs9_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_stairs9_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_stairs9_Sf_SwigStatic = {
    "SOPI_midas_stairs9",
    swig_SOPI_midas_stairs9_Sf_SwigStatic_methods,
    swig_SOPI_midas_stairs9_Sf_SwigStatic_attributes,
    swig_SOPI_midas_stairs9_Sf_SwigStatic_constants,
    swig_SOPI_midas_stairs9_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_stairs9_bases[] = {0,0};
static const char *swig_SOPI_midas_stairs9_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_stairs9 = { "SOPI_midas_stairs9", "SOPI_midas_stairs9", &SWIGTYPE_p_inlib__SOPI__midas_stairs9,_proxy__wrap_new_SOPI_midas_stairs9, swig_delete_SOPI_midas_stairs9, swig_SOPI_midas_stairs9_methods, swig_SOPI_midas_stairs9_attributes, &swig_SOPI_midas_stairs9_Sf_SwigStatic, swig_SOPI_midas_stairs9_meta, swig_SOPI_midas_stairs9_bases, swig_SOPI_midas_stairs9_base_names };

static int _wrap_new_SOPI_midas_staircase__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_staircase *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_staircase::midas_staircase",0,0)
  result = (inlib::SOPI::midas_staircase *)new inlib::SOPI::midas_staircase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_staircase,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_staircase__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_staircase *arg1 = 0 ;
  inlib::SOPI::midas_staircase *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_staircase::midas_staircase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_staircase::midas_staircase",1,"inlib::SOPI::midas_staircase const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_staircase,0))){
    SWIG_fail_ptr("new_SOPI_midas_staircase",1,SWIGTYPE_p_inlib__SOPI__midas_staircase); } 
  result = (inlib::SOPI::midas_staircase *)new inlib::SOPI::midas_staircase((inlib::SOPI::midas_staircase const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_staircase,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_staircase(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_staircase__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_staircase, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_staircase__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_staircase'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_staircase::midas_staircase()\n"
  "    inlib::SOPI::midas_staircase::midas_staircase(inlib::SOPI::midas_staircase const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_staircase(void *obj) {
inlib::SOPI::midas_staircase *arg1 = (inlib::SOPI::midas_staircase *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_staircase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_staircase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_staircase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_staircase_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_staircase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_staircase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_staircase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_staircase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_staircase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_staircase_Sf_SwigStatic = {
    "SOPI_midas_staircase",
    swig_SOPI_midas_staircase_Sf_SwigStatic_methods,
    swig_SOPI_midas_staircase_Sf_SwigStatic_attributes,
    swig_SOPI_midas_staircase_Sf_SwigStatic_constants,
    swig_SOPI_midas_staircase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_staircase_bases[] = {0,0};
static const char *swig_SOPI_midas_staircase_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_staircase = { "SOPI_midas_staircase", "SOPI_midas_staircase", &SWIGTYPE_p_inlib__SOPI__midas_staircase,_proxy__wrap_new_SOPI_midas_staircase, swig_delete_SOPI_midas_staircase, swig_SOPI_midas_staircase_methods, swig_SOPI_midas_staircase_attributes, &swig_SOPI_midas_staircase_Sf_SwigStatic, swig_SOPI_midas_staircase_meta, swig_SOPI_midas_staircase_bases, swig_SOPI_midas_staircase_base_names };

static int _wrap_new_SOPI_midas_color__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_color *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_color::midas_color",0,0)
  result = (inlib::SOPI::midas_color *)new inlib::SOPI::midas_color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_color,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_color__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_color *arg1 = 0 ;
  inlib::SOPI::midas_color *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_color::midas_color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_color::midas_color",1,"inlib::SOPI::midas_color const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_color,0))){
    SWIG_fail_ptr("new_SOPI_midas_color",1,SWIGTYPE_p_inlib__SOPI__midas_color); } 
  result = (inlib::SOPI::midas_color *)new inlib::SOPI::midas_color((inlib::SOPI::midas_color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_color,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_color(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_color__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_color, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_color__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_color'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_color::midas_color()\n"
  "    inlib::SOPI::midas_color::midas_color(inlib::SOPI::midas_color const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_color(void *obj) {
inlib::SOPI::midas_color *arg1 = (inlib::SOPI::midas_color *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_color(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_color);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_color_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_color_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_color_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_color_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_color_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_color_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_color_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_color_Sf_SwigStatic = {
    "SOPI_midas_color",
    swig_SOPI_midas_color_Sf_SwigStatic_methods,
    swig_SOPI_midas_color_Sf_SwigStatic_attributes,
    swig_SOPI_midas_color_Sf_SwigStatic_constants,
    swig_SOPI_midas_color_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_color_bases[] = {0,0};
static const char *swig_SOPI_midas_color_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_color = { "SOPI_midas_color", "SOPI_midas_color", &SWIGTYPE_p_inlib__SOPI__midas_color,_proxy__wrap_new_SOPI_midas_color, swig_delete_SOPI_midas_color, swig_SOPI_midas_color_methods, swig_SOPI_midas_color_attributes, &swig_SOPI_midas_color_Sf_SwigStatic, swig_SOPI_midas_color_meta, swig_SOPI_midas_color_bases, swig_SOPI_midas_color_base_names };

static int _wrap_new_SOPI_midas_manycol__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_manycol *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_manycol::midas_manycol",0,0)
  result = (inlib::SOPI::midas_manycol *)new inlib::SOPI::midas_manycol();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_manycol,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_manycol__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_manycol *arg1 = 0 ;
  inlib::SOPI::midas_manycol *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_manycol::midas_manycol",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_manycol::midas_manycol",1,"inlib::SOPI::midas_manycol const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_manycol,0))){
    SWIG_fail_ptr("new_SOPI_midas_manycol",1,SWIGTYPE_p_inlib__SOPI__midas_manycol); } 
  result = (inlib::SOPI::midas_manycol *)new inlib::SOPI::midas_manycol((inlib::SOPI::midas_manycol const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_manycol,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_manycol(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_manycol__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_manycol, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_manycol__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_manycol'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_manycol::midas_manycol()\n"
  "    inlib::SOPI::midas_manycol::midas_manycol(inlib::SOPI::midas_manycol const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_manycol(void *obj) {
inlib::SOPI::midas_manycol *arg1 = (inlib::SOPI::midas_manycol *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_manycol(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_manycol);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_manycol_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_manycol_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_manycol_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_manycol_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_manycol_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_manycol_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_manycol_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_manycol_Sf_SwigStatic = {
    "SOPI_midas_manycol",
    swig_SOPI_midas_manycol_Sf_SwigStatic_methods,
    swig_SOPI_midas_manycol_Sf_SwigStatic_attributes,
    swig_SOPI_midas_manycol_Sf_SwigStatic_constants,
    swig_SOPI_midas_manycol_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_manycol_bases[] = {0,0};
static const char *swig_SOPI_midas_manycol_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_manycol = { "SOPI_midas_manycol", "SOPI_midas_manycol", &SWIGTYPE_p_inlib__SOPI__midas_manycol,_proxy__wrap_new_SOPI_midas_manycol, swig_delete_SOPI_midas_manycol, swig_SOPI_midas_manycol_methods, swig_SOPI_midas_manycol_attributes, &swig_SOPI_midas_manycol_Sf_SwigStatic, swig_SOPI_midas_manycol_meta, swig_SOPI_midas_manycol_bases, swig_SOPI_midas_manycol_base_names };

static int _wrap_new_SOPI_midas_idl14__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_idl14 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_idl14::midas_idl14",0,0)
  result = (inlib::SOPI::midas_idl14 *)new inlib::SOPI::midas_idl14();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_idl14,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_idl14__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_idl14 *arg1 = 0 ;
  inlib::SOPI::midas_idl14 *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_idl14::midas_idl14",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_idl14::midas_idl14",1,"inlib::SOPI::midas_idl14 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_idl14,0))){
    SWIG_fail_ptr("new_SOPI_midas_idl14",1,SWIGTYPE_p_inlib__SOPI__midas_idl14); } 
  result = (inlib::SOPI::midas_idl14 *)new inlib::SOPI::midas_idl14((inlib::SOPI::midas_idl14 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_idl14,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_idl14(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_idl14__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_idl14, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_idl14__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_idl14'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_idl14::midas_idl14()\n"
  "    inlib::SOPI::midas_idl14::midas_idl14(inlib::SOPI::midas_idl14 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_idl14(void *obj) {
inlib::SOPI::midas_idl14 *arg1 = (inlib::SOPI::midas_idl14 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_idl14(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_idl14);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_idl14_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_idl14_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_idl14_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_idl14_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_idl14_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_idl14_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_idl14_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_idl14_Sf_SwigStatic = {
    "SOPI_midas_idl14",
    swig_SOPI_midas_idl14_Sf_SwigStatic_methods,
    swig_SOPI_midas_idl14_Sf_SwigStatic_attributes,
    swig_SOPI_midas_idl14_Sf_SwigStatic_constants,
    swig_SOPI_midas_idl14_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_idl14_bases[] = {0,0};
static const char *swig_SOPI_midas_idl14_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_idl14 = { "SOPI_midas_idl14", "SOPI_midas_idl14", &SWIGTYPE_p_inlib__SOPI__midas_idl14,_proxy__wrap_new_SOPI_midas_idl14, swig_delete_SOPI_midas_idl14, swig_SOPI_midas_idl14_methods, swig_SOPI_midas_idl14_attributes, &swig_SOPI_midas_idl14_Sf_SwigStatic, swig_SOPI_midas_idl14_meta, swig_SOPI_midas_idl14_bases, swig_SOPI_midas_idl14_base_names };

static int _wrap_new_SOPI_midas_idl15__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_idl15 *result = 0 ;
  SWIG_check_num_args("inlib::SOPI::midas_idl15::midas_idl15",0,0)
  result = (inlib::SOPI::midas_idl15 *)new inlib::SOPI::midas_idl15();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_idl15,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_idl15__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::SOPI::midas_idl15 *arg1 = 0 ;
  inlib::SOPI::midas_idl15 *result = 0 ; SWIG_check_num_args("inlib::SOPI::midas_idl15::midas_idl15",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::SOPI::midas_idl15::midas_idl15",1,"inlib::SOPI::midas_idl15 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__SOPI__midas_idl15,0))){
    SWIG_fail_ptr("new_SOPI_midas_idl15",1,SWIGTYPE_p_inlib__SOPI__midas_idl15); } 
  result = (inlib::SOPI::midas_idl15 *)new inlib::SOPI::midas_idl15((inlib::SOPI::midas_idl15 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__SOPI__midas_idl15,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SOPI_midas_idl15(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_SOPI_midas_idl15__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__SOPI__midas_idl15, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_SOPI_midas_idl15__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SOPI_midas_idl15'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::SOPI::midas_idl15::midas_idl15()\n"
  "    inlib::SOPI::midas_idl15::midas_idl15(inlib::SOPI::midas_idl15 const &)\n"); lua_error(L);return 0; }
static void swig_delete_SOPI_midas_idl15(void *obj) {
inlib::SOPI::midas_idl15 *arg1 = (inlib::SOPI::midas_idl15 *) obj;
delete arg1;
}
static int _proxy__wrap_new_SOPI_midas_idl15(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SOPI_midas_idl15);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SOPI_midas_idl15_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SOPI_midas_idl15_methods[]= {
    {0,0}
};
static swig_lua_method swig_SOPI_midas_idl15_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SOPI_midas_idl15_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SOPI_midas_idl15_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SOPI_midas_idl15_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SOPI_midas_idl15_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SOPI_midas_idl15_Sf_SwigStatic = {
    "SOPI_midas_idl15",
    swig_SOPI_midas_idl15_Sf_SwigStatic_methods,
    swig_SOPI_midas_idl15_Sf_SwigStatic_attributes,
    swig_SOPI_midas_idl15_Sf_SwigStatic_constants,
    swig_SOPI_midas_idl15_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SOPI_midas_idl15_bases[] = {0,0};
static const char *swig_SOPI_midas_idl15_base_names[] = {"inlib::SOPI::cmap *",0};
static swig_lua_class _wrap_class_SOPI_midas_idl15 = { "SOPI_midas_idl15", "SOPI_midas_idl15", &SWIGTYPE_p_inlib__SOPI__midas_idl15,_proxy__wrap_new_SOPI_midas_idl15, swig_delete_SOPI_midas_idl15, swig_SOPI_midas_idl15_methods, swig_SOPI_midas_idl15_attributes, &swig_SOPI_midas_idl15_Sf_SwigStatic, swig_SOPI_midas_idl15_meta, swig_SOPI_midas_idl15_bases, swig_SOPI_midas_idl15_base_names };

static int _wrap_new_img_byte__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::img< inlib::byte > *result = 0 ;
  SWIG_check_num_args("inlib::img< inlib::byte >::img",0,0)
  result = (inlib::img< inlib::byte > *)new inlib::img< inlib::byte >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__imgT_inlib__byte_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_img_byte__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::img< inlib::byte > *arg1 = 0 ;
  inlib::img< inlib::byte > *result = 0 ; SWIG_check_num_args("inlib::img< inlib::byte >::img",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::img",1,"inlib::img< inlib::byte > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("new_img_byte",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (inlib::img< inlib::byte > *)new inlib::img< inlib::byte >((inlib::img< inlib::byte > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__imgT_inlib__byte_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_img_byte(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_img_byte__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__imgT_inlib__byte_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_img_byte__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_img_byte'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::img< inlib::byte >::img()\n" "    inlib::img< inlib::byte >::img(inlib::img< inlib::byte > const &)\n");
  lua_error(L);return 0; }
static int _wrap_img_byte_transfer(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *arg2 = 0 ;
  SWIG_check_num_args("inlib::img< inlib::byte >::transfer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::transfer",1,"inlib::img< inlib::byte > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::img< inlib::byte >::transfer",2,"inlib::img< inlib::byte > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_transfer",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_transfer",2,SWIGTYPE_p_inlib__imgT_inlib__byte_t); }  (arg1)->transfer(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_clear(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ;
  SWIG_check_num_args("inlib::img< inlib::byte >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::clear",1,"inlib::img< inlib::byte > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_clear",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *arg2 = 0 ; bool result;
  SWIG_check_num_args("inlib::img< inlib::byte >::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::copy",1,"inlib::img< inlib::byte > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::img< inlib::byte >::copy",2,"inlib::img< inlib::byte > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_copy",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_copy",2,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (bool)(arg1)->copy((inlib::img< inlib::byte > const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_make_empty__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; bool arg2 ;
  SWIG_check_num_args("inlib::img< inlib::byte >::make_empty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::make_empty",1,"inlib::img< inlib::byte > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::img< inlib::byte >::make_empty",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_make_empty",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->make_empty(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_make_empty__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ;
  SWIG_check_num_args("inlib::img< inlib::byte >::make_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::make_empty",1,"inlib::img< inlib::byte > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_make_empty",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); }  (arg1)->make_empty(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_make_empty(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__imgT_inlib__byte_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_img_byte_make_empty__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__imgT_inlib__byte_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_img_byte_make_empty__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'img_byte_make_empty'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::img< inlib::byte >::make_empty(bool)\n"
  "    inlib::img< inlib::byte >::make_empty()\n"); lua_error(L);return 0; }
static int _wrap_img_byte_is_empty(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; bool result;
  SWIG_check_num_args("inlib::img< inlib::byte >::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::is_empty",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_is_empty",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (bool)((inlib::img< inlib::byte > const *)arg1)->is_empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_equal(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *arg2 = 0 ; bool result;
  SWIG_check_num_args("inlib::img< inlib::byte >::equal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::equal",1,"inlib::img< inlib::byte > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::img< inlib::byte >::equal",2,"inlib::img< inlib::byte > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_equal",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_equal",2,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (bool)((inlib::img< inlib::byte > const *)arg1)->equal((inlib::img< inlib::byte > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_width(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::img< inlib::byte >::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::width",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_width",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (unsigned int)((inlib::img< inlib::byte > const *)arg1)->width(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_height(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::img< inlib::byte >::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::height",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_height",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (unsigned int)((inlib::img< inlib::byte > const *)arg1)->height();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_bytes_per_pixel(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::img< inlib::byte >::bytes_per_pixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::bytes_per_pixel",1,"inlib::img< inlib::byte > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_bytes_per_pixel",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (unsigned int)(arg1)->bytes_per_pixel(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_bpp(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::img< inlib::byte >::bpp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::bpp",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_bpp",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (unsigned int)((inlib::img< inlib::byte > const *)arg1)->bpp(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_owner(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; bool result;
  SWIG_check_num_args("inlib::img< inlib::byte >::owner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::owner",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_owner",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (bool)((inlib::img< inlib::byte > const *)arg1)->owner(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_img_byte_size(lua_State* L) { int SWIG_arg = 0;
  inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::img< inlib::byte >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::img< inlib::byte >::size",1,"inlib::img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("img_byte_size",1,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  result = (unsigned int)((inlib::img< inlib::byte > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_img_byte(void *obj) {
inlib::img< inlib::byte > *arg1 = (inlib::img< inlib::byte > *) obj;
delete arg1;
}
static int _proxy__wrap_new_img_byte(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_img_byte);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_img_byte_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_img_byte_methods[]= {
    { "transfer", _wrap_img_byte_transfer},
    { "clear", _wrap_img_byte_clear},
    { "copy", _wrap_img_byte_copy},
    { "make_empty", _wrap_img_byte_make_empty},
    { "is_empty", _wrap_img_byte_is_empty},
    { "equal", _wrap_img_byte_equal},
    { "width", _wrap_img_byte_width},
    { "height", _wrap_img_byte_height},
    { "bytes_per_pixel", _wrap_img_byte_bytes_per_pixel},
    { "bpp", _wrap_img_byte_bpp},
    { "owner", _wrap_img_byte_owner},
    { "size", _wrap_img_byte_size},
    {0,0}
};
static swig_lua_method swig_img_byte_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_img_byte_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_img_byte_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_img_byte_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_img_byte_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_img_byte_Sf_SwigStatic = {
    "img_byte",
    swig_img_byte_Sf_SwigStatic_methods,
    swig_img_byte_Sf_SwigStatic_attributes,
    swig_img_byte_Sf_SwigStatic_constants,
    swig_img_byte_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_img_byte_bases[] = {0};
static const char *swig_img_byte_base_names[] = {0};
static swig_lua_class _wrap_class_img_byte = { "img_byte", "img_byte", &SWIGTYPE_p_inlib__imgT_inlib__byte_t,_proxy__wrap_new_img_byte, swig_delete_img_byte, swig_img_byte_methods, swig_img_byte_attributes, &swig_img_byte_Sf_SwigStatic, swig_img_byte_meta, swig_img_byte_bases, swig_img_byte_base_names };

static int _wrap_new_lut_float__SWIG_0(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float *arg2 = 0 ; size_t arg3 ;
  float temp1 ; float temp2 ; inlib::lut< float > *result = 0 ; SWIG_check_num_args("inlib::lut< float >::lut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::lut< float >::lut",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::lut< float >::lut",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::lut< float >::lut",3,"size_t"); temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2; SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (inlib::lut< float > *)new inlib::lut< float >((float const &)*arg1,(float const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__lutT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_lut_float__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::lut< float > *arg1 = 0 ;
  inlib::lut< float > *result = 0 ; SWIG_check_num_args("inlib::lut< float >::lut",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::lut< float >::lut",1,"inlib::lut< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_float_t,0))){
    SWIG_fail_ptr("new_lut_float",1,SWIGTYPE_p_inlib__lutT_float_t); } 
  result = (inlib::lut< float > *)new inlib::lut< float >((inlib::lut< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__lutT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_lut_float(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__lutT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_lut_float__SWIG_1(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_lut_float__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_lut_float'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::lut< float >::lut(float const &,float const &,size_t)\n"
  "    inlib::lut< float >::lut(inlib::lut< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_lut_float_apply(lua_State* L) { int SWIG_arg = 0; inlib::lut< float > *arg1 = (inlib::lut< float > *) 0 ;
  float *arg2 = 0 ; float temp2 ; size_t result; SWIG_check_num_args("inlib::lut< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< float >::apply",1,"inlib::lut< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::lut< float >::apply",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_float_t,0))){
    SWIG_fail_ptr("lut_float_apply",1,SWIGTYPE_p_inlib__lutT_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((inlib::lut< float > const *)arg1)->apply((float const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_float_mn(lua_State* L) { int SWIG_arg = 0; inlib::lut< float > *arg1 = (inlib::lut< float > *) 0 ;
  float result; SWIG_check_num_args("inlib::lut< float >::mn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< float >::mn",1,"inlib::lut< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_float_t,0))){
    SWIG_fail_ptr("lut_float_mn",1,SWIGTYPE_p_inlib__lutT_float_t); } 
  result = (float)((inlib::lut< float > const *)arg1)->mn(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_float_mx(lua_State* L) { int SWIG_arg = 0; inlib::lut< float > *arg1 = (inlib::lut< float > *) 0 ;
  float result; SWIG_check_num_args("inlib::lut< float >::mx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< float >::mx",1,"inlib::lut< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_float_t,0))){
    SWIG_fail_ptr("lut_float_mx",1,SWIGTYPE_p_inlib__lutT_float_t); } 
  result = (float)((inlib::lut< float > const *)arg1)->mx(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_float_coln(lua_State* L) { int SWIG_arg = 0; inlib::lut< float > *arg1 = (inlib::lut< float > *) 0 ;
  size_t result; SWIG_check_num_args("inlib::lut< float >::coln",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< float >::coln",1,"inlib::lut< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_float_t,0))){
    SWIG_fail_ptr("lut_float_coln",1,SWIGTYPE_p_inlib__lutT_float_t); }  result = ((inlib::lut< float > const *)arg1)->coln();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_lut_float(void *obj) {
inlib::lut< float > *arg1 = (inlib::lut< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lut_float(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lut_float);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lut_float_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_lut_float_methods[]= {
    { "apply", _wrap_lut_float_apply},
    { "mn", _wrap_lut_float_mn},
    { "mx", _wrap_lut_float_mx},
    { "coln", _wrap_lut_float_coln},
    {0,0}
};
static swig_lua_method swig_lut_float_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_lut_float_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lut_float_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lut_float_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lut_float_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lut_float_Sf_SwigStatic = {
    "lut_float",
    swig_lut_float_Sf_SwigStatic_methods,
    swig_lut_float_Sf_SwigStatic_attributes,
    swig_lut_float_Sf_SwigStatic_constants,
    swig_lut_float_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lut_float_bases[] = {0};
static const char *swig_lut_float_base_names[] = {0};
static swig_lua_class _wrap_class_lut_float = { "lut_float", "lut_float", &SWIGTYPE_p_inlib__lutT_float_t,_proxy__wrap_new_lut_float, swig_delete_lut_float, swig_lut_float_methods, swig_lut_float_attributes, &swig_lut_float_Sf_SwigStatic, swig_lut_float_meta, swig_lut_float_bases, swig_lut_float_base_names };

static int _wrap_new_lut_double__SWIG_0(lua_State* L) { int SWIG_arg = 0; double *arg1 = 0 ; double *arg2 = 0 ; size_t arg3 ;
  double temp1 ; double temp2 ; inlib::lut< double > *result = 0 ; SWIG_check_num_args("inlib::lut< double >::lut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::lut< double >::lut",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::lut< double >::lut",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::lut< double >::lut",3,"size_t"); temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2; SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (inlib::lut< double > *)new inlib::lut< double >((double const &)*arg1,(double const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__lutT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_lut_double__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::lut< double > *arg1 = 0 ;
  inlib::lut< double > *result = 0 ; SWIG_check_num_args("inlib::lut< double >::lut",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::lut< double >::lut",1,"inlib::lut< double > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_double_t,0))){
    SWIG_fail_ptr("new_lut_double",1,SWIGTYPE_p_inlib__lutT_double_t); } 
  result = (inlib::lut< double > *)new inlib::lut< double >((inlib::lut< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__lutT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_lut_double(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__lutT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_lut_double__SWIG_1(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_lut_double__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_lut_double'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::lut< double >::lut(double const &,double const &,size_t)\n"
  "    inlib::lut< double >::lut(inlib::lut< double > const &)\n"); lua_error(L);return 0; }
static int _wrap_lut_double_apply(lua_State* L) { int SWIG_arg = 0; inlib::lut< double > *arg1 = (inlib::lut< double > *) 0 ;
  double *arg2 = 0 ; double temp2 ; size_t result; SWIG_check_num_args("inlib::lut< double >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< double >::apply",1,"inlib::lut< double > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::lut< double >::apply",2,"double const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_double_t,0))){
    SWIG_fail_ptr("lut_double_apply",1,SWIGTYPE_p_inlib__lutT_double_t); }  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = ((inlib::lut< double > const *)arg1)->apply((double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_double_mn(lua_State* L) { int SWIG_arg = 0; inlib::lut< double > *arg1 = (inlib::lut< double > *) 0 ;
  double result; SWIG_check_num_args("inlib::lut< double >::mn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< double >::mn",1,"inlib::lut< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_double_t,0))){
    SWIG_fail_ptr("lut_double_mn",1,SWIGTYPE_p_inlib__lutT_double_t); } 
  result = (double)((inlib::lut< double > const *)arg1)->mn(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_double_mx(lua_State* L) { int SWIG_arg = 0; inlib::lut< double > *arg1 = (inlib::lut< double > *) 0 ;
  double result; SWIG_check_num_args("inlib::lut< double >::mx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< double >::mx",1,"inlib::lut< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_double_t,0))){
    SWIG_fail_ptr("lut_double_mx",1,SWIGTYPE_p_inlib__lutT_double_t); } 
  result = (double)((inlib::lut< double > const *)arg1)->mx(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lut_double_coln(lua_State* L) { int SWIG_arg = 0; inlib::lut< double > *arg1 = (inlib::lut< double > *) 0 ;
  size_t result; SWIG_check_num_args("inlib::lut< double >::coln",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::lut< double >::coln",1,"inlib::lut< double > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__lutT_double_t,0))){
    SWIG_fail_ptr("lut_double_coln",1,SWIGTYPE_p_inlib__lutT_double_t); } 
  result = ((inlib::lut< double > const *)arg1)->coln(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_lut_double(void *obj) {
inlib::lut< double > *arg1 = (inlib::lut< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lut_double(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lut_double);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lut_double_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_lut_double_methods[]= {
    { "apply", _wrap_lut_double_apply},
    { "mn", _wrap_lut_double_mn},
    { "mx", _wrap_lut_double_mx},
    { "coln", _wrap_lut_double_coln},
    {0,0}
};
static swig_lua_method swig_lut_double_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_lut_double_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lut_double_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lut_double_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lut_double_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lut_double_Sf_SwigStatic = {
    "lut_double",
    swig_lut_double_Sf_SwigStatic_methods,
    swig_lut_double_Sf_SwigStatic_attributes,
    swig_lut_double_Sf_SwigStatic_constants,
    swig_lut_double_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lut_double_bases[] = {0};
static const char *swig_lut_double_base_names[] = {0};
static swig_lua_class _wrap_class_lut_double = { "lut_double", "lut_double", &SWIGTYPE_p_inlib__lutT_double_t,_proxy__wrap_new_lut_double, swig_delete_lut_double, swig_lut_double_methods, swig_lut_double_attributes, &swig_lut_double_Sf_SwigStatic, swig_lut_double_meta, swig_lut_double_bases, swig_lut_double_base_names };

static int _wrap_fpi(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("inlib::fpi",0,0)
  result = (float)inlib::fpi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ftwo_pi(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("inlib::ftwo_pi",0,0)
  result = (float)inlib::ftwo_pi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_fhalf_pi(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("inlib::fhalf_pi",0,0)
  result = (float)inlib::fhalf_pi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_fdeg2rad(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("inlib::fdeg2rad",0,0)
  result = (float)inlib::fdeg2rad(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_frad2deg(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("inlib::frad2deg",0,0)
  result = (float)inlib::frad2deg(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_fround(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; int result;
  SWIG_check_num_args("inlib::fround",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fround",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (int)inlib::fround((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fstep(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fstep",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fstep",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fstep((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fcos(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fcos",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fcos",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fcos((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fsin(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fsin",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fsin",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fsin((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_facos(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::facos",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::facos",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::facos((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fasin(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fasin",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fasin",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fasin((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ftan(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::ftan",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::ftan",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::ftan((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fatan(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fatan",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fatan",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fatan((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fatan2(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float *arg2 = 0 ; float temp1 ; float temp2 ;
  float result; SWIG_check_num_args("inlib::fatan2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fatan2",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::fatan2",2,"float const &"); temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2; result = (float)inlib::fatan2((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fsqrt(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fsqrt",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fsqrt",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fsqrt((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fpow(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float *arg2 = 0 ; float temp1 ; float temp2 ;
  float result; SWIG_check_num_args("inlib::fpow",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fpow",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::fpow",2,"float const &"); temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2; result = (float)inlib::fpow((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fexp(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fexp",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fexp",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fexp((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_flog(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::flog",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::flog",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::flog((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_flog10(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::flog10",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::flog10",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::flog10((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ffloor(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::ffloor",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::ffloor",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::ffloor((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fceil(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fceil",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fceil",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fceil((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fcosh(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fcosh",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fcosh",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fcosh((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fsinh(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::fsinh",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::fsinh",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::fsinh((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ffabs(lua_State* L) { int SWIG_arg = 0; float *arg1 = 0 ; float temp1 ; float result;
  SWIG_check_num_args("inlib::ffabs",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::ffabs",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1; result = (float)inlib::ffabs((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_pi(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("inlib::pi",0,0)
  result = (double)inlib::pi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_two_pi(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("inlib::two_pi",0,0)
  result = (double)inlib::two_pi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_half_pi(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("inlib::half_pi",0,0)
  result = (double)inlib::half_pi(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_deg2rad(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("inlib::deg2rad",0,0)
  result = (double)inlib::deg2rad(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rad2deg(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("inlib::rad2deg",0,0)
  result = (double)inlib::rad2deg(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_colorf__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf::colorf",0,0) result = (inlib::colorf *)new inlib::colorf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_colorf__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  inlib::colorf *result = 0 ; SWIG_check_num_args("inlib::colorf::colorf",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::colorf::colorf",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::colorf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::colorf::colorf",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::colorf::colorf",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (inlib::colorf *)new inlib::colorf(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_colorf__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  inlib::colorf *result = 0 ; SWIG_check_num_args("inlib::colorf::colorf",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::colorf::colorf",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::colorf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::colorf::colorf",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (inlib::colorf *)new inlib::colorf(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_colorf__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = 0 ; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf::colorf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::colorf::colorf",1,"inlib::colorf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("new_colorf",1,SWIGTYPE_p_inlib__colorf); } 
  result = (inlib::colorf *)new inlib::colorf((inlib::colorf const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_colorf(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_colorf__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__colorf, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_colorf__SWIG_3(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_colorf__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_colorf__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_colorf'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::colorf::colorf()\n" "    inlib::colorf::colorf(float,float,float,float)\n"
  "    inlib::colorf::colorf(float,float,float)\n" "    inlib::colorf::colorf(inlib::colorf const &)\n");
  lua_error(L);return 0; }
static int _wrap_colorf_r(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float result;
  SWIG_check_num_args("inlib::colorf::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::r",1,"inlib::colorf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_r",1,SWIGTYPE_p_inlib__colorf); }  result = (float)((inlib::colorf const *)arg1)->r();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_g(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float result;
  SWIG_check_num_args("inlib::colorf::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::g",1,"inlib::colorf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_g",1,SWIGTYPE_p_inlib__colorf); }  result = (float)((inlib::colorf const *)arg1)->g();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_b(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float result;
  SWIG_check_num_args("inlib::colorf::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::b",1,"inlib::colorf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_b",1,SWIGTYPE_p_inlib__colorf); }  result = (float)((inlib::colorf const *)arg1)->b();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_a(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float result;
  SWIG_check_num_args("inlib::colorf::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::a",1,"inlib::colorf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_a",1,SWIGTYPE_p_inlib__colorf); }  result = (float)((inlib::colorf const *)arg1)->a();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_set_r(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::colorf::set_r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::set_r",1,"inlib::colorf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::set_r",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_set_r",1,SWIGTYPE_p_inlib__colorf); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set_r(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_set_g(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::colorf::set_g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::set_g",1,"inlib::colorf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::set_g",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_set_g",1,SWIGTYPE_p_inlib__colorf); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set_g(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_set_b(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::colorf::set_b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::set_b",1,"inlib::colorf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::set_b",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_set_b",1,SWIGTYPE_p_inlib__colorf); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set_b(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_colorf_set_a(lua_State* L) { int SWIG_arg = 0; inlib::colorf *arg1 = (inlib::colorf *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::colorf::set_a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::colorf::set_a",1,"inlib::colorf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::colorf::set_a",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("colorf_set_a",1,SWIGTYPE_p_inlib__colorf); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set_a(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_colorf(void *obj) {
inlib::colorf *arg1 = (inlib::colorf *) obj;
delete arg1;
}
static int _proxy__wrap_new_colorf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_colorf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_colorf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_colorf_methods[]= {
    { "r", _wrap_colorf_r},
    { "g", _wrap_colorf_g},
    { "b", _wrap_colorf_b},
    { "a", _wrap_colorf_a},
    { "set_r", _wrap_colorf_set_r},
    { "set_g", _wrap_colorf_set_g},
    { "set_b", _wrap_colorf_set_b},
    { "set_a", _wrap_colorf_set_a},
    {0,0}
};
static swig_lua_method swig_colorf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_colorf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_colorf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_colorf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_colorf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_colorf_Sf_SwigStatic = {
    "colorf",
    swig_colorf_Sf_SwigStatic_methods,
    swig_colorf_Sf_SwigStatic_attributes,
    swig_colorf_Sf_SwigStatic_constants,
    swig_colorf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_colorf_bases[] = {0};
static const char *swig_colorf_base_names[] = {0};
static swig_lua_class _wrap_class_colorf = { "colorf", "colorf", &SWIGTYPE_p_inlib__colorf,_proxy__wrap_new_colorf, swig_delete_colorf, swig_colorf_methods, swig_colorf_attributes, &swig_colorf_Sf_SwigStatic, swig_colorf_meta, swig_colorf_bases, swig_colorf_base_names };

static int _wrap_colorf_aquamarine(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_aquamarine",0,0) result = (inlib::colorf *) &inlib::colorf_aquamarine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumaquamarine(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumaquamarine",0,0) result = (inlib::colorf *) &inlib::colorf_mediumaquamarine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_black(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_black",0,0) result = (inlib::colorf *) &inlib::colorf_black();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_blue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_blue",0,0) result = (inlib::colorf *) &inlib::colorf_blue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_cadetblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_cadetblue",0,0) result = (inlib::colorf *) &inlib::colorf_cadetblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_cornflowerblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_cornflowerblue",0,0) result = (inlib::colorf *) &inlib::colorf_cornflowerblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkslateblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkslateblue",0,0) result = (inlib::colorf *) &inlib::colorf_darkslateblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_lightblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_lightblue",0,0) result = (inlib::colorf *) &inlib::colorf_lightblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_lightsteelblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_lightsteelblue",0,0) result = (inlib::colorf *) &inlib::colorf_lightsteelblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumblue",0,0) result = (inlib::colorf *) &inlib::colorf_mediumblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumslateblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumslateblue",0,0) result = (inlib::colorf *) &inlib::colorf_mediumslateblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_midnightblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_midnightblue",0,0) result = (inlib::colorf *) &inlib::colorf_midnightblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_navyblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_navyblue",0,0) result = (inlib::colorf *) &inlib::colorf_navyblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_navy(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_navy",0,0) result = (inlib::colorf *) &inlib::colorf_navy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_skyblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_skyblue",0,0) result = (inlib::colorf *) &inlib::colorf_skyblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_slateblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_slateblue",0,0) result = (inlib::colorf *) &inlib::colorf_slateblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_steelblue(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_steelblue",0,0) result = (inlib::colorf *) &inlib::colorf_steelblue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_coral(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_coral",0,0) result = (inlib::colorf *) &inlib::colorf_coral();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_cyan(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_cyan",0,0) result = (inlib::colorf *) &inlib::colorf_cyan();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_firebrick(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_firebrick",0,0) result = (inlib::colorf *) &inlib::colorf_firebrick();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_brown(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_brown",0,0) result = (inlib::colorf *) &inlib::colorf_brown();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_gold(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_gold",0,0) result = (inlib::colorf *) &inlib::colorf_gold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_goldenrod(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_goldenrod",0,0) result = (inlib::colorf *) &inlib::colorf_goldenrod();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_green(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_green",0,0) result = (inlib::colorf *) &inlib::colorf_green();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkgreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkgreen",0,0) result = (inlib::colorf *) &inlib::colorf_darkgreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkolivegreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkolivegreen",0,0) result = (inlib::colorf *) &inlib::colorf_darkolivegreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_forestgreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_forestgreen",0,0) result = (inlib::colorf *) &inlib::colorf_forestgreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_limegreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_limegreen",0,0) result = (inlib::colorf *) &inlib::colorf_limegreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumseagreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumseagreen",0,0) result = (inlib::colorf *) &inlib::colorf_mediumseagreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumspringgreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumspringgreen",0,0) result = (inlib::colorf *) &inlib::colorf_mediumspringgreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_palegreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_palegreen",0,0) result = (inlib::colorf *) &inlib::colorf_palegreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_seagreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_seagreen",0,0) result = (inlib::colorf *) &inlib::colorf_seagreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_springgreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_springgreen",0,0) result = (inlib::colorf *) &inlib::colorf_springgreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_yellowgreen(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_yellowgreen",0,0) result = (inlib::colorf *) &inlib::colorf_yellowgreen();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkslategrey(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkslategrey",0,0) result = (inlib::colorf *) &inlib::colorf_darkslategrey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_dimgrey(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_dimgrey",0,0) result = (inlib::colorf *) &inlib::colorf_dimgrey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_lightgrey(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_lightgrey",0,0) result = (inlib::colorf *) &inlib::colorf_lightgrey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_grey(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_grey",0,0) result = (inlib::colorf *) &inlib::colorf_grey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_khaki(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_khaki",0,0) result = (inlib::colorf *) &inlib::colorf_khaki();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_magenta(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_magenta",0,0) result = (inlib::colorf *) &inlib::colorf_magenta();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_maroon(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_maroon",0,0) result = (inlib::colorf *) &inlib::colorf_maroon();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_orange(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_orange",0,0) result = (inlib::colorf *) &inlib::colorf_orange();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_orchid(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_orchid",0,0) result = (inlib::colorf *) &inlib::colorf_orchid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkorchid(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkorchid",0,0) result = (inlib::colorf *) &inlib::colorf_darkorchid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumorchid(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumorchid",0,0) result = (inlib::colorf *) &inlib::colorf_mediumorchid();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_pink(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_pink",0,0) result = (inlib::colorf *) &inlib::colorf_pink();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_plum(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_plum",0,0) result = (inlib::colorf *) &inlib::colorf_plum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_red(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_red",0,0) result = (inlib::colorf *) &inlib::colorf_red();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_indianred(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_indianred",0,0) result = (inlib::colorf *) &inlib::colorf_indianred();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumvioletred(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumvioletred",0,0) result = (inlib::colorf *) &inlib::colorf_mediumvioletred();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_orangered(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_orangered",0,0) result = (inlib::colorf *) &inlib::colorf_orangered();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_violetred(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_violetred",0,0) result = (inlib::colorf *) &inlib::colorf_violetred();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_salmon(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_salmon",0,0) result = (inlib::colorf *) &inlib::colorf_salmon();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_sienna(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_sienna",0,0) result = (inlib::colorf *) &inlib::colorf_sienna();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_tan(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_tan",0,0) result = (inlib::colorf *) &inlib::colorf_tan();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_thistle(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_thistle",0,0) result = (inlib::colorf *) &inlib::colorf_thistle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_turquoise(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_turquoise",0,0) result = (inlib::colorf *) &inlib::colorf_turquoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_darkturquoise(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_darkturquoise",0,0) result = (inlib::colorf *) &inlib::colorf_darkturquoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_mediumturquoise(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_mediumturquoise",0,0) result = (inlib::colorf *) &inlib::colorf_mediumturquoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_violet(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_violet",0,0) result = (inlib::colorf *) &inlib::colorf_violet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_blueviolet(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_blueviolet",0,0) result = (inlib::colorf *) &inlib::colorf_blueviolet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_wheat(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_wheat",0,0) result = (inlib::colorf *) &inlib::colorf_wheat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_white(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_white",0,0) result = (inlib::colorf *) &inlib::colorf_white();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_yellow(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_yellow",0,0) result = (inlib::colorf *) &inlib::colorf_yellow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_colorf_greenyellow(lua_State* L) { int SWIG_arg = 0; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::colorf_greenyellow",0,0) result = (inlib::colorf *) &inlib::colorf_greenyellow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec2f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *result = 0 ;
  SWIG_check_num_args("inlib::vec2f::vec2f",0,0) result = (inlib::vec2f *)new inlib::vec2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec2f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; inlib::vec2f *result = 0 ;
  SWIG_check_num_args("inlib::vec2f::vec2f",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::vec2f::vec2f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec2f::vec2f",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (inlib::vec2f *)new inlib::vec2f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec2f__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = 0 ; inlib::vec2f *result = 0 ;
  SWIG_check_num_args("inlib::vec2f::vec2f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::vec2f::vec2f",1,"inlib::vec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("new_vec2f",1,SWIGTYPE_p_inlib__vec2f); } 
  result = (inlib::vec2f *)new inlib::vec2f((inlib::vec2f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec2f(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_vec2f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec2f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_vec2f__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_vec2f__SWIG_1(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vec2f'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::vec2f::vec2f()\n" "    inlib::vec2f::vec2f(float,float)\n"
  "    inlib::vec2f::vec2f(inlib::vec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_vec2f_x(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = (inlib::vec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::vec2f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec2f::x",1,"inlib::vec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("vec2f_x",1,SWIGTYPE_p_inlib__vec2f); }  result = (float *) &((inlib::vec2f const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec2f_y(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = (inlib::vec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::vec2f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec2f::y",1,"inlib::vec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("vec2f_y",1,SWIGTYPE_p_inlib__vec2f); }  result = (float *) &((inlib::vec2f const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec2f_set_value(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = (inlib::vec2f *) 0 ; float *arg2 = 0 ;
  float *arg3 = 0 ; float temp2 ; float temp3 ; SWIG_check_num_args("inlib::vec2f::set_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec2f::set_value",1,"inlib::vec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec2f::set_value",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::vec2f::set_value",3,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("vec2f_set_value",1,SWIGTYPE_p_inlib__vec2f); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3; (arg1)->set_value((float const &)*arg2,(float const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec2f_length(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = (inlib::vec2f *) 0 ; float result;
  SWIG_check_num_args("inlib::vec2f::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec2f::length",1,"inlib::vec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("vec2f_length",1,SWIGTYPE_p_inlib__vec2f); }  result = (float)((inlib::vec2f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec2f_normalize(lua_State* L) { int SWIG_arg = 0; inlib::vec2f *arg1 = (inlib::vec2f *) 0 ; float result;
  SWIG_check_num_args("inlib::vec2f::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec2f::normalize",1,"inlib::vec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec2f,0))){
    SWIG_fail_ptr("vec2f_normalize",1,SWIGTYPE_p_inlib__vec2f); }  result = (float)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_vec2f(void *obj) {
inlib::vec2f *arg1 = (inlib::vec2f *) obj;
delete arg1;
}
static int _proxy__wrap_new_vec2f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vec2f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vec2f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vec2f_methods[]= {
    { "x", _wrap_vec2f_x},
    { "y", _wrap_vec2f_y},
    { "set_value", _wrap_vec2f_set_value},
    { "length", _wrap_vec2f_length},
    { "normalize", _wrap_vec2f_normalize},
    {0,0}
};
static swig_lua_method swig_vec2f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_vec2f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vec2f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vec2f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vec2f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vec2f_Sf_SwigStatic = {
    "vec2f",
    swig_vec2f_Sf_SwigStatic_methods,
    swig_vec2f_Sf_SwigStatic_attributes,
    swig_vec2f_Sf_SwigStatic_constants,
    swig_vec2f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vec2f_bases[] = {0};
static const char *swig_vec2f_base_names[] = {0};
static swig_lua_class _wrap_class_vec2f = { "vec2f", "vec2f", &SWIGTYPE_p_inlib__vec2f,_proxy__wrap_new_vec2f, swig_delete_vec2f, swig_vec2f_methods, swig_vec2f_attributes, &swig_vec2f_Sf_SwigStatic, swig_vec2f_meta, swig_vec2f_bases, swig_vec2f_base_names };

static int _wrap_new_vec3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::vec3f::vec3f",0,0) result = (inlib::vec3f *)new inlib::vec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  inlib::vec3f *result = 0 ; SWIG_check_num_args("inlib::vec3f::vec3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::vec3f::vec3f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec3f::vec3f",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::vec3f::vec3f",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (inlib::vec3f *)new inlib::vec3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3f__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = 0 ; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::vec3f::vec3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::vec3f::vec3f",1,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("new_vec3f",1,SWIGTYPE_p_inlib__vec3f); } 
  result = (inlib::vec3f *)new inlib::vec3f((inlib::vec3f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3f(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_vec3f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_vec3f__SWIG_2(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_vec3f__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vec3f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::vec3f::vec3f()\n" "    inlib::vec3f::vec3f(float,float,float)\n"
  "    inlib::vec3f::vec3f(inlib::vec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_vec3f_x(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::vec3f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::x",1,"inlib::vec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_x",1,SWIGTYPE_p_inlib__vec3f); }  result = (float *) &((inlib::vec3f const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3f_y(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::vec3f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::y",1,"inlib::vec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_y",1,SWIGTYPE_p_inlib__vec3f); }  result = (float *) &((inlib::vec3f const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3f_z(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::vec3f::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::z",1,"inlib::vec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_z",1,SWIGTYPE_p_inlib__vec3f); }  result = (float *) &((inlib::vec3f const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3f_set_value(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float *arg2 = 0 ;
  float *arg3 = 0 ; float *arg4 = 0 ; float temp2 ; float temp3 ; float temp4 ;
  SWIG_check_num_args("inlib::vec3f::set_value",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::set_value",1,"inlib::vec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec3f::set_value",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::vec3f::set_value",3,"float const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::vec3f::set_value",4,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_set_value",1,SWIGTYPE_p_inlib__vec3f); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3; temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set_value((float const &)*arg2,(float const &)*arg3,(float const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_vec3f_length(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float result;
  SWIG_check_num_args("inlib::vec3f::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::length",1,"inlib::vec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_length",1,SWIGTYPE_p_inlib__vec3f); }  result = (float)((inlib::vec3f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3f_normalize(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = (inlib::vec3f *) 0 ; float result;
  SWIG_check_num_args("inlib::vec3f::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3f::normalize",1,"inlib::vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("vec3f_normalize",1,SWIGTYPE_p_inlib__vec3f); }  result = (float)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_vec3f(void *obj) {
inlib::vec3f *arg1 = (inlib::vec3f *) obj;
delete arg1;
}
static int _proxy__wrap_new_vec3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vec3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vec3f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vec3f_methods[]= {
    { "x", _wrap_vec3f_x},
    { "y", _wrap_vec3f_y},
    { "z", _wrap_vec3f_z},
    { "set_value", _wrap_vec3f_set_value},
    { "length", _wrap_vec3f_length},
    { "normalize", _wrap_vec3f_normalize},
    {0,0}
};
static swig_lua_method swig_vec3f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_vec3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vec3f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vec3f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vec3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vec3f_Sf_SwigStatic = {
    "vec3f",
    swig_vec3f_Sf_SwigStatic_methods,
    swig_vec3f_Sf_SwigStatic_attributes,
    swig_vec3f_Sf_SwigStatic_constants,
    swig_vec3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vec3f_bases[] = {0};
static const char *swig_vec3f_base_names[] = {0};
static swig_lua_class _wrap_class_vec3f = { "vec3f", "vec3f", &SWIGTYPE_p_inlib__vec3f,_proxy__wrap_new_vec3f, swig_delete_vec3f, swig_vec3f_methods, swig_vec3f_attributes, &swig_vec3f_Sf_SwigStatic, swig_vec3f_meta, swig_vec3f_bases, swig_vec3f_base_names };

static int _wrap_new_mat4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::mat4f *result = 0 ;
  SWIG_check_num_args("inlib::mat4f::mat4f",0,0) result = (inlib::mat4f *)new inlib::mat4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__mat4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_mat4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::mat4f *arg1 = 0 ; inlib::mat4f *result = 0 ;
  SWIG_check_num_args("inlib::mat4f::mat4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::mat4f::mat4f",1,"inlib::mat4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__mat4f,0))){
    SWIG_fail_ptr("new_mat4f",1,SWIGTYPE_p_inlib__mat4f); } 
  result = (inlib::mat4f *)new inlib::mat4f((inlib::mat4f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__mat4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_mat4f(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_mat4f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__mat4f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_mat4f__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_mat4f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::mat4f::mat4f()\n" "    inlib::mat4f::mat4f(inlib::mat4f const &)\n"); lua_error(L);return 0; }
static void swig_delete_mat4f(void *obj) {
inlib::mat4f *arg1 = (inlib::mat4f *) obj;
delete arg1;
}
static int _proxy__wrap_new_mat4f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mat4f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mat4f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mat4f_methods[]= {
    {0,0}
};
static swig_lua_method swig_mat4f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mat4f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mat4f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mat4f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mat4f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mat4f_Sf_SwigStatic = {
    "mat4f",
    swig_mat4f_Sf_SwigStatic_methods,
    swig_mat4f_Sf_SwigStatic_attributes,
    swig_mat4f_Sf_SwigStatic_constants,
    swig_mat4f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mat4f_bases[] = {0};
static const char *swig_mat4f_base_names[] = {0};
static swig_lua_class _wrap_class_mat4f = { "mat4f", "mat4f", &SWIGTYPE_p_inlib__mat4f,_proxy__wrap_new_mat4f, swig_delete_mat4f, swig_mat4f_methods, swig_mat4f_attributes, &swig_mat4f_Sf_SwigStatic, swig_mat4f_meta, swig_mat4f_bases, swig_mat4f_base_names };

static int _wrap_new_rotf__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::rotf *result = 0 ;
  SWIG_check_num_args("inlib::rotf::rotf",0,0) result = (inlib::rotf *)new inlib::rotf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotf__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = 0 ; float arg2 ;
  inlib::rotf *result = 0 ; SWIG_check_num_args("inlib::rotf::rotf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotf::rotf",1,"inlib::vec3f const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rotf::rotf",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("new_rotf",1,SWIGTYPE_p_inlib__vec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (inlib::rotf *)new inlib::rotf((inlib::vec3f const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotf__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::vec3f *arg1 = 0 ; inlib::vec3f *arg2 = 0 ;
  inlib::rotf *result = 0 ; SWIG_check_num_args("inlib::rotf::rotf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotf::rotf",1,"inlib::vec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rotf::rotf",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("new_rotf",1,SWIGTYPE_p_inlib__vec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("new_rotf",2,SWIGTYPE_p_inlib__vec3f); } 
  result = (inlib::rotf *)new inlib::rotf((inlib::vec3f const &)*arg1,(inlib::vec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotf__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::rotf *arg1 = 0 ; inlib::rotf *result = 0 ;
  SWIG_check_num_args("inlib::rotf::rotf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotf::rotf",1,"inlib::rotf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rotf,0))){
    SWIG_fail_ptr("new_rotf",1,SWIGTYPE_p_inlib__rotf); }  result = (inlib::rotf *)new inlib::rotf((inlib::rotf const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotf(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rotf__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rotf, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rotf__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rotf__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_rotf__SWIG_1(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rotf'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::rotf::rotf()\n" "    inlib::rotf::rotf(inlib::vec3f const &,float)\n"
  "    inlib::rotf::rotf(inlib::vec3f const &,inlib::vec3f const &)\n" "    inlib::rotf::rotf(inlib::rotf const &)\n");
  lua_error(L);return 0; }
static void swig_delete_rotf(void *obj) {
inlib::rotf *arg1 = (inlib::rotf *) obj;
delete arg1;
}
static int _proxy__wrap_new_rotf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rotf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rotf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rotf_methods[]= {
    {0,0}
};
static swig_lua_method swig_rotf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rotf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rotf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rotf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rotf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rotf_Sf_SwigStatic = {
    "rotf",
    swig_rotf_Sf_SwigStatic_methods,
    swig_rotf_Sf_SwigStatic_attributes,
    swig_rotf_Sf_SwigStatic_constants,
    swig_rotf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rotf_bases[] = {0};
static const char *swig_rotf_base_names[] = {0};
static swig_lua_class _wrap_class_rotf = { "rotf", "rotf", &SWIGTYPE_p_inlib__rotf,_proxy__wrap_new_rotf, swig_delete_rotf, swig_rotf_methods, swig_rotf_attributes, &swig_rotf_Sf_SwigStatic, swig_rotf_meta, swig_rotf_bases, swig_rotf_base_names };

static int _wrap_new_box3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::box3f *result = 0 ;
  SWIG_check_num_args("inlib::box3f::box3f",0,0) result = (inlib::box3f *)new inlib::box3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__box3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_box3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = 0 ; inlib::box3f *result = 0 ;
  SWIG_check_num_args("inlib::box3f::box3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::box3f::box3f",1,"inlib::box3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("new_box3f",1,SWIGTYPE_p_inlib__box3f); } 
  result = (inlib::box3f *)new inlib::box3f((inlib::box3f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__box3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_box3f(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_box3f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_box3f__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_box3f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::box3f::box3f()\n" "    inlib::box3f::box3f(inlib::box3f const &)\n"); lua_error(L);return 0; }
static int _wrap_box3f_make_empty(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ;
  SWIG_check_num_args("inlib::box3f::make_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::make_empty",1,"inlib::box3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_make_empty",1,SWIGTYPE_p_inlib__box3f); }  (arg1)->make_empty(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3f_is_empty(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ; bool result;
  SWIG_check_num_args("inlib::box3f::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::is_empty",1,"inlib::box3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_is_empty",1,SWIGTYPE_p_inlib__box3f); }  result = (bool)((inlib::box3f const *)arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3f_extend_by__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ;
  inlib::vec3f *arg2 = 0 ; SWIG_check_num_args("inlib::box3f::extend_by",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::extend_by",1,"inlib::box3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::box3f::extend_by",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_extend_by",1,SWIGTYPE_p_inlib__box3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("box3f_extend_by",2,SWIGTYPE_p_inlib__vec3f); }  (arg1)->extend_by((inlib::vec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3f_extend_by__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("inlib::box3f::extend_by",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::extend_by",1,"inlib::box3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::box3f::extend_by",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::box3f::extend_by",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::box3f::extend_by",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_extend_by",1,SWIGTYPE_p_inlib__box3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->extend_by(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3f_extend_by(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3f, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_box3f_extend_by__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_box3f_extend_by__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'box3f_extend_by'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::box3f::extend_by(inlib::vec3f const &)\n" "    inlib::box3f::extend_by(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_box3f_mn(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::box3f::mn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::mn",1,"inlib::box3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_mn",1,SWIGTYPE_p_inlib__box3f); }  result = (inlib::vec3f *) &((inlib::box3f const *)arg1)->mn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_box3f_mx(lua_State* L) { int SWIG_arg = 0; inlib::box3f *arg1 = (inlib::box3f *) 0 ; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::box3f::mx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3f::mx",1,"inlib::box3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3f,0))){
    SWIG_fail_ptr("box3f_mx",1,SWIGTYPE_p_inlib__box3f); }  result = (inlib::vec3f *) &((inlib::box3f const *)arg1)->mx();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_box3f(void *obj) {
inlib::box3f *arg1 = (inlib::box3f *) obj;
delete arg1;
}
static int _proxy__wrap_new_box3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_box3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_box3f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_box3f_methods[]= {
    { "make_empty", _wrap_box3f_make_empty},
    { "is_empty", _wrap_box3f_is_empty},
    { "extend_by", _wrap_box3f_extend_by},
    { "mn", _wrap_box3f_mn},
    { "mx", _wrap_box3f_mx},
    {0,0}
};
static swig_lua_method swig_box3f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_box3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_box3f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_box3f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_box3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_box3f_Sf_SwigStatic = {
    "box3f",
    swig_box3f_Sf_SwigStatic_methods,
    swig_box3f_Sf_SwigStatic_attributes,
    swig_box3f_Sf_SwigStatic_constants,
    swig_box3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_box3f_bases[] = {0};
static const char *swig_box3f_base_names[] = {0};
static swig_lua_class _wrap_class_box3f = { "box3f", "box3f", &SWIGTYPE_p_inlib__box3f,_proxy__wrap_new_box3f, swig_delete_box3f, swig_box3f_methods, swig_box3f_attributes, &swig_box3f_Sf_SwigStatic, swig_box3f_meta, swig_box3f_bases, swig_box3f_base_names };

static int _wrap_new_vec3d__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *result = 0 ;
  SWIG_check_num_args("inlib::vec3d::vec3d",0,0) result = (inlib::vec3d *)new inlib::vec3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3d__SWIG_1(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  inlib::vec3d *result = 0 ; SWIG_check_num_args("inlib::vec3d::vec3d",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::vec3d::vec3d",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec3d::vec3d",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::vec3d::vec3d",3,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3);
  result = (inlib::vec3d *)new inlib::vec3d(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3d__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = 0 ; inlib::vec3d *result = 0 ;
  SWIG_check_num_args("inlib::vec3d::vec3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::vec3d::vec3d",1,"inlib::vec3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("new_vec3d",1,SWIGTYPE_p_inlib__vec3d); } 
  result = (inlib::vec3d *)new inlib::vec3d((inlib::vec3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_vec3d(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_vec3d__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_vec3d__SWIG_2(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_vec3d__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vec3d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::vec3d::vec3d()\n" "    inlib::vec3d::vec3d(double,double,double)\n"
  "    inlib::vec3d::vec3d(inlib::vec3d const &)\n"); lua_error(L);return 0; }
static int _wrap_vec3d_x(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double *result = 0 ;
  SWIG_check_num_args("inlib::vec3d::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::x",1,"inlib::vec3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_x",1,SWIGTYPE_p_inlib__vec3d); }  result = (double *) &((inlib::vec3d const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3d_y(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double *result = 0 ;
  SWIG_check_num_args("inlib::vec3d::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::y",1,"inlib::vec3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_y",1,SWIGTYPE_p_inlib__vec3d); }  result = (double *) &((inlib::vec3d const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3d_z(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double *result = 0 ;
  SWIG_check_num_args("inlib::vec3d::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::z",1,"inlib::vec3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_z",1,SWIGTYPE_p_inlib__vec3d); }  result = (double *) &((inlib::vec3d const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3d_set_value(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double *arg2 = 0 ;
  double *arg3 = 0 ; double *arg4 = 0 ; double temp2 ; double temp3 ; double temp4 ;
  SWIG_check_num_args("inlib::vec3d::set_value",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::set_value",1,"inlib::vec3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::vec3d::set_value",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::vec3d::set_value",3,"double const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::vec3d::set_value",4,"double const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_set_value",1,SWIGTYPE_p_inlib__vec3d); }  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3; temp4=(double)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set_value((double const &)*arg2,(double const &)*arg3,(double const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_vec3d_length(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double result;
  SWIG_check_num_args("inlib::vec3d::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::length",1,"inlib::vec3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_length",1,SWIGTYPE_p_inlib__vec3d); }  result = (double)((inlib::vec3d const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vec3d_normalize(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = (inlib::vec3d *) 0 ; double result;
  SWIG_check_num_args("inlib::vec3d::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::vec3d::normalize",1,"inlib::vec3d *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("vec3d_normalize",1,SWIGTYPE_p_inlib__vec3d); }  result = (double)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_vec3d(void *obj) {
inlib::vec3d *arg1 = (inlib::vec3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_vec3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vec3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vec3d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vec3d_methods[]= {
    { "x", _wrap_vec3d_x},
    { "y", _wrap_vec3d_y},
    { "z", _wrap_vec3d_z},
    { "set_value", _wrap_vec3d_set_value},
    { "length", _wrap_vec3d_length},
    { "normalize", _wrap_vec3d_normalize},
    {0,0}
};
static swig_lua_method swig_vec3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_vec3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vec3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vec3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vec3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vec3d_Sf_SwigStatic = {
    "vec3d",
    swig_vec3d_Sf_SwigStatic_methods,
    swig_vec3d_Sf_SwigStatic_attributes,
    swig_vec3d_Sf_SwigStatic_constants,
    swig_vec3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vec3d_bases[] = {0};
static const char *swig_vec3d_base_names[] = {0};
static swig_lua_class _wrap_class_vec3d = { "vec3d", "vec3d", &SWIGTYPE_p_inlib__vec3d,_proxy__wrap_new_vec3d, swig_delete_vec3d, swig_vec3d_methods, swig_vec3d_attributes, &swig_vec3d_Sf_SwigStatic, swig_vec3d_meta, swig_vec3d_bases, swig_vec3d_base_names };

static int _wrap_new_rotd__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::rotd *result = 0 ;
  SWIG_check_num_args("inlib::rotd::rotd",0,0) result = (inlib::rotd *)new inlib::rotd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotd__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = 0 ; double arg2 ;
  inlib::rotd *result = 0 ; SWIG_check_num_args("inlib::rotd::rotd",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotd::rotd",1,"inlib::vec3d const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rotd::rotd",2,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("new_rotd",1,SWIGTYPE_p_inlib__vec3d); }  arg2 = (double)lua_tonumber(L, 2);
  result = (inlib::rotd *)new inlib::rotd((inlib::vec3d const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotd__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::vec3d *arg1 = 0 ; inlib::vec3d *arg2 = 0 ;
  inlib::rotd *result = 0 ; SWIG_check_num_args("inlib::rotd::rotd",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotd::rotd",1,"inlib::vec3d const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rotd::rotd",2,"inlib::vec3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("new_rotd",1,SWIGTYPE_p_inlib__vec3d); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("new_rotd",2,SWIGTYPE_p_inlib__vec3d); } 
  result = (inlib::rotd *)new inlib::rotd((inlib::vec3d const &)*arg1,(inlib::vec3d const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotd__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::rotd *arg1 = 0 ; inlib::rotd *result = 0 ;
  SWIG_check_num_args("inlib::rotd::rotd",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rotd::rotd",1,"inlib::rotd const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rotd,0))){
    SWIG_fail_ptr("new_rotd",1,SWIGTYPE_p_inlib__rotd); }  result = (inlib::rotd *)new inlib::rotd((inlib::rotd const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotd,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_rotd(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_rotd__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rotd, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rotd__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rotd__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_rotd__SWIG_1(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rotd'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::rotd::rotd()\n" "    inlib::rotd::rotd(inlib::vec3d const &,double)\n"
  "    inlib::rotd::rotd(inlib::vec3d const &,inlib::vec3d const &)\n" "    inlib::rotd::rotd(inlib::rotd const &)\n");
  lua_error(L);return 0; }
static void swig_delete_rotd(void *obj) {
inlib::rotd *arg1 = (inlib::rotd *) obj;
delete arg1;
}
static int _proxy__wrap_new_rotd(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rotd);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rotd_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rotd_methods[]= {
    {0,0}
};
static swig_lua_method swig_rotd_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rotd_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rotd_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rotd_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rotd_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rotd_Sf_SwigStatic = {
    "rotd",
    swig_rotd_Sf_SwigStatic_methods,
    swig_rotd_Sf_SwigStatic_attributes,
    swig_rotd_Sf_SwigStatic_constants,
    swig_rotd_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rotd_bases[] = {0};
static const char *swig_rotd_base_names[] = {0};
static swig_lua_class _wrap_class_rotd = { "rotd", "rotd", &SWIGTYPE_p_inlib__rotd,_proxy__wrap_new_rotd, swig_delete_rotd, swig_rotd_methods, swig_rotd_attributes, &swig_rotd_Sf_SwigStatic, swig_rotd_meta, swig_rotd_bases, swig_rotd_base_names };

static int _wrap_new_box3d__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::box3d *result = 0 ;
  SWIG_check_num_args("inlib::box3d::box3d",0,0) result = (inlib::box3d *)new inlib::box3d();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__box3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_box3d__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = 0 ; inlib::box3d *result = 0 ;
  SWIG_check_num_args("inlib::box3d::box3d",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::box3d::box3d",1,"inlib::box3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("new_box3d",1,SWIGTYPE_p_inlib__box3d); } 
  result = (inlib::box3d *)new inlib::box3d((inlib::box3d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__box3d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_box3d(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_box3d__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_box3d__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_box3d'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::box3d::box3d()\n" "    inlib::box3d::box3d(inlib::box3d const &)\n"); lua_error(L);return 0; }
static int _wrap_box3d_make_empty(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ;
  SWIG_check_num_args("inlib::box3d::make_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::make_empty",1,"inlib::box3d *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_make_empty",1,SWIGTYPE_p_inlib__box3d); }  (arg1)->make_empty(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3d_is_empty(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ; bool result;
  SWIG_check_num_args("inlib::box3d::is_empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::is_empty",1,"inlib::box3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_is_empty",1,SWIGTYPE_p_inlib__box3d); }  result = (bool)((inlib::box3d const *)arg1)->is_empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3d_extend_by__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ;
  inlib::vec3d *arg2 = 0 ; SWIG_check_num_args("inlib::box3d::extend_by",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::extend_by",1,"inlib::box3d *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::box3d::extend_by",2,"inlib::vec3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_extend_by",1,SWIGTYPE_p_inlib__box3d); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("box3d_extend_by",2,SWIGTYPE_p_inlib__vec3d); }  (arg1)->extend_by((inlib::vec3d const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3d_extend_by__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; SWIG_check_num_args("inlib::box3d::extend_by",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::extend_by",1,"inlib::box3d *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::box3d::extend_by",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::box3d::extend_by",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::box3d::extend_by",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_extend_by",1,SWIGTYPE_p_inlib__box3d); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); (arg1)->extend_by(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_box3d_extend_by(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3d, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_box3d_extend_by__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__box3d, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_box3d_extend_by__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'box3d_extend_by'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::box3d::extend_by(inlib::vec3d const &)\n" "    inlib::box3d::extend_by(double,double,double)\n");
  lua_error(L);return 0; }
static int _wrap_box3d_mn(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ; inlib::vec3d *result = 0 ;
  SWIG_check_num_args("inlib::box3d::mn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::mn",1,"inlib::box3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_mn",1,SWIGTYPE_p_inlib__box3d); }  result = (inlib::vec3d *) &((inlib::box3d const *)arg1)->mn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3d,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_box3d_mx(lua_State* L) { int SWIG_arg = 0; inlib::box3d *arg1 = (inlib::box3d *) 0 ; inlib::vec3d *result = 0 ;
  SWIG_check_num_args("inlib::box3d::mx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::box3d::mx",1,"inlib::box3d const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__box3d,0))){
    SWIG_fail_ptr("box3d_mx",1,SWIGTYPE_p_inlib__box3d); }  result = (inlib::vec3d *) &((inlib::box3d const *)arg1)->mx();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3d,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_box3d(void *obj) {
inlib::box3d *arg1 = (inlib::box3d *) obj;
delete arg1;
}
static int _proxy__wrap_new_box3d(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_box3d);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_box3d_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_box3d_methods[]= {
    { "make_empty", _wrap_box3d_make_empty},
    { "is_empty", _wrap_box3d_is_empty},
    { "extend_by", _wrap_box3d_extend_by},
    { "mn", _wrap_box3d_mn},
    { "mx", _wrap_box3d_mx},
    {0,0}
};
static swig_lua_method swig_box3d_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_box3d_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_box3d_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_box3d_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_box3d_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_box3d_Sf_SwigStatic = {
    "box3d",
    swig_box3d_Sf_SwigStatic_methods,
    swig_box3d_Sf_SwigStatic_attributes,
    swig_box3d_Sf_SwigStatic_constants,
    swig_box3d_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_box3d_bases[] = {0};
static const char *swig_box3d_base_names[] = {0};
static swig_lua_class _wrap_class_box3d = { "box3d", "box3d", &SWIGTYPE_p_inlib__box3d,_proxy__wrap_new_box3d, swig_delete_box3d, swig_box3d_methods, swig_box3d_attributes, &swig_box3d_Sf_SwigStatic, swig_box3d_meta, swig_box3d_bases, swig_box3d_base_names };

static int _wrap_new_sf_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_string::sf_string",0,0) result = (inlib::sg::sf_string *)new inlib::sg::sf_string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_string *arg1 = 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::sf_string::sf_string",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_string::sf_string",1,"inlib::sg::sf_string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("new_sf_string",1,SWIGTYPE_p_inlib__sg__sf_string); } 
  result = (inlib::sg::sf_string *)new inlib::sg::sf_string((inlib::sg::sf_string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_string__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_string, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_string__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_string'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_string::sf_string()\n" "    inlib::sg::sf_string::sf_string(inlib::sg::sf_string const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_string_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_string *arg1 = (inlib::sg::sf_string *) 0 ; inlib::std_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_string::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_string::value",1,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("sf_string_value",1,SWIGTYPE_p_inlib__sg__sf_string); }  result = (inlib::std_string *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__std_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_string_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_string *arg1 = (inlib::sg::sf_string *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_string::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_string::value",1,"inlib::sg::sf_string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("sf_string_value",1,SWIGTYPE_p_inlib__sg__sf_string); } 
  result = (std::string *) &((inlib::sg::sf_string const *)arg1)->value();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_string_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_string *arg1 = (inlib::sg::sf_string *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("inlib::sg::sf_string::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_string::value",1,"inlib::sg::sf_string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::sf_string::value",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("sf_string_value",1,SWIGTYPE_p_inlib__sg__sf_string); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->value((std::string const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_string_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_string, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_string_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_string, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_string_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_string, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_sf_string_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_string_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_string::value()\n" "    inlib::sg::sf_string::value() const\n"
  "    inlib::sg::sf_string::value(std::string const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_string(void *obj) {
inlib::sg::sf_string *arg1 = (inlib::sg::sf_string *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_string_methods[]= {
    { "value", _wrap_sf_string_value},
    {0,0}
};
static swig_lua_method swig_sf_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_string_Sf_SwigStatic = {
    "sf_string",
    swig_sf_string_Sf_SwigStatic_methods,
    swig_sf_string_Sf_SwigStatic_attributes,
    swig_sf_string_Sf_SwigStatic_constants,
    swig_sf_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_string_bases[] = {0};
static const char *swig_sf_string_base_names[] = {0};
static swig_lua_class _wrap_class_sf_string = { "sf_string", "sf_string", &SWIGTYPE_p_inlib__sg__sf_string,_proxy__wrap_new_sf_string, swig_delete_sf_string, swig_sf_string_methods, swig_sf_string_attributes, &swig_sf_string_Sf_SwigStatic, swig_sf_string_meta, swig_sf_string_bases, swig_sf_string_base_names };

static int _wrap_new_sf_vec3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec3f::sf_vec3f",0,0) result = (inlib::sg::sf_vec3f *)new inlib::sg::sf_vec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_vec3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_vec3f *arg1 = 0 ;
  inlib::sg::sf_vec3f *result = 0 ; SWIG_check_num_args("inlib::sg::sf_vec3f::sf_vec3f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_vec3f::sf_vec3f",1,"inlib::sg::sf_vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("new_sf_vec3f",1,SWIGTYPE_p_inlib__sg__sf_vec3f); } 
  result = (inlib::sg::sf_vec3f *)new inlib::sg::sf_vec3f((inlib::sg::sf_vec3f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_vec3f(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_vec3f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vec3f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_vec3f__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_vec3f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_vec3f::sf_vec3f()\n" "    inlib::sg::sf_vec3f::sf_vec3f(inlib::sg::sf_vec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_vec3f_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec3f *arg1 = (inlib::sg::sf_vec3f *) 0 ; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec3f::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec3f::value",1,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("sf_vec3f_value",1,SWIGTYPE_p_inlib__sg__sf_vec3f); }  result = (inlib::vec3f *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_vec3f_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec3f *arg1 = (inlib::sg::sf_vec3f *) 0 ; inlib::vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec3f::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec3f::value",1,"inlib::sg::sf_vec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("sf_vec3f_value",1,SWIGTYPE_p_inlib__sg__sf_vec3f); } 
  result = (inlib::vec3f *) &((inlib::sg::sf_vec3f const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_vec3f_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec3f *arg1 = (inlib::sg::sf_vec3f *) 0 ; inlib::vec3f *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec3f::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec3f::value",1,"inlib::sg::sf_vec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::sf_vec3f::value",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("sf_vec3f_value",1,SWIGTYPE_p_inlib__sg__sf_vec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sf_vec3f_value",2,SWIGTYPE_p_inlib__vec3f); }  (arg1)->value((inlib::vec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_vec3f_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec3f_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec3f_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec3f_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_vec3f_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_vec3f::value()\n" "    inlib::sg::sf_vec3f::value() const\n"
  "    inlib::sg::sf_vec3f::value(inlib::vec3f const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_vec3f(void *obj) {
inlib::sg::sf_vec3f *arg1 = (inlib::sg::sf_vec3f *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_vec3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_vec3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_vec3f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_vec3f_methods[]= {
    { "value", _wrap_sf_vec3f_value},
    {0,0}
};
static swig_lua_method swig_sf_vec3f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_vec3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_vec3f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_vec3f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_vec3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_vec3f_Sf_SwigStatic = {
    "sf_vec3f",
    swig_sf_vec3f_Sf_SwigStatic_methods,
    swig_sf_vec3f_Sf_SwigStatic_attributes,
    swig_sf_vec3f_Sf_SwigStatic_constants,
    swig_sf_vec3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_vec3f_bases[] = {0};
static const char *swig_sf_vec3f_base_names[] = {0};
static swig_lua_class _wrap_class_sf_vec3f = { "sf_vec3f", "sf_vec3f", &SWIGTYPE_p_inlib__sg__sf_vec3f,_proxy__wrap_new_sf_vec3f, swig_delete_sf_vec3f, swig_sf_vec3f_methods, swig_sf_vec3f_attributes, &swig_sf_vec3f_Sf_SwigStatic, swig_sf_vec3f_meta, swig_sf_vec3f_bases, swig_sf_vec3f_base_names };

static int _wrap_new_sf_mat4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_mat4f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_mat4f::sf_mat4f",0,0) result = (inlib::sg::sf_mat4f *)new inlib::sg::sf_mat4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_mat4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_mat4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_mat4f *arg1 = 0 ;
  inlib::sg::sf_mat4f *result = 0 ; SWIG_check_num_args("inlib::sg::sf_mat4f::sf_mat4f",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_mat4f::sf_mat4f",1,"inlib::sg::sf_mat4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_mat4f,0))){
    SWIG_fail_ptr("new_sf_mat4f",1,SWIGTYPE_p_inlib__sg__sf_mat4f); } 
  result = (inlib::sg::sf_mat4f *)new inlib::sg::sf_mat4f((inlib::sg::sf_mat4f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_mat4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_mat4f(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_mat4f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_mat4f, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_mat4f__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_mat4f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_mat4f::sf_mat4f()\n" "    inlib::sg::sf_mat4f::sf_mat4f(inlib::sg::sf_mat4f const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_mat4f_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_mat4f *arg1 = (inlib::sg::sf_mat4f *) 0 ; inlib::mat4f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_mat4f::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_mat4f::value",1,"inlib::sg::sf_mat4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_mat4f,0))){
    SWIG_fail_ptr("sf_mat4f_value",1,SWIGTYPE_p_inlib__sg__sf_mat4f); }  result = (inlib::mat4f *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__mat4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_mat4f_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_mat4f *arg1 = (inlib::sg::sf_mat4f *) 0 ; inlib::mat4f *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_mat4f::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_mat4f::value",1,"inlib::sg::sf_mat4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_mat4f,0))){
    SWIG_fail_ptr("sf_mat4f_value",1,SWIGTYPE_p_inlib__sg__sf_mat4f); } 
  result = (inlib::mat4f *) &((inlib::sg::sf_mat4f const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__mat4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_mat4f_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_mat4f *arg1 = (inlib::sg::sf_mat4f *) 0 ; inlib::mat4f *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::sf_mat4f::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_mat4f::value",1,"inlib::sg::sf_mat4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::sf_mat4f::value",2,"inlib::mat4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_mat4f,0))){
    SWIG_fail_ptr("sf_mat4f_value",1,SWIGTYPE_p_inlib__sg__sf_mat4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__mat4f,0))){
    SWIG_fail_ptr("sf_mat4f_value",2,SWIGTYPE_p_inlib__mat4f); }  (arg1)->value((inlib::mat4f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_mat4f_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_mat4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_mat4f_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_mat4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_mat4f_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_mat4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__mat4f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_mat4f_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_mat4f_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_mat4f::value()\n" "    inlib::sg::sf_mat4f::value() const\n"
  "    inlib::sg::sf_mat4f::value(inlib::mat4f const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_mat4f(void *obj) {
inlib::sg::sf_mat4f *arg1 = (inlib::sg::sf_mat4f *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_mat4f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_mat4f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_mat4f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_mat4f_methods[]= {
    { "value", _wrap_sf_mat4f_value},
    {0,0}
};
static swig_lua_method swig_sf_mat4f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_mat4f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_mat4f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_mat4f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_mat4f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_mat4f_Sf_SwigStatic = {
    "sf_mat4f",
    swig_sf_mat4f_Sf_SwigStatic_methods,
    swig_sf_mat4f_Sf_SwigStatic_attributes,
    swig_sf_mat4f_Sf_SwigStatic_constants,
    swig_sf_mat4f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_mat4f_bases[] = {0};
static const char *swig_sf_mat4f_base_names[] = {0};
static swig_lua_class _wrap_class_sf_mat4f = { "sf_mat4f", "sf_mat4f", &SWIGTYPE_p_inlib__sg__sf_mat4f,_proxy__wrap_new_sf_mat4f, swig_delete_sf_mat4f, swig_sf_mat4f_methods, swig_sf_mat4f_attributes, &swig_sf_mat4f_Sf_SwigStatic, swig_sf_mat4f_meta, swig_sf_mat4f_bases, swig_sf_mat4f_base_names };

static int _wrap_new_sf_rotf__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_rotf *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_rotf::sf_rotf",0,0) result = (inlib::sg::sf_rotf *)new inlib::sg::sf_rotf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_rotf__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_rotf *arg1 = 0 ;
  inlib::sg::sf_rotf *result = 0 ; SWIG_check_num_args("inlib::sg::sf_rotf::sf_rotf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_rotf::sf_rotf",1,"inlib::sg::sf_rotf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_rotf,0))){
    SWIG_fail_ptr("new_sf_rotf",1,SWIGTYPE_p_inlib__sg__sf_rotf); } 
  result = (inlib::sg::sf_rotf *)new inlib::sg::sf_rotf((inlib::sg::sf_rotf const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_rotf,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_rotf(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_rotf__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_rotf, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_rotf__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_rotf'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_rotf::sf_rotf()\n" "    inlib::sg::sf_rotf::sf_rotf(inlib::sg::sf_rotf const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_rotf_value__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_rotf *arg1 = (inlib::sg::sf_rotf *) 0 ;
  inlib::rotf *result = 0 ; SWIG_check_num_args("inlib::sg::sf_rotf::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_rotf::value",1,"inlib::sg::sf_rotf *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_rotf,0))){
    SWIG_fail_ptr("sf_rotf_value",1,SWIGTYPE_p_inlib__sg__sf_rotf); }  result = (inlib::rotf *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_rotf_value__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_rotf *arg1 = (inlib::sg::sf_rotf *) 0 ;
  inlib::rotf *result = 0 ; SWIG_check_num_args("inlib::sg::sf_rotf::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_rotf::value",1,"inlib::sg::sf_rotf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_rotf,0))){
    SWIG_fail_ptr("sf_rotf_value",1,SWIGTYPE_p_inlib__sg__sf_rotf); } 
  result = (inlib::rotf *) &((inlib::sg::sf_rotf const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rotf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_rotf_value__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_rotf *arg1 = (inlib::sg::sf_rotf *) 0 ;
  inlib::rotf *arg2 = 0 ; SWIG_check_num_args("inlib::sg::sf_rotf::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_rotf::value",1,"inlib::sg::sf_rotf *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::sf_rotf::value",2,"inlib::rotf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_rotf,0))){
    SWIG_fail_ptr("sf_rotf_value",1,SWIGTYPE_p_inlib__sg__sf_rotf); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rotf,0))){
    SWIG_fail_ptr("sf_rotf_value",2,SWIGTYPE_p_inlib__rotf); }  (arg1)->value((inlib::rotf const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_rotf_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_rotf, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_rotf_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_rotf, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_rotf_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_rotf, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__rotf, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_rotf_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_rotf_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_rotf::value()\n" "    inlib::sg::sf_rotf::value() const\n"
  "    inlib::sg::sf_rotf::value(inlib::rotf const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_rotf(void *obj) {
inlib::sg::sf_rotf *arg1 = (inlib::sg::sf_rotf *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_rotf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_rotf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_rotf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_rotf_methods[]= {
    { "value", _wrap_sf_rotf_value},
    {0,0}
};
static swig_lua_method swig_sf_rotf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_rotf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_rotf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_rotf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_rotf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_rotf_Sf_SwigStatic = {
    "sf_rotf",
    swig_sf_rotf_Sf_SwigStatic_methods,
    swig_sf_rotf_Sf_SwigStatic_attributes,
    swig_sf_rotf_Sf_SwigStatic_constants,
    swig_sf_rotf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_rotf_bases[] = {0};
static const char *swig_sf_rotf_base_names[] = {0};
static swig_lua_class _wrap_class_sf_rotf = { "sf_rotf", "sf_rotf", &SWIGTYPE_p_inlib__sg__sf_rotf,_proxy__wrap_new_sf_rotf, swig_delete_sf_rotf, swig_sf_rotf_methods, swig_sf_rotf_attributes, &swig_sf_rotf_Sf_SwigStatic, swig_sf_rotf_meta, swig_sf_rotf_bases, swig_sf_rotf_base_names };

static int _wrap_new_mf_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_string::mf_string",0,0) result = (inlib::sg::mf_string *)new inlib::sg::mf_string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_string *arg1 = 0 ;
  inlib::sg::mf_string *result = 0 ; SWIG_check_num_args("inlib::sg::mf_string::mf_string",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::mf_string::mf_string",1,"inlib::sg::mf_string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_string,0))){
    SWIG_fail_ptr("new_mf_string",1,SWIGTYPE_p_inlib__sg__mf_string); } 
  result = (inlib::sg::mf_string *)new inlib::sg::mf_string((inlib::sg::mf_string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_mf_string__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__mf_string, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_mf_string__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_mf_string'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::mf_string::mf_string()\n" "    inlib::sg::mf_string::mf_string(inlib::sg::mf_string const &)\n");
  lua_error(L);return 0; }
static int _wrap_mf_string_size(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_string *arg1 = (inlib::sg::mf_string *) 0 ;
  size_t result; SWIG_check_num_args("inlib::sg::mf_string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_string::size",1,"inlib::sg::mf_string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_string,0))){
    SWIG_fail_ptr("mf_string_size",1,SWIGTYPE_p_inlib__sg__mf_string); }  result = ((inlib::sg::mf_string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_string_empty(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_string *arg1 = (inlib::sg::mf_string *) 0 ;
  bool result; SWIG_check_num_args("inlib::sg::mf_string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_string::empty",1,"inlib::sg::mf_string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_string,0))){
    SWIG_fail_ptr("mf_string_empty",1,SWIGTYPE_p_inlib__sg__mf_string); } 
  result = (bool)((inlib::sg::mf_string const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_string_values(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_string *arg1 = (inlib::sg::mf_string *) 0 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("inlib::sg::mf_string::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_string::values",1,"inlib::sg::mf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_string,0))){
    SWIG_fail_ptr("mf_string_values",1,SWIGTYPE_p_inlib__sg__mf_string); } 
  result = (std::vector< std::string > *) &(arg1)->values();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_mf_string(void *obj) {
inlib::sg::mf_string *arg1 = (inlib::sg::mf_string *) obj;
delete arg1;
}
static int _proxy__wrap_new_mf_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mf_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mf_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mf_string_methods[]= {
    { "size", _wrap_mf_string_size},
    { "empty", _wrap_mf_string_empty},
    { "values", _wrap_mf_string_values},
    {0,0}
};
static swig_lua_method swig_mf_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mf_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mf_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mf_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mf_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mf_string_Sf_SwigStatic = {
    "mf_string",
    swig_mf_string_Sf_SwigStatic_methods,
    swig_mf_string_Sf_SwigStatic_attributes,
    swig_mf_string_Sf_SwigStatic_constants,
    swig_mf_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mf_string_bases[] = {0};
static const char *swig_mf_string_base_names[] = {0};
static swig_lua_class _wrap_class_mf_string = { "mf_string", "mf_string", &SWIGTYPE_p_inlib__sg__mf_string,_proxy__wrap_new_mf_string, swig_delete_mf_string, swig_mf_string_methods, swig_mf_string_attributes, &swig_mf_string_Sf_SwigStatic, swig_mf_string_meta, swig_mf_string_bases, swig_mf_string_base_names };

static int _wrap_new_sf_bool__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< bool >::sf",0,0) result = (inlib::sg::sf< bool > *)new inlib::sg::sf< bool >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_bool__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< bool > *arg1 = 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::sf< bool >::sf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf< bool >::sf",1,"inlib::sg::sf< bool > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("new_sf_bool",1,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  result = (inlib::sg::sf< bool > *)new inlib::sg::sf< bool >((inlib::sg::sf< bool > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_bool(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_bool__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_bool_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_bool__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_bool'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< bool >::sf()\n" "    inlib::sg::sf< bool >::sf(inlib::sg::sf< bool > const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_bool_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< bool > *arg1 = (inlib::sg::sf< bool > *) 0 ; bool *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< bool >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< bool >::value",1,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sf_bool_value",1,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  result = (bool *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_bool_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< bool > *arg1 = (inlib::sg::sf< bool > *) 0 ; bool *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< bool >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< bool >::value",1,"inlib::sg::sf< bool > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sf_bool_value",1,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  result = (bool *) &((inlib::sg::sf< bool > const *)arg1)->value(); lua_pushboolean(L,(int)((*result)!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_bool_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< bool > *arg1 = (inlib::sg::sf< bool > *) 0 ; bool *arg2 = 0 ; bool temp2 ;
  SWIG_check_num_args("inlib::sg::sf< bool >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< bool >::value",1,"inlib::sg::sf< bool > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::sg::sf< bool >::value",2,"bool const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sf_bool_value",1,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  temp2=(lua_toboolean(L, 2)!=0); arg2=&temp2;
  (arg1)->value((bool const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_bool_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_bool_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_bool_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_sf_bool_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_bool_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< bool >::value()\n" "    inlib::sg::sf< bool >::value() const\n"
  "    inlib::sg::sf< bool >::value(bool const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_bool_value_cp(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< bool > *arg1 = (inlib::sg::sf< bool > *) 0 ;
  bool result; SWIG_check_num_args("inlib::sg::sf< bool >::value_cp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< bool >::value_cp",1,"inlib::sg::sf< bool > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sf_bool_value_cp",1,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  result = (bool)inlib_sg_sf_Sl_bool_Sg__value_cp((inlib::sg::sf< bool > const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sf_bool(void *obj) {
inlib::sg::sf< bool > *arg1 = (inlib::sg::sf< bool > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_bool(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_bool);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_bool_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_bool_methods[]= {
    { "value", _wrap_sf_bool_value},
    { "value_cp", _wrap_sf_bool_value_cp},
    {0,0}
};
static swig_lua_method swig_sf_bool_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_bool_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_bool_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_bool_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_bool_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_bool_Sf_SwigStatic = {
    "sf_bool",
    swig_sf_bool_Sf_SwigStatic_methods,
    swig_sf_bool_Sf_SwigStatic_attributes,
    swig_sf_bool_Sf_SwigStatic_constants,
    swig_sf_bool_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_bool_bases[] = {0};
static const char *swig_sf_bool_base_names[] = {0};
static swig_lua_class _wrap_class_sf_bool = { "sf_bool", "sf_bool", &SWIGTYPE_p_inlib__sg__sfT_bool_t,_proxy__wrap_new_sf_bool, swig_delete_sf_bool, swig_sf_bool_methods, swig_sf_bool_attributes, &swig_sf_bool_Sf_SwigStatic, swig_sf_bool_meta, swig_sf_bool_bases, swig_sf_bool_base_names };

static int _wrap_new_sf_float__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< float >::sf",0,0) result = (inlib::sg::sf< float > *)new inlib::sg::sf< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_float__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< float > *arg1 = 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::sf< float >::sf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf< float >::sf",1,"inlib::sg::sf< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("new_sf_float",1,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  result = (inlib::sg::sf< float > *)new inlib::sg::sf< float >((inlib::sg::sf< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_float(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_float__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_float__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_float'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< float >::sf()\n" "    inlib::sg::sf< float >::sf(inlib::sg::sf< float > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_float_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< float > *arg1 = (inlib::sg::sf< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< float >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< float >::value",1,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sf_float_value",1,SWIGTYPE_p_inlib__sg__sfT_float_t); }  result = (float *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_float_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< float > *arg1 = (inlib::sg::sf< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< float >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< float >::value",1,"inlib::sg::sf< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sf_float_value",1,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  result = (float *) &((inlib::sg::sf< float > const *)arg1)->value(); lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_float_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< float > *arg1 = (inlib::sg::sf< float > *) 0 ; float *arg2 = 0 ; float temp2 ;
  SWIG_check_num_args("inlib::sg::sf< float >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< float >::value",1,"inlib::sg::sf< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf< float >::value",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sf_float_value",1,SWIGTYPE_p_inlib__sg__sfT_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((float const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_float_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_float_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_float_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_float_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_float_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< float >::value()\n" "    inlib::sg::sf< float >::value() const\n"
  "    inlib::sg::sf< float >::value(float const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_float_value_cp(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< float > *arg1 = (inlib::sg::sf< float > *) 0 ; float result;
  SWIG_check_num_args("inlib::sg::sf< float >::value_cp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< float >::value_cp",1,"inlib::sg::sf< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sf_float_value_cp",1,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  result = (float)inlib_sg_sf_Sl_float_Sg__value_cp((inlib::sg::sf< float > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sf_float(void *obj) {
inlib::sg::sf< float > *arg1 = (inlib::sg::sf< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_float(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_float);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_float_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_float_methods[]= {
    { "value", _wrap_sf_float_value},
    { "value_cp", _wrap_sf_float_value_cp},
    {0,0}
};
static swig_lua_method swig_sf_float_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_float_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_float_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_float_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_float_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_float_Sf_SwigStatic = {
    "sf_float",
    swig_sf_float_Sf_SwigStatic_methods,
    swig_sf_float_Sf_SwigStatic_attributes,
    swig_sf_float_Sf_SwigStatic_constants,
    swig_sf_float_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_float_bases[] = {0};
static const char *swig_sf_float_base_names[] = {0};
static swig_lua_class _wrap_class_sf_float = { "sf_float", "sf_float", &SWIGTYPE_p_inlib__sg__sfT_float_t,_proxy__wrap_new_sf_float, swig_delete_sf_float, swig_sf_float_methods, swig_sf_float_attributes, &swig_sf_float_Sf_SwigStatic, swig_sf_float_meta, swig_sf_float_bases, swig_sf_float_base_names };

static int _wrap_new_sf_vec_colorf__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec< inlib::colorf,float >::sf_vec",0,0)
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)new inlib::sg::sf_vec< inlib::colorf,float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_vec_colorf__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec< inlib::colorf,float > *arg1 = 0 ; inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec< inlib::colorf,float >::sf_vec",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_vec< inlib::colorf,float >::sf_vec",1,"inlib::sg::sf_vec< inlib::colorf,float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("new_sf_vec_colorf",1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)new inlib::sg::sf_vec< inlib::colorf,float >((inlib::sg::sf_vec< inlib::colorf,float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_vec_colorf(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_vec_colorf__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_vec_colorf__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_vec_colorf'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_vec< inlib::colorf,float >::sf_vec()\n"
  "    inlib::sg::sf_vec< inlib::colorf,float >::sf_vec(inlib::sg::sf_vec< inlib::colorf,float > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_vec_colorf_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec< inlib::colorf,float > *arg1 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec< inlib::colorf,float >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec< inlib::colorf,float >::value",1,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sf_vec_colorf_value",1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  result = (inlib::colorf *) &(arg1)->value(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_vec_colorf_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec< inlib::colorf,float > *arg1 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ; inlib::colorf *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec< inlib::colorf,float >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec< inlib::colorf,float >::value",1,"inlib::sg::sf_vec< inlib::colorf,float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sf_vec_colorf_value",1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  result = (inlib::colorf *) &((inlib::sg::sf_vec< inlib::colorf,float > const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__colorf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_vec_colorf_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_vec< inlib::colorf,float > *arg1 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ; inlib::colorf *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::sf_vec< inlib::colorf,float >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_vec< inlib::colorf,float >::value",1,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::sf_vec< inlib::colorf,float >::value",2,"inlib::colorf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sf_vec_colorf_value",1,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("sf_vec_colorf_value",2,SWIGTYPE_p_inlib__colorf); }  (arg1)->value((inlib::colorf const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_vec_colorf_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec_colorf_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec_colorf_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__colorf, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_vec_colorf_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_vec_colorf_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_vec< inlib::colorf,float >::value()\n"
  "    inlib::sg::sf_vec< inlib::colorf,float >::value() const\n"
  "    inlib::sg::sf_vec< inlib::colorf,float >::value(inlib::colorf const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_vec_colorf(void *obj) {
inlib::sg::sf_vec< inlib::colorf,float > *arg1 = (inlib::sg::sf_vec< inlib::colorf,float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_vec_colorf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_vec_colorf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_vec_colorf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_vec_colorf_methods[]= {
    { "value", _wrap_sf_vec_colorf_value},
    {0,0}
};
static swig_lua_method swig_sf_vec_colorf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_vec_colorf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_vec_colorf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_vec_colorf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_vec_colorf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_vec_colorf_Sf_SwigStatic = {
    "sf_vec_colorf",
    swig_sf_vec_colorf_Sf_SwigStatic_methods,
    swig_sf_vec_colorf_Sf_SwigStatic_attributes,
    swig_sf_vec_colorf_Sf_SwigStatic_constants,
    swig_sf_vec_colorf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_vec_colorf_bases[] = {0};
static const char *swig_sf_vec_colorf_base_names[] = {0};
static swig_lua_class _wrap_class_sf_vec_colorf = { "sf_vec_colorf", "sf_vec_colorf", &SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,_proxy__wrap_new_sf_vec_colorf, swig_delete_sf_vec_colorf, swig_sf_vec_colorf_methods, swig_sf_vec_colorf_attributes, &swig_sf_vec_colorf_Sf_SwigStatic, swig_sf_vec_colorf_meta, swig_sf_vec_colorf_bases, swig_sf_vec_colorf_base_names };

static int _wrap_new_sf_img_byte(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_img< inlib::byte > *arg1 = 0 ;
  inlib::sg::sf_img< inlib::byte > *result = 0 ; SWIG_check_num_args("inlib::sg::sf_img< inlib::byte >::sf_img",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_img< inlib::byte >::sf_img",1,"inlib::sg::sf_img< inlib::byte > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("new_sf_img_byte",1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t); } 
  result = (inlib::sg::sf_img< inlib::byte > *)new inlib::sg::sf_img< inlib::byte >((inlib::sg::sf_img< inlib::byte > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_img_byte_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_img< inlib::byte > *arg1 = (inlib::sg::sf_img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_img< inlib::byte >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_img< inlib::byte >::value",1,"inlib::sg::sf_img< inlib::byte > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("sf_img_byte_value",1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t); } 
  result = (inlib::img< inlib::byte > *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_img_byte_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_img< inlib::byte > *arg1 = (inlib::sg::sf_img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_img< inlib::byte >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_img< inlib::byte >::value",1,"inlib::sg::sf_img< inlib::byte > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("sf_img_byte_value",1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t); } 
  result = (inlib::img< inlib::byte > *) &((inlib::sg::sf_img< inlib::byte > const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_img_byte_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_img< inlib::byte > *arg1 = (inlib::sg::sf_img< inlib::byte > *) 0 ; inlib::img< inlib::byte > *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::sf_img< inlib::byte >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_img< inlib::byte >::value",1,"inlib::sg::sf_img< inlib::byte > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::sf_img< inlib::byte >::value",2,"inlib::img< inlib::byte > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("sf_img_byte_value",1,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("sf_img_byte_value",2,SWIGTYPE_p_inlib__imgT_inlib__byte_t); } 
  (arg1)->value((inlib::img< inlib::byte > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_img_byte_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_img_byte_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_img_byte_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__imgT_inlib__byte_t, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_img_byte_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_img_byte_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_img< inlib::byte >::value()\n" "    inlib::sg::sf_img< inlib::byte >::value() const\n"
  "    inlib::sg::sf_img< inlib::byte >::value(inlib::img< inlib::byte > const &)\n"); lua_error(L);return 0; }
static int _proxy__wrap_new_sf_img_byte(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_img_byte);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_img_byte_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_img_byte_methods[]= {
    { "value", _wrap_sf_img_byte_value},
    {0,0}
};
static swig_lua_method swig_sf_img_byte_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_img_byte_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_img_byte_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_img_byte_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_img_byte_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_img_byte_Sf_SwigStatic = {
    "sf_img_byte",
    swig_sf_img_byte_Sf_SwigStatic_methods,
    swig_sf_img_byte_Sf_SwigStatic_attributes,
    swig_sf_img_byte_Sf_SwigStatic_constants,
    swig_sf_img_byte_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_img_byte_bases[] = {0};
static const char *swig_sf_img_byte_base_names[] = {0};
static swig_lua_class _wrap_class_sf_img_byte = { "sf_img_byte", "sf_img_byte", &SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,_proxy__wrap_new_sf_img_byte,0, swig_sf_img_byte_methods, swig_sf_img_byte_attributes, &swig_sf_img_byte_Sf_SwigStatic, swig_sf_img_byte_meta, swig_sf_img_byte_bases, swig_sf_img_byte_base_names };

static int _wrap_new_sf_enum_font_modeling__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::font_modeling >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::font_modeling > *)new inlib::sg::sf_enum< inlib::sg::font_modeling >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_font_modeling__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::font_modeling > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::font_modeling >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::font_modeling >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::font_modeling > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("new_sf_enum_font_modeling",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::font_modeling > *)new inlib::sg::sf_enum< inlib::sg::font_modeling >((inlib::sg::sf_enum< inlib::sg::font_modeling > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_font_modeling(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_font_modeling__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_font_modeling__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_font_modeling'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::font_modeling >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::font_modeling >::sf_enum(inlib::sg::sf_enum< inlib::sg::font_modeling > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_font_modeling_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg1 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) 0 ;
  inlib::sg::font_modeling *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",1,"inlib::sg::sf_enum< inlib::sg::font_modeling > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("sf_enum_font_modeling_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  result = (inlib::sg::font_modeling *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__font_modeling,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_font_modeling_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg1 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) 0 ;
  inlib::sg::font_modeling *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",1,"inlib::sg::sf_enum< inlib::sg::font_modeling > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("sf_enum_font_modeling_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  result = (inlib::sg::font_modeling *) &((inlib::sg::sf_enum< inlib::sg::font_modeling > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_font_modeling_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg1 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) 0 ;
  inlib::sg::font_modeling *arg2 = 0 ; inlib::sg::font_modeling temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",1,"inlib::sg::sf_enum< inlib::sg::font_modeling > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::font_modeling >::value",2,"inlib::sg::font_modeling const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("sf_enum_font_modeling_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  temp2=(inlib::sg::font_modeling)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::font_modeling const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_font_modeling_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_font_modeling_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_font_modeling_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_font_modeling_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_font_modeling_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::font_modeling >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::font_modeling >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::font_modeling >::value(inlib::sg::font_modeling const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_font_modeling(void *obj) {
inlib::sg::sf_enum< inlib::sg::font_modeling > *arg1 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_font_modeling(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_font_modeling);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_font_modeling_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_font_modeling_methods[]= {
    { "value", _wrap_sf_enum_font_modeling_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_font_modeling_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_font_modeling_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_font_modeling_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_font_modeling_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_font_modeling_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_font_modeling_Sf_SwigStatic = {
    "sf_enum_font_modeling",
    swig_sf_enum_font_modeling_Sf_SwigStatic_methods,
    swig_sf_enum_font_modeling_Sf_SwigStatic_attributes,
    swig_sf_enum_font_modeling_Sf_SwigStatic_constants,
    swig_sf_enum_font_modeling_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_font_modeling_bases[] = {0};
static const char *swig_sf_enum_font_modeling_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_font_modeling = { "sf_enum_font_modeling", "sf_enum_font_modeling", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,_proxy__wrap_new_sf_enum_font_modeling, swig_delete_sf_enum_font_modeling, swig_sf_enum_font_modeling_methods, swig_sf_enum_font_modeling_attributes, &swig_sf_enum_font_modeling_Sf_SwigStatic, swig_sf_enum_font_modeling_meta, swig_sf_enum_font_modeling_bases, swig_sf_enum_font_modeling_base_names };

static int _wrap_new_sf_enum_winding_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::winding_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::winding_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::winding_type > *)new inlib::sg::sf_enum< inlib::sg::winding_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_winding_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::winding_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::winding_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::winding_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::winding_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_winding_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::winding_type > *)new inlib::sg::sf_enum< inlib::sg::winding_type >((inlib::sg::sf_enum< inlib::sg::winding_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_winding_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_winding_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_winding_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_winding_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::winding_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::winding_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::winding_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_winding_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) 0 ;
  inlib::sg::winding_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::winding_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::winding_type >::value",1,"inlib::sg::sf_enum< inlib::sg::winding_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("sf_enum_winding_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  result = (inlib::sg::winding_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__winding_type,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_winding_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) 0 ;
  inlib::sg::winding_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::winding_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::winding_type >::value",1,"inlib::sg::sf_enum< inlib::sg::winding_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("sf_enum_winding_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  result = (inlib::sg::winding_type *) &((inlib::sg::sf_enum< inlib::sg::winding_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_winding_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) 0 ;
  inlib::sg::winding_type *arg2 = 0 ; inlib::sg::winding_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::winding_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::winding_type >::value",1,"inlib::sg::sf_enum< inlib::sg::winding_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::winding_type >::value",2,"inlib::sg::winding_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("sf_enum_winding_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  temp2=(inlib::sg::winding_type)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::winding_type const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_winding_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_winding_type_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_winding_type_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_winding_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_winding_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::winding_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::winding_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::winding_type >::value(inlib::sg::winding_type const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_winding_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::winding_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_winding_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_winding_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_winding_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_winding_type_methods[]= {
    { "value", _wrap_sf_enum_winding_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_winding_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_winding_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_winding_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_winding_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_winding_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_winding_type_Sf_SwigStatic = {
    "sf_enum_winding_type",
    swig_sf_enum_winding_type_Sf_SwigStatic_methods,
    swig_sf_enum_winding_type_Sf_SwigStatic_attributes,
    swig_sf_enum_winding_type_Sf_SwigStatic_constants,
    swig_sf_enum_winding_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_winding_type_bases[] = {0};
static const char *swig_sf_enum_winding_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_winding_type = { "sf_enum_winding_type", "sf_enum_winding_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,_proxy__wrap_new_sf_enum_winding_type, swig_delete_sf_enum_winding_type, swig_sf_enum_winding_type_methods, swig_sf_enum_winding_type_attributes, &swig_sf_enum_winding_type_Sf_SwigStatic, swig_sf_enum_winding_type_meta, swig_sf_enum_winding_type_bases, swig_sf_enum_winding_type_base_names };

static int _wrap_new_sf_enum_marker_style__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::marker_style > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::marker_style >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::marker_style > *)new inlib::sg::sf_enum< inlib::sg::marker_style >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_marker_style__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::marker_style > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::marker_style > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::marker_style >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::marker_style >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::marker_style > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0))){
    SWIG_fail_ptr("new_sf_enum_marker_style",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::marker_style > *)new inlib::sg::sf_enum< inlib::sg::marker_style >((inlib::sg::sf_enum< inlib::sg::marker_style > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_marker_style(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_marker_style__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_marker_style__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_marker_style'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::marker_style >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::marker_style >::sf_enum(inlib::sg::sf_enum< inlib::sg::marker_style > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_marker_style_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::marker_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::marker_style > *) 0 ;
  inlib::sg::marker_style *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::marker_style >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::marker_style >::value",1,"inlib::sg::sf_enum< inlib::sg::marker_style > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0))){
    SWIG_fail_ptr("sf_enum_marker_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t); } 
  result = (inlib::sg::marker_style *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__marker_style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_marker_style_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::marker_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::marker_style > *) 0 ;
  inlib::sg::marker_style *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::marker_style >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::marker_style >::value",1,"inlib::sg::sf_enum< inlib::sg::marker_style > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0))){
    SWIG_fail_ptr("sf_enum_marker_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t); } 
  result = (inlib::sg::marker_style *) &((inlib::sg::sf_enum< inlib::sg::marker_style > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_marker_style_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::marker_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::marker_style > *) 0 ;
  inlib::sg::marker_style *arg2 = 0 ; inlib::sg::marker_style temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::marker_style >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::marker_style >::value",1,"inlib::sg::sf_enum< inlib::sg::marker_style > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::marker_style >::value",2,"inlib::sg::marker_style const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0))){
    SWIG_fail_ptr("sf_enum_marker_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t); } 
  temp2=(inlib::sg::marker_style)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::marker_style const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_marker_style_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_marker_style_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_marker_style_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_marker_style_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_marker_style_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::marker_style >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::marker_style >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::marker_style >::value(inlib::sg::marker_style const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_marker_style(void *obj) {
inlib::sg::sf_enum< inlib::sg::marker_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::marker_style > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_marker_style(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_marker_style);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_marker_style_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_marker_style_methods[]= {
    { "value", _wrap_sf_enum_marker_style_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_marker_style_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_marker_style_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_marker_style_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_marker_style_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_marker_style_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_marker_style_Sf_SwigStatic = {
    "sf_enum_marker_style",
    swig_sf_enum_marker_style_Sf_SwigStatic_methods,
    swig_sf_enum_marker_style_Sf_SwigStatic_attributes,
    swig_sf_enum_marker_style_Sf_SwigStatic_constants,
    swig_sf_enum_marker_style_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_marker_style_bases[] = {0};
static const char *swig_sf_enum_marker_style_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_marker_style = { "sf_enum_marker_style", "sf_enum_marker_style", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,_proxy__wrap_new_sf_enum_marker_style, swig_delete_sf_enum_marker_style, swig_sf_enum_marker_style_methods, swig_sf_enum_marker_style_attributes, &swig_sf_enum_marker_style_Sf_SwigStatic, swig_sf_enum_marker_style_meta, swig_sf_enum_marker_style_bases, swig_sf_enum_marker_style_base_names };

static int _wrap_new_sf_enum_area_style__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::area_style > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::area_style >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::area_style > *)new inlib::sg::sf_enum< inlib::sg::area_style >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_area_style__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::area_style > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::area_style > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::area_style >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::area_style >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::area_style > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0))){
    SWIG_fail_ptr("new_sf_enum_area_style",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::area_style > *)new inlib::sg::sf_enum< inlib::sg::area_style >((inlib::sg::sf_enum< inlib::sg::area_style > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_area_style(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_area_style__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_area_style__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_area_style'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::area_style >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::area_style >::sf_enum(inlib::sg::sf_enum< inlib::sg::area_style > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_area_style_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::area_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::area_style > *) 0 ;
  inlib::sg::area_style *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::area_style >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::area_style >::value",1,"inlib::sg::sf_enum< inlib::sg::area_style > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0))){
    SWIG_fail_ptr("sf_enum_area_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t); } 
  result = (inlib::sg::area_style *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__area_style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_area_style_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::area_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::area_style > *) 0 ;
  inlib::sg::area_style *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::area_style >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::area_style >::value",1,"inlib::sg::sf_enum< inlib::sg::area_style > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0))){
    SWIG_fail_ptr("sf_enum_area_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t); } 
  result = (inlib::sg::area_style *) &((inlib::sg::sf_enum< inlib::sg::area_style > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_area_style_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::area_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::area_style > *) 0 ;
  inlib::sg::area_style *arg2 = 0 ; inlib::sg::area_style temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::area_style >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::area_style >::value",1,"inlib::sg::sf_enum< inlib::sg::area_style > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::area_style >::value",2,"inlib::sg::area_style const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0))){
    SWIG_fail_ptr("sf_enum_area_style_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t); } 
  temp2=(inlib::sg::area_style)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::area_style const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_area_style_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_area_style_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_area_style_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_area_style_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_area_style_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::area_style >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::area_style >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::area_style >::value(inlib::sg::area_style const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_area_style(void *obj) {
inlib::sg::sf_enum< inlib::sg::area_style > *arg1 = (inlib::sg::sf_enum< inlib::sg::area_style > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_area_style(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_area_style);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_area_style_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_area_style_methods[]= {
    { "value", _wrap_sf_enum_area_style_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_area_style_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_area_style_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_area_style_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_area_style_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_area_style_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_area_style_Sf_SwigStatic = {
    "sf_enum_area_style",
    swig_sf_enum_area_style_Sf_SwigStatic_methods,
    swig_sf_enum_area_style_Sf_SwigStatic_attributes,
    swig_sf_enum_area_style_Sf_SwigStatic_constants,
    swig_sf_enum_area_style_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_area_style_bases[] = {0};
static const char *swig_sf_enum_area_style_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_area_style = { "sf_enum_area_style", "sf_enum_area_style", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,_proxy__wrap_new_sf_enum_area_style, swig_delete_sf_enum_area_style, swig_sf_enum_area_style_methods, swig_sf_enum_area_style_attributes, &swig_sf_enum_area_style_Sf_SwigStatic, swig_sf_enum_area_style_meta, swig_sf_enum_area_style_bases, swig_sf_enum_area_style_base_names };

static int _wrap_new_sf_enum_painting_policy__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::painting_policy >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::painting_policy > *)new inlib::sg::sf_enum< inlib::sg::painting_policy >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_painting_policy__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::painting_policy > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::painting_policy >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::painting_policy >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::painting_policy > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0))){
    SWIG_fail_ptr("new_sf_enum_painting_policy",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::painting_policy > *)new inlib::sg::sf_enum< inlib::sg::painting_policy >((inlib::sg::sf_enum< inlib::sg::painting_policy > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_painting_policy(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sf_enum_painting_policy__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_painting_policy__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_painting_policy'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::painting_policy >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::painting_policy >::sf_enum(inlib::sg::sf_enum< inlib::sg::painting_policy > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_painting_policy_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::painting_policy > *) 0 ;
  inlib::sg::painting_policy *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::painting_policy > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0))){
    SWIG_fail_ptr("sf_enum_painting_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t); } 
  result = (inlib::sg::painting_policy *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__painting_policy,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_painting_policy_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::painting_policy > *) 0 ;
  inlib::sg::painting_policy *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::painting_policy > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0))){
    SWIG_fail_ptr("sf_enum_painting_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t); } 
  result = (inlib::sg::painting_policy *) &((inlib::sg::sf_enum< inlib::sg::painting_policy > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_painting_policy_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::painting_policy > *) 0 ;
  inlib::sg::painting_policy *arg2 = 0 ; inlib::sg::painting_policy temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::painting_policy > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::painting_policy >::value",2,"inlib::sg::painting_policy const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0))){
    SWIG_fail_ptr("sf_enum_painting_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t); } 
  temp2=(inlib::sg::painting_policy)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((inlib::sg::painting_policy const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_enum_painting_policy_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_painting_policy_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_painting_policy_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_painting_policy_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_painting_policy_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::painting_policy >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::painting_policy >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::painting_policy >::value(inlib::sg::painting_policy const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_painting_policy(void *obj) {
inlib::sg::sf_enum< inlib::sg::painting_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::painting_policy > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_painting_policy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_painting_policy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_painting_policy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_painting_policy_methods[]= {
    { "value", _wrap_sf_enum_painting_policy_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_painting_policy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_painting_policy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_painting_policy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_painting_policy_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_painting_policy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_painting_policy_Sf_SwigStatic = {
    "sf_enum_painting_policy",
    swig_sf_enum_painting_policy_Sf_SwigStatic_methods,
    swig_sf_enum_painting_policy_Sf_SwigStatic_attributes,
    swig_sf_enum_painting_policy_Sf_SwigStatic_constants,
    swig_sf_enum_painting_policy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_painting_policy_bases[] = {0};
static const char *swig_sf_enum_painting_policy_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_painting_policy = { "sf_enum_painting_policy", "sf_enum_painting_policy", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,_proxy__wrap_new_sf_enum_painting_policy, swig_delete_sf_enum_painting_policy, swig_sf_enum_painting_policy_methods, swig_sf_enum_painting_policy_attributes, &swig_sf_enum_painting_policy_Sf_SwigStatic, swig_sf_enum_painting_policy_meta, swig_sf_enum_painting_policy_bases, swig_sf_enum_painting_policy_base_names };

static int _wrap_new_sf_enum_hatching_policy__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hatching_policy >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *)new inlib::sg::sf_enum< inlib::sg::hatching_policy >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_hatching_policy__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::hatching_policy > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hatching_policy >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hatching_policy >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::hatching_policy > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0))){
    SWIG_fail_ptr("new_sf_enum_hatching_policy",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *)new inlib::sg::sf_enum< inlib::sg::hatching_policy >((inlib::sg::sf_enum< inlib::sg::hatching_policy > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_hatching_policy(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sf_enum_hatching_policy__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_hatching_policy__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_hatching_policy'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::hatching_policy >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::hatching_policy >::sf_enum(inlib::sg::sf_enum< inlib::sg::hatching_policy > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_hatching_policy_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *) 0 ;
  inlib::sg::hatching_policy *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::hatching_policy > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0))){
    SWIG_fail_ptr("sf_enum_hatching_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t); } 
  result = (inlib::sg::hatching_policy *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__hatching_policy,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_hatching_policy_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *) 0 ;
  inlib::sg::hatching_policy *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::hatching_policy > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0))){
    SWIG_fail_ptr("sf_enum_hatching_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t); } 
  result = (inlib::sg::hatching_policy *) &((inlib::sg::sf_enum< inlib::sg::hatching_policy > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_hatching_policy_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *) 0 ;
  inlib::sg::hatching_policy *arg2 = 0 ; inlib::sg::hatching_policy temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",1,"inlib::sg::sf_enum< inlib::sg::hatching_policy > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hatching_policy >::value",2,"inlib::sg::hatching_policy const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0))){
    SWIG_fail_ptr("sf_enum_hatching_policy_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t); } 
  temp2=(inlib::sg::hatching_policy)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((inlib::sg::hatching_policy const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_enum_hatching_policy_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_hatching_policy_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_hatching_policy_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_hatching_policy_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_hatching_policy_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::hatching_policy >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::hatching_policy >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::hatching_policy >::value(inlib::sg::hatching_policy const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_hatching_policy(void *obj) {
inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg1 = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_hatching_policy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_hatching_policy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_hatching_policy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_hatching_policy_methods[]= {
    { "value", _wrap_sf_enum_hatching_policy_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_hatching_policy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_hatching_policy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_hatching_policy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_hatching_policy_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_hatching_policy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_hatching_policy_Sf_SwigStatic = {
    "sf_enum_hatching_policy",
    swig_sf_enum_hatching_policy_Sf_SwigStatic_methods,
    swig_sf_enum_hatching_policy_Sf_SwigStatic_attributes,
    swig_sf_enum_hatching_policy_Sf_SwigStatic_constants,
    swig_sf_enum_hatching_policy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_hatching_policy_bases[] = {0};
static const char *swig_sf_enum_hatching_policy_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_hatching_policy = { "sf_enum_hatching_policy", "sf_enum_hatching_policy", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,_proxy__wrap_new_sf_enum_hatching_policy, swig_delete_sf_enum_hatching_policy, swig_sf_enum_hatching_policy_methods, swig_sf_enum_hatching_policy_attributes, &swig_sf_enum_hatching_policy_Sf_SwigStatic, swig_sf_enum_hatching_policy_meta, swig_sf_enum_hatching_policy_bases, swig_sf_enum_hatching_policy_base_names };

static int _wrap_new_sf_enum_projection_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::projection_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::projection_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::projection_type > *)new inlib::sg::sf_enum< inlib::sg::projection_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_projection_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::projection_type > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::projection_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::projection_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::projection_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::projection_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_projection_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::projection_type > *)new inlib::sg::sf_enum< inlib::sg::projection_type >((inlib::sg::sf_enum< inlib::sg::projection_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_projection_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sf_enum_projection_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_projection_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_projection_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::projection_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::projection_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::projection_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_projection_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::projection_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::projection_type > *) 0 ;
  inlib::sg::projection_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::projection_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::projection_type >::value",1,"inlib::sg::sf_enum< inlib::sg::projection_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0))){
    SWIG_fail_ptr("sf_enum_projection_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t); } 
  result = (inlib::sg::projection_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__projection_type,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_projection_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::projection_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::projection_type > *) 0 ;
  inlib::sg::projection_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::projection_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::projection_type >::value",1,"inlib::sg::sf_enum< inlib::sg::projection_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0))){
    SWIG_fail_ptr("sf_enum_projection_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t); } 
  result = (inlib::sg::projection_type *) &((inlib::sg::sf_enum< inlib::sg::projection_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_projection_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::projection_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::projection_type > *) 0 ;
  inlib::sg::projection_type *arg2 = 0 ; inlib::sg::projection_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::projection_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::projection_type >::value",1,"inlib::sg::sf_enum< inlib::sg::projection_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::projection_type >::value",2,"inlib::sg::projection_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0))){
    SWIG_fail_ptr("sf_enum_projection_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t); } 
  temp2=(inlib::sg::projection_type)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((inlib::sg::projection_type const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_enum_projection_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_projection_type_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_projection_type_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_projection_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_projection_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::projection_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::projection_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::projection_type >::value(inlib::sg::projection_type const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_projection_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::projection_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::projection_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_projection_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_projection_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_projection_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_projection_type_methods[]= {
    { "value", _wrap_sf_enum_projection_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_projection_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_projection_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_projection_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_projection_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_projection_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_projection_type_Sf_SwigStatic = {
    "sf_enum_projection_type",
    swig_sf_enum_projection_type_Sf_SwigStatic_methods,
    swig_sf_enum_projection_type_Sf_SwigStatic_attributes,
    swig_sf_enum_projection_type_Sf_SwigStatic_constants,
    swig_sf_enum_projection_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_projection_type_bases[] = {0};
static const char *swig_sf_enum_projection_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_projection_type = { "sf_enum_projection_type", "sf_enum_projection_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,_proxy__wrap_new_sf_enum_projection_type, swig_delete_sf_enum_projection_type, swig_sf_enum_projection_type_methods, swig_sf_enum_projection_type_attributes, &swig_sf_enum_projection_type_Sf_SwigStatic, swig_sf_enum_projection_type_meta, swig_sf_enum_projection_type_bases, swig_sf_enum_projection_type_base_names };

static int _wrap_new_sf_enum_hjust__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hjust >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::hjust > *)new inlib::sg::sf_enum< inlib::sg::hjust >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_hjust__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_enum< inlib::sg::hjust > *arg1 = 0 ;
  inlib::sg::sf_enum< inlib::sg::hjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hjust >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hjust >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::hjust > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("new_sf_enum_hjust",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::hjust > *)new inlib::sg::sf_enum< inlib::sg::hjust >((inlib::sg::sf_enum< inlib::sg::hjust > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_hjust(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_hjust__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_hjust__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_hjust'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_enum< inlib::sg::hjust >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::hjust >::sf_enum(inlib::sg::sf_enum< inlib::sg::hjust > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_hjust_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::hjust > *) 0 ; inlib::sg::hjust *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hjust >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hjust >::value",1,"inlib::sg::sf_enum< inlib::sg::hjust > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("sf_enum_hjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  result = (inlib::sg::hjust *) &(arg1)->value(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__hjust,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_hjust_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::hjust > *) 0 ; inlib::sg::hjust *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hjust >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hjust >::value",1,"inlib::sg::sf_enum< inlib::sg::hjust > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("sf_enum_hjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  result = (inlib::sg::hjust *) &((inlib::sg::sf_enum< inlib::sg::hjust > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_hjust_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::hjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::hjust > *) 0 ; inlib::sg::hjust *arg2 = 0 ;
  inlib::sg::hjust temp2 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::hjust >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hjust >::value",1,"inlib::sg::sf_enum< inlib::sg::hjust > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::hjust >::value",2,"inlib::sg::hjust const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("sf_enum_hjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  temp2=(inlib::sg::hjust)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::hjust const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_hjust_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_hjust_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_hjust_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_hjust_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_hjust_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::hjust >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::hjust >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::hjust >::value(inlib::sg::hjust const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_hjust(void *obj) {
inlib::sg::sf_enum< inlib::sg::hjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::hjust > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_hjust(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_hjust);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_hjust_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_hjust_methods[]= {
    { "value", _wrap_sf_enum_hjust_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_hjust_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_hjust_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_hjust_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_hjust_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_hjust_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_hjust_Sf_SwigStatic = {
    "sf_enum_hjust",
    swig_sf_enum_hjust_Sf_SwigStatic_methods,
    swig_sf_enum_hjust_Sf_SwigStatic_attributes,
    swig_sf_enum_hjust_Sf_SwigStatic_constants,
    swig_sf_enum_hjust_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_hjust_bases[] = {0};
static const char *swig_sf_enum_hjust_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_hjust = { "sf_enum_hjust", "sf_enum_hjust", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,_proxy__wrap_new_sf_enum_hjust, swig_delete_sf_enum_hjust, swig_sf_enum_hjust_methods, swig_sf_enum_hjust_attributes, &swig_sf_enum_hjust_Sf_SwigStatic, swig_sf_enum_hjust_meta, swig_sf_enum_hjust_bases, swig_sf_enum_hjust_base_names };

static int _wrap_new_sf_enum_vjust__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::vjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::vjust >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::vjust > *)new inlib::sg::sf_enum< inlib::sg::vjust >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_vjust__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf_enum< inlib::sg::vjust > *arg1 = 0 ;
  inlib::sg::sf_enum< inlib::sg::vjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::vjust >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::vjust >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::vjust > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0))){
    SWIG_fail_ptr("new_sf_enum_vjust",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::vjust > *)new inlib::sg::sf_enum< inlib::sg::vjust >((inlib::sg::sf_enum< inlib::sg::vjust > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_vjust(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_vjust__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_vjust__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_vjust'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf_enum< inlib::sg::vjust >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::vjust >::sf_enum(inlib::sg::sf_enum< inlib::sg::vjust > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_vjust_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::vjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::vjust > *) 0 ; inlib::sg::vjust *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::vjust >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::vjust >::value",1,"inlib::sg::sf_enum< inlib::sg::vjust > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0))){
    SWIG_fail_ptr("sf_enum_vjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t); } 
  result = (inlib::sg::vjust *) &(arg1)->value(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__vjust,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_vjust_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::vjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::vjust > *) 0 ; inlib::sg::vjust *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::vjust >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::vjust >::value",1,"inlib::sg::sf_enum< inlib::sg::vjust > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0))){
    SWIG_fail_ptr("sf_enum_vjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t); } 
  result = (inlib::sg::vjust *) &((inlib::sg::sf_enum< inlib::sg::vjust > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_vjust_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::vjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::vjust > *) 0 ; inlib::sg::vjust *arg2 = 0 ;
  inlib::sg::vjust temp2 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::vjust >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::vjust >::value",1,"inlib::sg::sf_enum< inlib::sg::vjust > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::vjust >::value",2,"inlib::sg::vjust const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0))){
    SWIG_fail_ptr("sf_enum_vjust_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t); } 
  temp2=(inlib::sg::vjust)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::vjust const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_vjust_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_vjust_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_vjust_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_vjust_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_vjust_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::vjust >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::vjust >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::vjust >::value(inlib::sg::vjust const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_vjust(void *obj) {
inlib::sg::sf_enum< inlib::sg::vjust > *arg1 = (inlib::sg::sf_enum< inlib::sg::vjust > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_vjust(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_vjust);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_vjust_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_vjust_methods[]= {
    { "value", _wrap_sf_enum_vjust_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_vjust_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_vjust_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_vjust_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_vjust_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_vjust_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_vjust_Sf_SwigStatic = {
    "sf_enum_vjust",
    swig_sf_enum_vjust_Sf_SwigStatic_methods,
    swig_sf_enum_vjust_Sf_SwigStatic_attributes,
    swig_sf_enum_vjust_Sf_SwigStatic_constants,
    swig_sf_enum_vjust_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_vjust_bases[] = {0};
static const char *swig_sf_enum_vjust_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_vjust = { "sf_enum_vjust", "sf_enum_vjust", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,_proxy__wrap_new_sf_enum_vjust, swig_delete_sf_enum_vjust, swig_sf_enum_vjust_methods, swig_sf_enum_vjust_attributes, &swig_sf_enum_vjust_Sf_SwigStatic, swig_sf_enum_vjust_meta, swig_sf_enum_vjust_bases, swig_sf_enum_vjust_base_names };

static int _wrap_new_sf_enum_draw_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::draw_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::draw_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::draw_type > *)new inlib::sg::sf_enum< inlib::sg::draw_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_draw_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::draw_type > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::draw_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::draw_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::draw_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::draw_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_draw_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::draw_type > *)new inlib::sg::sf_enum< inlib::sg::draw_type >((inlib::sg::sf_enum< inlib::sg::draw_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_draw_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_draw_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_draw_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_draw_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::draw_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::draw_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::draw_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_draw_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::draw_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::draw_type > *) 0 ;
  inlib::sg::draw_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::draw_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::draw_type >::value",1,"inlib::sg::sf_enum< inlib::sg::draw_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0))){
    SWIG_fail_ptr("sf_enum_draw_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t); } 
  result = (inlib::sg::draw_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__draw_type,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_draw_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::draw_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::draw_type > *) 0 ;
  inlib::sg::draw_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::draw_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::draw_type >::value",1,"inlib::sg::sf_enum< inlib::sg::draw_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0))){
    SWIG_fail_ptr("sf_enum_draw_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t); } 
  result = (inlib::sg::draw_type *) &((inlib::sg::sf_enum< inlib::sg::draw_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_draw_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::draw_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::draw_type > *) 0 ;
  inlib::sg::draw_type *arg2 = 0 ; inlib::sg::draw_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::draw_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::draw_type >::value",1,"inlib::sg::sf_enum< inlib::sg::draw_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::draw_type >::value",2,"inlib::sg::draw_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0))){
    SWIG_fail_ptr("sf_enum_draw_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t); } 
  temp2=(inlib::sg::draw_type)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::draw_type const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_draw_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_draw_type_value__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_draw_type_value__SWIG_1(L);}  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_draw_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_draw_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::draw_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::draw_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::draw_type >::value(inlib::sg::draw_type const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_draw_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::draw_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::draw_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_draw_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_draw_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_draw_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_draw_type_methods[]= {
    { "value", _wrap_sf_enum_draw_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_draw_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_draw_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_draw_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_draw_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_draw_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_draw_type_Sf_SwigStatic = {
    "sf_enum_draw_type",
    swig_sf_enum_draw_type_Sf_SwigStatic_methods,
    swig_sf_enum_draw_type_Sf_SwigStatic_attributes,
    swig_sf_enum_draw_type_Sf_SwigStatic_constants,
    swig_sf_enum_draw_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_draw_type_bases[] = {0};
static const char *swig_sf_enum_draw_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_draw_type = { "sf_enum_draw_type", "sf_enum_draw_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,_proxy__wrap_new_sf_enum_draw_type, swig_delete_sf_enum_draw_type, swig_sf_enum_draw_type_methods, swig_sf_enum_draw_type_attributes, &swig_sf_enum_draw_type_Sf_SwigStatic, swig_sf_enum_draw_type_meta, swig_sf_enum_draw_type_bases, swig_sf_enum_draw_type_base_names };

static int _wrap_new_sf_enum_shade_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::shade_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::shade_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::shade_type > *)new inlib::sg::sf_enum< inlib::sg::shade_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_shade_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::shade_type > *arg1 = 0 ; inlib::sg::sf_enum< inlib::sg::shade_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::shade_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::shade_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::shade_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_shade_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::shade_type > *)new inlib::sg::sf_enum< inlib::sg::shade_type >((inlib::sg::sf_enum< inlib::sg::shade_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_shade_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_shade_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_shade_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_shade_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::shade_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::shade_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::shade_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_shade_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::shade_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::shade_type > *) 0 ;
  inlib::sg::shade_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::shade_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::shade_type >::value",1,"inlib::sg::sf_enum< inlib::sg::shade_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0))){
    SWIG_fail_ptr("sf_enum_shade_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t); } 
  result = (inlib::sg::shade_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__shade_type,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_shade_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::shade_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::shade_type > *) 0 ;
  inlib::sg::shade_type *result = 0 ; SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::shade_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::shade_type >::value",1,"inlib::sg::sf_enum< inlib::sg::shade_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0))){
    SWIG_fail_ptr("sf_enum_shade_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t); } 
  result = (inlib::sg::shade_type *) &((inlib::sg::sf_enum< inlib::sg::shade_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_shade_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::shade_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::shade_type > *) 0 ;
  inlib::sg::shade_type *arg2 = 0 ; inlib::sg::shade_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::shade_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::shade_type >::value",1,"inlib::sg::sf_enum< inlib::sg::shade_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::shade_type >::value",2,"inlib::sg::shade_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0))){
    SWIG_fail_ptr("sf_enum_shade_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t); } 
  temp2=(inlib::sg::shade_type)(int)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((inlib::sg::shade_type const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_shade_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_shade_type_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_shade_type_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_shade_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_shade_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::shade_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::shade_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::shade_type >::value(inlib::sg::shade_type const &)\n"); lua_error(L);return 0; }
static void swig_delete_sf_enum_shade_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::shade_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::shade_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_shade_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_shade_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_shade_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_shade_type_methods[]= {
    { "value", _wrap_sf_enum_shade_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_shade_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_shade_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_shade_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_shade_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_shade_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_shade_type_Sf_SwigStatic = {
    "sf_enum_shade_type",
    swig_sf_enum_shade_type_Sf_SwigStatic_methods,
    swig_sf_enum_shade_type_Sf_SwigStatic_attributes,
    swig_sf_enum_shade_type_Sf_SwigStatic_constants,
    swig_sf_enum_shade_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_shade_type_bases[] = {0};
static const char *swig_sf_enum_shade_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_shade_type = { "sf_enum_shade_type", "sf_enum_shade_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,_proxy__wrap_new_sf_enum_shade_type, swig_delete_sf_enum_shade_type, swig_sf_enum_shade_type_methods, swig_sf_enum_shade_type_attributes, &swig_sf_enum_shade_type_Sf_SwigStatic, swig_sf_enum_shade_type_meta, swig_sf_enum_shade_type_bases, swig_sf_enum_shade_type_base_names };

static int _wrap_new_mf_float__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf< float >::mf",0,0) result = (inlib::sg::mf< float > *)new inlib::sg::mf< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_float__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf< float > *arg1 = 0 ;
  inlib::sg::mf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::mf< float >::mf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::mf< float >::mf",1,"inlib::sg::mf< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("new_mf_float",1,SWIGTYPE_p_inlib__sg__mfT_float_t); } 
  result = (inlib::sg::mf< float > *)new inlib::sg::mf< float >((inlib::sg::mf< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_float(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_mf_float__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__mfT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_mf_float__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_mf_float'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::mf< float >::mf()\n" "    inlib::sg::mf< float >::mf(inlib::sg::mf< float > const &)\n");
  lua_error(L);return 0; }
static int _wrap_mf_float_size(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf< float > *arg1 = (inlib::sg::mf< float > *) 0 ;
  size_t result; SWIG_check_num_args("inlib::sg::mf< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf< float >::size",1,"inlib::sg::mf< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("mf_float_size",1,SWIGTYPE_p_inlib__sg__mfT_float_t); } 
  result = ((inlib::sg::mf< float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_float_empty(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf< float > *arg1 = (inlib::sg::mf< float > *) 0 ;
  bool result; SWIG_check_num_args("inlib::sg::mf< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf< float >::empty",1,"inlib::sg::mf< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("mf_float_empty",1,SWIGTYPE_p_inlib__sg__mfT_float_t); } 
  result = (bool)((inlib::sg::mf< float > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_float_values(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf< float > *arg1 = (inlib::sg::mf< float > *) 0 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("inlib::sg::mf< float >::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf< float >::values",1,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("mf_float_values",1,SWIGTYPE_p_inlib__sg__mfT_float_t); } 
  result = (std::vector< float > *) &(arg1)->values();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_mf_float(void *obj) {
inlib::sg::mf< float > *arg1 = (inlib::sg::mf< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_mf_float(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mf_float);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mf_float_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mf_float_methods[]= {
    { "size", _wrap_mf_float_size},
    { "empty", _wrap_mf_float_empty},
    { "values", _wrap_mf_float_values},
    {0,0}
};
static swig_lua_method swig_mf_float_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mf_float_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mf_float_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mf_float_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mf_float_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mf_float_Sf_SwigStatic = {
    "mf_float",
    swig_mf_float_Sf_SwigStatic_methods,
    swig_mf_float_Sf_SwigStatic_attributes,
    swig_mf_float_Sf_SwigStatic_constants,
    swig_mf_float_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mf_float_bases[] = {0};
static const char *swig_mf_float_base_names[] = {0};
static swig_lua_class _wrap_class_mf_float = { "mf_float", "mf_float", &SWIGTYPE_p_inlib__sg__mfT_float_t,_proxy__wrap_new_mf_float, swig_delete_mf_float, swig_mf_float_methods, swig_mf_float_attributes, &swig_mf_float_Sf_SwigStatic, swig_mf_float_meta, swig_mf_float_bases, swig_mf_float_base_names };

static int _wrap_new_mf_vec_vec2f__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_vec< inlib::vec2f,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_vec< inlib::vec2f,float >::mf_vec",0,0)
  result = (inlib::sg::mf_vec< inlib::vec2f,float > *)new inlib::sg::mf_vec< inlib::vec2f,float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_vec_vec2f__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::mf_vec< inlib::vec2f,float > *arg1 = 0 ;
  inlib::sg::mf_vec< inlib::vec2f,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_vec< inlib::vec2f,float >::mf_vec",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::mf_vec< inlib::vec2f,float >::mf_vec",1,"inlib::sg::mf_vec< inlib::vec2f,float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("new_mf_vec_vec2f",1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  result = (inlib::sg::mf_vec< inlib::vec2f,float > *)new inlib::sg::mf_vec< inlib::vec2f,float >((inlib::sg::mf_vec< inlib::vec2f,float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_vec_vec2f(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_mf_vec_vec2f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_mf_vec_vec2f__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_mf_vec_vec2f'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::mf_vec< inlib::vec2f,float >::mf_vec()\n"
  "    inlib::sg::mf_vec< inlib::vec2f,float >::mf_vec(inlib::sg::mf_vec< inlib::vec2f,float > const &)\n");
  lua_error(L);return 0; }
static int _wrap_mf_vec_vec2f_size(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_vec< inlib::vec2f,float > *arg1 = (inlib::sg::mf_vec< inlib::vec2f,float > *) 0 ; size_t result;
  SWIG_check_num_args("inlib::sg::mf_vec< inlib::vec2f,float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_vec< inlib::vec2f,float >::size",1,"inlib::sg::mf_vec< inlib::vec2f,float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("mf_vec_vec2f_size",1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  result = ((inlib::sg::mf_vec< inlib::vec2f,float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_vec_vec2f_empty(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_vec< inlib::vec2f,float > *arg1 = (inlib::sg::mf_vec< inlib::vec2f,float > *) 0 ; bool result;
  SWIG_check_num_args("inlib::sg::mf_vec< inlib::vec2f,float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_vec< inlib::vec2f,float >::empty",1,"inlib::sg::mf_vec< inlib::vec2f,float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("mf_vec_vec2f_empty",1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  result = (bool)((inlib::sg::mf_vec< inlib::vec2f,float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_vec_vec2f_values(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_vec< inlib::vec2f,float > *arg1 = (inlib::sg::mf_vec< inlib::vec2f,float > *) 0 ;
  std::vector< inlib::vec2f > *result = 0 ; SWIG_check_num_args("inlib::sg::mf_vec< inlib::vec2f,float >::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_vec< inlib::vec2f,float >::values",1,"inlib::sg::mf_vec< inlib::vec2f,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("mf_vec_vec2f_values",1,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  result = (std::vector< inlib::vec2f > *) &(arg1)->values();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__vec2f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_mf_vec_vec2f(void *obj) {
inlib::sg::mf_vec< inlib::vec2f,float > *arg1 = (inlib::sg::mf_vec< inlib::vec2f,float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_mf_vec_vec2f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mf_vec_vec2f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mf_vec_vec2f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mf_vec_vec2f_methods[]= {
    { "size", _wrap_mf_vec_vec2f_size},
    { "empty", _wrap_mf_vec_vec2f_empty},
    { "values", _wrap_mf_vec_vec2f_values},
    {0,0}
};
static swig_lua_method swig_mf_vec_vec2f_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mf_vec_vec2f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mf_vec_vec2f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mf_vec_vec2f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mf_vec_vec2f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mf_vec_vec2f_Sf_SwigStatic = {
    "mf_vec_vec2f",
    swig_mf_vec_vec2f_Sf_SwigStatic_methods,
    swig_mf_vec_vec2f_Sf_SwigStatic_attributes,
    swig_mf_vec_vec2f_Sf_SwigStatic_constants,
    swig_mf_vec_vec2f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mf_vec_vec2f_bases[] = {0};
static const char *swig_mf_vec_vec2f_base_names[] = {0};
static swig_lua_class _wrap_class_mf_vec_vec2f = { "mf_vec_vec2f", "mf_vec_vec2f", &SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,_proxy__wrap_new_mf_vec_vec2f, swig_delete_mf_vec_vec2f, swig_mf_vec_vec2f_methods, swig_mf_vec_vec2f_attributes, &swig_mf_vec_vec2f_Sf_SwigStatic, swig_mf_vec_vec2f_meta, swig_mf_vec_vec2f_bases, swig_mf_vec_vec2f_base_names };

static int _wrap_new_mf_enum_unit_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::mf_enum",0,0)
  result = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *)new inlib::sg::mf_enum< inlib::sg::plotter::unit_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_enum_unit_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg1 = 0 ;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::mf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::mf_enum",1,"inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0))){
    SWIG_fail_ptr("new_mf_enum_unit_type",1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t); } 
  result = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *)new inlib::sg::mf_enum< inlib::sg::plotter::unit_type >((inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_mf_enum_unit_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_mf_enum_unit_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_mf_enum_unit_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_mf_enum_unit_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::mf_enum()\n"
  "    inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::mf_enum(inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_mf_enum_unit_type_size(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg1 = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *) 0 ;
  size_t result; SWIG_check_num_args("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::size",1,"inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0))){
    SWIG_fail_ptr("mf_enum_unit_type_size",1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t); } 
  result = ((inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_enum_unit_type_empty(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg1 = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *) 0 ;
  bool result; SWIG_check_num_args("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::empty",1,"inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0))){
    SWIG_fail_ptr("mf_enum_unit_type_empty",1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t); } 
  result = (bool)((inlib::sg::mf_enum< inlib::sg::plotter::unit_type > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_mf_enum_unit_type_values(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg1 = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *) 0 ;
  std::vector< inlib::sg::plotter::unit_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::mf_enum< inlib::sg::plotter::unit_type >::values",1,"inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0))){
    SWIG_fail_ptr("mf_enum_unit_type_values",1,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t); } 
  result = (std::vector< inlib::sg::plotter::unit_type > *) &(arg1)->values();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__sg__plotter__unit_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_mf_enum_unit_type(void *obj) {
inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg1 = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_mf_enum_unit_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_mf_enum_unit_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_mf_enum_unit_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_mf_enum_unit_type_methods[]= {
    { "size", _wrap_mf_enum_unit_type_size},
    { "empty", _wrap_mf_enum_unit_type_empty},
    { "values", _wrap_mf_enum_unit_type_values},
    {0,0}
};
static swig_lua_method swig_mf_enum_unit_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_mf_enum_unit_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_mf_enum_unit_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_mf_enum_unit_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_mf_enum_unit_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_mf_enum_unit_type_Sf_SwigStatic = {
    "mf_enum_unit_type",
    swig_mf_enum_unit_type_Sf_SwigStatic_methods,
    swig_mf_enum_unit_type_Sf_SwigStatic_attributes,
    swig_mf_enum_unit_type_Sf_SwigStatic_constants,
    swig_mf_enum_unit_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_mf_enum_unit_type_bases[] = {0};
static const char *swig_mf_enum_unit_type_base_names[] = {0};
static swig_lua_class _wrap_class_mf_enum_unit_type = { "mf_enum_unit_type", "mf_enum_unit_type", &SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,_proxy__wrap_new_mf_enum_unit_type, swig_delete_mf_enum_unit_type, swig_mf_enum_unit_type_methods, swig_mf_enum_unit_type_attributes, &swig_mf_enum_unit_type_Sf_SwigStatic, swig_mf_enum_unit_type_meta, swig_mf_enum_unit_type_bases, swig_mf_enum_unit_type_base_names };

static int _wrap_font_arialbd_ttf(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::font_arialbd_ttf",0,0) result = (std::string *) &inlib::sg::font_arialbd_ttf();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_boxes(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_boxes",0,0) result = (std::string *) &inlib::sg::modeling_boxes();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_wire_boxes(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_wire_boxes",0,0) result = (std::string *) &inlib::sg::modeling_wire_boxes();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_lines(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_lines",0,0) result = (std::string *) &inlib::sg::modeling_lines();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_segments(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_segments",0,0) result = (std::string *) &inlib::sg::modeling_segments();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_points(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_points",0,0) result = (std::string *) &inlib::sg::modeling_points();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_top_lines(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_top_lines",0,0) result = (std::string *) &inlib::sg::modeling_top_lines();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_texts(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_texts",0,0) result = (std::string *) &inlib::sg::modeling_texts();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_curve(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_curve",0,0) result = (std::string *) &inlib::sg::modeling_curve();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_filled_curve(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_filled_curve",0,0) result = (std::string *) &inlib::sg::modeling_filled_curve();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_bar_chart(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_bar_chart",0,0) result = (std::string *) &inlib::sg::modeling_bar_chart();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_solid(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_solid",0,0) result = (std::string *) &inlib::sg::modeling_solid();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_wire_frame(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_wire_frame",0,0) result = (std::string *) &inlib::sg::modeling_wire_frame();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_reduced_wire_frame(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_reduced_wire_frame",0,0)
  result = (std::string *) &inlib::sg::modeling_reduced_wire_frame();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_polygon(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_polygon",0,0) result = (std::string *) &inlib::sg::modeling_polygon();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_none(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_none",0,0) result = (std::string *) &inlib::sg::modeling_none();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_I(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_I",0,0) result = (std::string *) &inlib::sg::modeling_I();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_plus(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_plus",0,0) result = (std::string *) &inlib::sg::modeling_plus();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_modeling_markers(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::modeling_markers",0,0) result = (std::string *) &inlib::sg::modeling_markers();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_style_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::color",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_color_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("style_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); }  if (arg1) (arg1)->color = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::color",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_color_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_highlight_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::highlight_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::highlight_color",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::highlight_color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_highlight_color_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("style_highlight_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->highlight_color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_highlight_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::highlight_color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::highlight_color",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_highlight_color_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->highlight_color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_back_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::back_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::back_color",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::back_color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_back_color_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("style_back_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->back_color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_back_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::back_color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::back_color",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_back_color_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->back_color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_line_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::line_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::line_width",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::line_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_line_width_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_line_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->line_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_line_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::line_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::line_width",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_line_width_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->line_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_marker_size_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::marker_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::marker_size",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::marker_size",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_marker_size_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_marker_size_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->marker_size = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_marker_size_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::marker_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::marker_size",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_marker_size_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->marker_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_point_size_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::point_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::point_size",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::point_size",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_point_size_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_point_size_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->point_size = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_point_size_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::point_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::point_size",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_point_size_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->point_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_font_size_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::font_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font_size",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::font_size",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_size_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_font_size_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->font_size = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_font_size_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::font_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font_size",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_size_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->font_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_font_modeling_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg2 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::font_modeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font_modeling",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::font_modeling",2,"inlib::sg::sf_enum< inlib::sg::font_modeling > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_modeling_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("style_font_modeling_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  if (arg1) (arg1)->font_modeling = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_font_modeling_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *result = 0 ; SWIG_check_num_args("inlib::sg::style::font_modeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font_modeling",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_modeling_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::font_modeling > *)& ((arg1)->font_modeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_front_face_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::front_face",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::front_face",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::front_face",2,"inlib::sg::sf_enum< inlib::sg::winding_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_front_face_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("style_front_face_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  if (arg1) (arg1)->front_face = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_front_face_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::winding_type > *result = 0 ; SWIG_check_num_args("inlib::sg::style::front_face",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::front_face",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_front_face_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::winding_type > *)& ((arg1)->front_face);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_line_pattern_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< inlib::sg::lpat > *arg2 = (inlib::sg::sf< inlib::sg::lpat > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::line_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::line_pattern",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::line_pattern",2,"inlib::sg::sf< inlib::sg::lpat > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_line_pattern_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0))){
    SWIG_fail_ptr("style_line_pattern_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t); } 
  if (arg1) (arg1)->line_pattern = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_line_pattern_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< inlib::sg::lpat > *result = 0 ; SWIG_check_num_args("inlib::sg::style::line_pattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::line_pattern",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_line_pattern_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< inlib::sg::lpat > *)& ((arg1)->line_pattern);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_marker_style_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::marker_style > *arg2 = (inlib::sg::sf_enum< inlib::sg::marker_style > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::marker_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::marker_style",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::marker_style",2,"inlib::sg::sf_enum< inlib::sg::marker_style > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_marker_style_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0))){
    SWIG_fail_ptr("style_marker_style_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t); } 
  if (arg1) (arg1)->marker_style = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_marker_style_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::marker_style > *result = 0 ; SWIG_check_num_args("inlib::sg::style::marker_style",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::marker_style",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_marker_style_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::marker_style > *)& ((arg1)->marker_style);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_area_style_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::area_style > *arg2 = (inlib::sg::sf_enum< inlib::sg::area_style > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::area_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::area_style",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::area_style",2,"inlib::sg::sf_enum< inlib::sg::area_style > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_area_style_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0))){
    SWIG_fail_ptr("style_area_style_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t); } 
  if (arg1) (arg1)->area_style = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_area_style_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::area_style > *result = 0 ; SWIG_check_num_args("inlib::sg::style::area_style",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::area_style",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_area_style_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::area_style > *)& ((arg1)->area_style);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__area_style_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_modeling_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::modeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::modeling",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::modeling",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_modeling_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_modeling_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->modeling = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_modeling_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::modeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::modeling",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_modeling_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf_string *)& ((arg1)->modeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_light_model_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::light_model",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::light_model",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::light_model",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_light_model_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_light_model_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->light_model = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_light_model_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::light_model",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::light_model",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_light_model_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->light_model);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_tick_modeling_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::tick_modeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::tick_modeling",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::tick_modeling",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_tick_modeling_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_tick_modeling_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->tick_modeling = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_tick_modeling_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::tick_modeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::tick_modeling",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_tick_modeling_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->tick_modeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_encoding_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::encoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::encoding",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::encoding",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_encoding_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_encoding_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->encoding = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_encoding_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::encoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::encoding",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_encoding_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf_string *)& ((arg1)->encoding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_smoothing_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::smoothing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::smoothing",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::smoothing",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_smoothing_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_smoothing_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->smoothing = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_smoothing_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::smoothing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::smoothing",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_smoothing_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->smoothing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_hinting_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::hinting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::hinting",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::hinting",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_hinting_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_hinting_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->hinting = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_hinting_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::hinting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::hinting",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_hinting_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< bool > *)& ((arg1)->hinting);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_cut_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::cut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::cut",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::cut",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_cut_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_cut_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->cut = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_cut_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::cut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::cut",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_cut_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf_string *)& ((arg1)->cut);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_painting_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *arg2 = (inlib::sg::sf_enum< inlib::sg::painting_policy > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::painting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::painting",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::painting",2,"inlib::sg::sf_enum< inlib::sg::painting_policy > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_painting_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0))){
    SWIG_fail_ptr("style_painting_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t); } 
  if (arg1) (arg1)->painting = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_painting_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::painting_policy > *result = 0 ; SWIG_check_num_args("inlib::sg::style::painting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::painting",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_painting_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::painting_policy > *)& ((arg1)->painting);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_hatching_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *arg2 = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::hatching",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::hatching",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::hatching",2,"inlib::sg::sf_enum< inlib::sg::hatching_policy > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_hatching_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0))){
    SWIG_fail_ptr("style_hatching_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t); } 
  if (arg1) (arg1)->hatching = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_hatching_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::hatching_policy > *result = 0 ; SWIG_check_num_args("inlib::sg::style::hatching",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::hatching",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_hatching_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::hatching_policy > *)& ((arg1)->hatching);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_projection_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::projection_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::projection_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::projection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::projection",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::projection",2,"inlib::sg::sf_enum< inlib::sg::projection_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_projection_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0))){
    SWIG_fail_ptr("style_projection_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t); } 
  if (arg1) (arg1)->projection = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_projection_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::projection_type > *result = 0 ; SWIG_check_num_args("inlib::sg::style::projection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::projection",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_projection_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_enum< inlib::sg::projection_type > *)& ((arg1)->projection);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_font_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::font",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_font_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->font = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_font_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::font",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_font_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf_string *)& ((arg1)->font);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_multi_node_limit_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< int > *arg2 = (inlib::sg::sf< int > *) 0 ; SWIG_check_num_args("inlib::sg::style::multi_node_limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::multi_node_limit",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::multi_node_limit",2,"inlib::sg::sf< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_multi_node_limit_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_int_t,0))){
    SWIG_fail_ptr("style_multi_node_limit_set",2,SWIGTYPE_p_inlib__sg__sfT_int_t); } 
  if (arg1) (arg1)->multi_node_limit = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_multi_node_limit_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< int > *result = 0 ; SWIG_check_num_args("inlib::sg::style::multi_node_limit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::multi_node_limit",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_multi_node_limit_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< int > *)& ((arg1)->multi_node_limit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_divisions_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< int > *arg2 = (inlib::sg::sf< int > *) 0 ; SWIG_check_num_args("inlib::sg::style::divisions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::divisions",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::divisions",2,"inlib::sg::sf< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_divisions_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_int_t,0))){
    SWIG_fail_ptr("style_divisions_set",2,SWIGTYPE_p_inlib__sg__sfT_int_t); }  if (arg1) (arg1)->divisions = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_divisions_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< int > *result = 0 ; SWIG_check_num_args("inlib::sg::style::divisions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::divisions",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_divisions_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< int > *)& ((arg1)->divisions);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_rotation_steps_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::style::rotation_steps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::rotation_steps",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::rotation_steps",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_rotation_steps_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("style_rotation_steps_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); } 
  if (arg1) (arg1)->rotation_steps = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_rotation_steps_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::style::rotation_steps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::rotation_steps",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_rotation_steps_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->rotation_steps);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_spacing_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::spacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::spacing",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::spacing",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_spacing_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_spacing_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->spacing = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_spacing_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::spacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::spacing",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_spacing_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< float > *)& ((arg1)->spacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_angle_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::angle",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::angle",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_angle_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_angle_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->angle = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_angle_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::angle",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_angle_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< float > *)& ((arg1)->angle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_scale_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::scale",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::scale",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_scale_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_scale_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->scale = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_scale_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::scale",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_scale_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< float > *)& ((arg1)->scale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_offset_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::offset",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::offset",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_offset_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_offset_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->offset = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_offset_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::offset",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_offset_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< float > *)& ((arg1)->offset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_strip_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::strip_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::strip_width",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::strip_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_strip_width_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_strip_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->strip_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_strip_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::strip_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::strip_width",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_strip_width_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->strip_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_visible_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::visible",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_visible_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->visible = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_visible_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::visible",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_visible_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf< bool > *)& ((arg1)->visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_bar_offset_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::bar_offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::bar_offset",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::bar_offset",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_bar_offset_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_bar_offset_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->bar_offset = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_bar_offset_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::bar_offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::bar_offset",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_bar_offset_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->bar_offset);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_bar_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::style::bar_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::bar_width",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::bar_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_bar_width_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("style_bar_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->bar_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_bar_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::style::bar_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::bar_width",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_bar_width_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->bar_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_editable_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::editable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::editable",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::editable",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_editable_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_editable_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->editable = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_editable_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::editable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::editable",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_editable_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->editable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_automated_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::automated",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_automated_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->automated = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_automated_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::automated",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_automated_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_options_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::options",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::options",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::options",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_options_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_options_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->options = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_options_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::options",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_options_get",1,SWIGTYPE_p_inlib__sg__style); }  result = (inlib::sg::sf_string *)& ((arg1)->options);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_color_mapping_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::style::color_mapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::color_mapping",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::color_mapping",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_color_mapping_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("style_color_mapping_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->color_mapping = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_color_mapping_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::style::color_mapping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::color_mapping",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_color_mapping_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->color_mapping);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_enforced_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::style::enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::enforced",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_enforced_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("style_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->enforced = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_enforced_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::style::enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::enforced",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_enforced_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_style_translation_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ; SWIG_check_num_args("inlib::sg::style::translation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::translation",1,"inlib::sg::style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::style::translation",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_translation_set",1,SWIGTYPE_p_inlib__sg__style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("style_translation_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->translation = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_style_translation_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *arg1 = (inlib::sg::style *) 0 ;
  inlib::sg::sf_vec3f *result = 0 ; SWIG_check_num_args("inlib::sg::style::translation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::style::translation",1,"inlib::sg::style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__style,0))){
    SWIG_fail_ptr("style_translation_get",1,SWIGTYPE_p_inlib__sg__style); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->translation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::style *result = 0 ;
  SWIG_check_num_args("inlib::sg::style::style",0,0) result = (inlib::sg::style *)new inlib::sg::style();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_style(void *obj) {
inlib::sg::style *arg1 = (inlib::sg::style *) obj;
delete arg1;
}
static int _proxy__wrap_new_style(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_style);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_style_attributes[] = {
    { "color", _wrap_style_color_get, _wrap_style_color_set },
    { "highlight_color", _wrap_style_highlight_color_get, _wrap_style_highlight_color_set },
    { "back_color", _wrap_style_back_color_get, _wrap_style_back_color_set },
    { "line_width", _wrap_style_line_width_get, _wrap_style_line_width_set },
    { "marker_size", _wrap_style_marker_size_get, _wrap_style_marker_size_set },
    { "point_size", _wrap_style_point_size_get, _wrap_style_point_size_set },
    { "font_size", _wrap_style_font_size_get, _wrap_style_font_size_set },
    { "font_modeling", _wrap_style_font_modeling_get, _wrap_style_font_modeling_set },
    { "front_face", _wrap_style_front_face_get, _wrap_style_front_face_set },
    { "line_pattern", _wrap_style_line_pattern_get, _wrap_style_line_pattern_set },
    { "marker_style", _wrap_style_marker_style_get, _wrap_style_marker_style_set },
    { "area_style", _wrap_style_area_style_get, _wrap_style_area_style_set },
    { "modeling", _wrap_style_modeling_get, _wrap_style_modeling_set },
    { "light_model", _wrap_style_light_model_get, _wrap_style_light_model_set },
    { "tick_modeling", _wrap_style_tick_modeling_get, _wrap_style_tick_modeling_set },
    { "encoding", _wrap_style_encoding_get, _wrap_style_encoding_set },
    { "smoothing", _wrap_style_smoothing_get, _wrap_style_smoothing_set },
    { "hinting", _wrap_style_hinting_get, _wrap_style_hinting_set },
    { "cut", _wrap_style_cut_get, _wrap_style_cut_set },
    { "painting", _wrap_style_painting_get, _wrap_style_painting_set },
    { "hatching", _wrap_style_hatching_get, _wrap_style_hatching_set },
    { "projection", _wrap_style_projection_get, _wrap_style_projection_set },
    { "font", _wrap_style_font_get, _wrap_style_font_set },
    { "multi_node_limit", _wrap_style_multi_node_limit_get, _wrap_style_multi_node_limit_set },
    { "divisions", _wrap_style_divisions_get, _wrap_style_divisions_set },
    { "rotation_steps", _wrap_style_rotation_steps_get, _wrap_style_rotation_steps_set },
    { "spacing", _wrap_style_spacing_get, _wrap_style_spacing_set },
    { "angle", _wrap_style_angle_get, _wrap_style_angle_set },
    { "scale", _wrap_style_scale_get, _wrap_style_scale_set },
    { "offset", _wrap_style_offset_get, _wrap_style_offset_set },
    { "strip_width", _wrap_style_strip_width_get, _wrap_style_strip_width_set },
    { "visible", _wrap_style_visible_get, _wrap_style_visible_set },
    { "bar_offset", _wrap_style_bar_offset_get, _wrap_style_bar_offset_set },
    { "bar_width", _wrap_style_bar_width_get, _wrap_style_bar_width_set },
    { "editable", _wrap_style_editable_get, _wrap_style_editable_set },
    { "automated", _wrap_style_automated_get, _wrap_style_automated_set },
    { "options", _wrap_style_options_get, _wrap_style_options_set },
    { "color_mapping", _wrap_style_color_mapping_get, _wrap_style_color_mapping_set },
    { "enforced", _wrap_style_enforced_get, _wrap_style_enforced_set },
    { "translation", _wrap_style_translation_get, _wrap_style_translation_set },
    {0,0,0}
};
static swig_lua_method swig_style_methods[]= {
    {0,0}
};
static swig_lua_method swig_style_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_style_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_style_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_style_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_style_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_style_Sf_SwigStatic = {
    "style",
    swig_style_Sf_SwigStatic_methods,
    swig_style_Sf_SwigStatic_attributes,
    swig_style_Sf_SwigStatic_constants,
    swig_style_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_style_bases[] = {0};
static const char *swig_style_base_names[] = {0};
static swig_lua_class _wrap_class_style = { "style", "style", &SWIGTYPE_p_inlib__sg__style,_proxy__wrap_new_style, swig_delete_style, swig_style_methods, swig_style_attributes, &swig_style_Sf_SwigStatic, swig_style_meta, swig_style_bases, swig_style_base_names };

static int _wrap_text_style_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::visible",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_visible_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("text_style_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->visible = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::visible",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_visible_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_color_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::color",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_color_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("text_style_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_color_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::color",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_color_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_back_color_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::back_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::back_color",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::back_color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_back_color_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("text_style_back_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->back_color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_back_color_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::back_color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::back_color",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_back_color_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->back_color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_back_shadow_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::back_shadow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::back_shadow",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::back_shadow",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_back_shadow_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("text_style_back_shadow_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->back_shadow = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_back_shadow_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::back_shadow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::back_shadow",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_back_shadow_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->back_shadow);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_modeling_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::modeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::modeling",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::modeling",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_modeling_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("text_style_modeling_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->modeling = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_modeling_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::modeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::modeling",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_modeling_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->modeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::font",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("text_style_font_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->font = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->font);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_size_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font_size",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::font_size",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_size_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("text_style_font_size_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->font_size = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_size_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font_size",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_size_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->font_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_modeling_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::font_modeling > *arg2 = (inlib::sg::sf_enum< inlib::sg::font_modeling > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font_modeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font_modeling",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::font_modeling",2,"inlib::sg::sf_enum< inlib::sg::font_modeling > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_modeling_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0))){
    SWIG_fail_ptr("text_style_font_modeling_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t); } 
  if (arg1) (arg1)->font_modeling = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_font_modeling_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_enum< inlib::sg::font_modeling > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::font_modeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::font_modeling",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_font_modeling_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_enum< inlib::sg::font_modeling > *)& ((arg1)->font_modeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_encoding_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::encoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::encoding",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::encoding",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_encoding_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("text_style_encoding_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->encoding = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_encoding_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::encoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::encoding",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_encoding_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->encoding);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_smoothing_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::smoothing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::smoothing",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::smoothing",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_smoothing_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("text_style_smoothing_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->smoothing = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_smoothing_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::smoothing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::smoothing",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_smoothing_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->smoothing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_hinting_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::hinting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::hinting",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::hinting",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_hinting_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("text_style_hinting_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->hinting = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_hinting_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::hinting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::hinting",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_hinting_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->hinting);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_hjust_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::hjust > *arg2 = (inlib::sg::sf_enum< inlib::sg::hjust > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::hjust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::hjust",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::hjust",2,"inlib::sg::sf_enum< inlib::sg::hjust > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_hjust_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("text_style_hjust_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  if (arg1) (arg1)->hjust = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_hjust_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_enum< inlib::sg::hjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::hjust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::hjust",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_hjust_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_enum< inlib::sg::hjust > *)& ((arg1)->hjust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_vjust_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::vjust > *arg2 = (inlib::sg::sf_enum< inlib::sg::vjust > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::vjust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::vjust",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::vjust",2,"inlib::sg::sf_enum< inlib::sg::vjust > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_vjust_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0))){
    SWIG_fail_ptr("text_style_vjust_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t); } 
  if (arg1) (arg1)->vjust = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_vjust_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_enum< inlib::sg::vjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::vjust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::vjust",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_vjust_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_enum< inlib::sg::vjust > *)& ((arg1)->vjust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__vjust_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_scale_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::scale",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::scale",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_scale_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("text_style_scale_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->scale = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_scale_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::scale",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_scale_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->scale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_x_orientation_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::x_orientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::x_orientation",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::x_orientation",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_x_orientation_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("text_style_x_orientation_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->x_orientation = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_x_orientation_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::x_orientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::x_orientation",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_x_orientation_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->x_orientation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_y_orientation_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::y_orientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::y_orientation",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::y_orientation",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_y_orientation_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("text_style_y_orientation_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->y_orientation = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_y_orientation_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::y_orientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::y_orientation",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_y_orientation_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->y_orientation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_rotated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::rotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::rotated",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::rotated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_rotated_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("text_style_rotated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->rotated = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_rotated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::rotated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::rotated",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_rotated_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->rotated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_line_width_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::line_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::line_width",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::line_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_line_width_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("text_style_line_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->line_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_line_width_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::line_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::line_width",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_line_width_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->line_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_line_pattern_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf< inlib::sg::lpat > *arg2 = (inlib::sg::sf< inlib::sg::lpat > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::line_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::line_pattern",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::line_pattern",2,"inlib::sg::sf< inlib::sg::lpat > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_line_pattern_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0))){
    SWIG_fail_ptr("text_style_line_pattern_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t); } 
  if (arg1) (arg1)->line_pattern = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_line_pattern_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< inlib::sg::lpat > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::line_pattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::line_pattern",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_line_pattern_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< inlib::sg::lpat > *)& ((arg1)->line_pattern);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::enforced",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_enforced_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("text_style_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->enforced = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::enforced",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_enforced_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_translation_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::translation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::translation",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::translation",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_translation_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("text_style_translation_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->translation = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_translation_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::translation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::translation",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_translation_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->translation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_text_style_front_face_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::winding_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::winding_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::front_face",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::front_face",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::front_face",2,"inlib::sg::sf_enum< inlib::sg::winding_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_front_face_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0))){
    SWIG_fail_ptr("text_style_front_face_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t); } 
  if (arg1) (arg1)->front_face = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_front_face_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_enum< inlib::sg::winding_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::front_face",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::front_face",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_front_face_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_enum< inlib::sg::winding_type > *)& ((arg1)->front_face);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_options_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::text_style::options",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::options",1,"inlib::sg::text_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::text_style::options",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_options_set",1,SWIGTYPE_p_inlib__sg__text_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("text_style_options_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->options = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_text_style_options_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::text_style *arg1 = (inlib::sg::text_style *) 0 ; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::text_style::options",1,"inlib::sg::text_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__text_style,0))){
    SWIG_fail_ptr("text_style_options_get",1,SWIGTYPE_p_inlib__sg__text_style); } 
  result = (inlib::sg::sf_string *)& ((arg1)->options);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_text_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::text_style *result = 0 ;
  SWIG_check_num_args("inlib::sg::text_style::text_style",0,0) result = (inlib::sg::text_style *)new inlib::sg::text_style();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__text_style,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_text_style(void *obj) {
inlib::sg::text_style *arg1 = (inlib::sg::text_style *) obj;
delete arg1;
}
static int _proxy__wrap_new_text_style(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_text_style);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_text_style_attributes[] = {
    { "visible", _wrap_text_style_visible_get, _wrap_text_style_visible_set },
    { "color", _wrap_text_style_color_get, _wrap_text_style_color_set },
    { "back_color", _wrap_text_style_back_color_get, _wrap_text_style_back_color_set },
    { "back_shadow", _wrap_text_style_back_shadow_get, _wrap_text_style_back_shadow_set },
    { "modeling", _wrap_text_style_modeling_get, _wrap_text_style_modeling_set },
    { "font", _wrap_text_style_font_get, _wrap_text_style_font_set },
    { "font_size", _wrap_text_style_font_size_get, _wrap_text_style_font_size_set },
    { "font_modeling", _wrap_text_style_font_modeling_get, _wrap_text_style_font_modeling_set },
    { "encoding", _wrap_text_style_encoding_get, _wrap_text_style_encoding_set },
    { "smoothing", _wrap_text_style_smoothing_get, _wrap_text_style_smoothing_set },
    { "hinting", _wrap_text_style_hinting_get, _wrap_text_style_hinting_set },
    { "hjust", _wrap_text_style_hjust_get, _wrap_text_style_hjust_set },
    { "vjust", _wrap_text_style_vjust_get, _wrap_text_style_vjust_set },
    { "scale", _wrap_text_style_scale_get, _wrap_text_style_scale_set },
    { "x_orientation", _wrap_text_style_x_orientation_get, _wrap_text_style_x_orientation_set },
    { "y_orientation", _wrap_text_style_y_orientation_get, _wrap_text_style_y_orientation_set },
    { "rotated", _wrap_text_style_rotated_get, _wrap_text_style_rotated_set },
    { "line_width", _wrap_text_style_line_width_get, _wrap_text_style_line_width_set },
    { "line_pattern", _wrap_text_style_line_pattern_get, _wrap_text_style_line_pattern_set },
    { "enforced", _wrap_text_style_enforced_get, _wrap_text_style_enforced_set },
    { "translation", _wrap_text_style_translation_get, _wrap_text_style_translation_set },
    { "front_face", _wrap_text_style_front_face_get, _wrap_text_style_front_face_set },
    { "options", _wrap_text_style_options_get, _wrap_text_style_options_set },
    {0,0,0}
};
static swig_lua_method swig_text_style_methods[]= {
    {0,0}
};
static swig_lua_method swig_text_style_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_text_style_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_text_style_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_text_style_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_text_style_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_text_style_Sf_SwigStatic = {
    "text_style",
    swig_text_style_Sf_SwigStatic_methods,
    swig_text_style_Sf_SwigStatic_attributes,
    swig_text_style_Sf_SwigStatic_constants,
    swig_text_style_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_text_style_bases[] = {0};
static const char *swig_text_style_base_names[] = {0};
static swig_lua_class _wrap_class_text_style = { "text_style", "text_style", &SWIGTYPE_p_inlib__sg__text_style,_proxy__wrap_new_text_style, swig_delete_text_style, swig_text_style_methods, swig_text_style_attributes, &swig_text_style_Sf_SwigStatic, swig_text_style_meta, swig_text_style_bases, swig_text_style_base_names };

static swig_lua_attribute swig_render_action_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_render_action_methods[]= {
    {0,0}
};
static swig_lua_method swig_render_action_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_render_action_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_render_action_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_render_action_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_render_action_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_render_action_Sf_SwigStatic = {
    "render_action",
    swig_render_action_Sf_SwigStatic_methods,
    swig_render_action_Sf_SwigStatic_attributes,
    swig_render_action_Sf_SwigStatic_constants,
    swig_render_action_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_render_action_bases[] = {0};
static const char *swig_render_action_base_names[] = {0};
static swig_lua_class _wrap_class_render_action = { "render_action", "render_action", &SWIGTYPE_p_inlib__sg__render_action,0,0, swig_render_action_methods, swig_render_action_attributes, &swig_render_action_Sf_SwigStatic, swig_render_action_meta, swig_render_action_bases, swig_render_action_base_names };

static int _wrap_write_action_protocol(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::write_action *arg1 = (inlib::sg::write_action *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::sg::write_action::protocol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::write_action::protocol",1,"inlib::sg::write_action const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__write_action,0))){
    SWIG_fail_ptr("write_action_protocol",1,SWIGTYPE_p_inlib__sg__write_action); } 
  result = (unsigned int)((inlib::sg::write_action const *)arg1)->protocol();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_write_action(void *obj) {
inlib::sg::write_action *arg1 = (inlib::sg::write_action *) obj;
delete arg1;
}
static swig_lua_attribute swig_write_action_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_write_action_methods[]= {
    { "protocol", _wrap_write_action_protocol},
    {0,0}
};
static swig_lua_method swig_write_action_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_write_action_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_write_action_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_write_action_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_write_action_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_write_action_Sf_SwigStatic = {
    "write_action",
    swig_write_action_Sf_SwigStatic_methods,
    swig_write_action_Sf_SwigStatic_attributes,
    swig_write_action_Sf_SwigStatic_constants,
    swig_write_action_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_write_action_bases[] = {0};
static const char *swig_write_action_base_names[] = {0};
static swig_lua_class _wrap_class_write_action = { "write_action", "write_action", &SWIGTYPE_p_inlib__sg__write_action,0, swig_delete_write_action, swig_write_action_methods, swig_write_action_attributes, &swig_write_action_Sf_SwigStatic, swig_write_action_meta, swig_write_action_bases, swig_write_action_base_names };

static int _wrap_new_polyhedron__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::hep::polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::hep::polyhedron::polyhedron",0,0) result = (inlib::hep::polyhedron *)new inlib::hep::polyhedron();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_polyhedron__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::hep::polyhedron *arg1 = 0 ;
  inlib::hep::polyhedron *result = 0 ; SWIG_check_num_args("inlib::hep::polyhedron::polyhedron",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::polyhedron",1,"inlib::hep::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("new_polyhedron",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  result = (inlib::hep::polyhedron *)new inlib::hep::polyhedron((inlib::hep::polyhedron const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_polyhedron(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_polyhedron__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__polyhedron, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_polyhedron__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_polyhedron'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::hep::polyhedron::polyhedron()\n" "    inlib::hep::polyhedron::polyhedron(inlib::hep::polyhedron const &)\n");
  lua_error(L);return 0; }
static int _wrap_polyhedron_Translate(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ; double arg2 ; double arg3 ; double arg4 ;
  inlib::hep::polyhedron *result = 0 ; SWIG_check_num_args("inlib::hep::polyhedron::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::Translate",1,"inlib::hep::polyhedron *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::Translate",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::hep::polyhedron::Translate",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::hep::polyhedron::Translate",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_Translate",1,SWIGTYPE_p_inlib__hep__polyhedron); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = (inlib::hep::polyhedron *) &(arg1)->Translate(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_polyhedron_Transform__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ; inlib::rotd *arg2 = 0 ; double arg3 ; double arg4 ;
  double arg5 ; inlib::hep::polyhedron *result = 0 ; SWIG_check_num_args("inlib::hep::polyhedron::Transform",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",1,"inlib::hep::polyhedron *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",2,"inlib::rotd const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_Transform",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rotd,0))){
    SWIG_fail_ptr("polyhedron_Transform",2,SWIGTYPE_p_inlib__rotd); }  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  result = (inlib::hep::polyhedron *) &(arg1)->Transform((inlib::rotd const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_polyhedron_Transform__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ; inlib::rotd *arg2 = 0 ; inlib::vec3d *arg3 = 0 ;
  inlib::hep::polyhedron *result = 0 ; SWIG_check_num_args("inlib::hep::polyhedron::Transform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",1,"inlib::hep::polyhedron *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",2,"inlib::rotd const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::hep::polyhedron::Transform",3,"inlib::vec3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_Transform",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rotd,0))){
    SWIG_fail_ptr("polyhedron_Transform",2,SWIGTYPE_p_inlib__rotd); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__vec3d,0))){
    SWIG_fail_ptr("polyhedron_Transform",3,SWIGTYPE_p_inlib__vec3d); } 
  result = (inlib::hep::polyhedron *) &(arg1)->Transform((inlib::rotd const &)*arg2,(inlib::vec3d const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_polyhedron_Transform(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__polyhedron, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__rotd, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_inlib__vec3d, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_polyhedron_Transform__SWIG_1(L);}  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__polyhedron, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__rotd, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_polyhedron_Transform__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'polyhedron_Transform'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::hep::polyhedron::Transform(inlib::rotd const &,double,double,double)\n"
  "    inlib::hep::polyhedron::Transform(inlib::rotd const &,inlib::vec3d const &)\n"); lua_error(L);return 0; }
static int _wrap_polyhedron_add(lua_State* L) { int SWIG_arg = 0; inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ;
  inlib::hep::polyhedron *arg2 = 0 ; inlib::hep::polyhedron result; SWIG_check_num_args("inlib::hep::polyhedron::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::add",1,"inlib::hep::polyhedron const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::add",2,"inlib::hep::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_add",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_add",2,SWIGTYPE_p_inlib__hep__polyhedron); } 
  result = ((inlib::hep::polyhedron const *)arg1)->add((inlib::hep::polyhedron const &)*arg2); {
    inlib::hep::polyhedron * resultptr = new inlib::hep::polyhedron((const inlib::hep::polyhedron &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__hep__polyhedron,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_polyhedron_subtract(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ; inlib::hep::polyhedron *arg2 = 0 ;
  inlib::hep::polyhedron result; SWIG_check_num_args("inlib::hep::polyhedron::subtract",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::subtract",1,"inlib::hep::polyhedron const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::subtract",2,"inlib::hep::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_subtract",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_subtract",2,SWIGTYPE_p_inlib__hep__polyhedron); } 
  result = ((inlib::hep::polyhedron const *)arg1)->subtract((inlib::hep::polyhedron const &)*arg2); {
    inlib::hep::polyhedron * resultptr = new inlib::hep::polyhedron((const inlib::hep::polyhedron &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__hep__polyhedron,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_polyhedron_intersect(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) 0 ; inlib::hep::polyhedron *arg2 = 0 ;
  inlib::hep::polyhedron result; SWIG_check_num_args("inlib::hep::polyhedron::intersect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::polyhedron::intersect",1,"inlib::hep::polyhedron const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::polyhedron::intersect",2,"inlib::hep::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_intersect",1,SWIGTYPE_p_inlib__hep__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("polyhedron_intersect",2,SWIGTYPE_p_inlib__hep__polyhedron); } 
  result = ((inlib::hep::polyhedron const *)arg1)->intersect((inlib::hep::polyhedron const &)*arg2); {
    inlib::hep::polyhedron * resultptr = new inlib::hep::polyhedron((const inlib::hep::polyhedron &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_inlib__hep__polyhedron,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_polyhedron(void *obj) {
inlib::hep::polyhedron *arg1 = (inlib::hep::polyhedron *) obj;
delete arg1;
}
static int _proxy__wrap_new_polyhedron(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_polyhedron);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_polyhedron_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_polyhedron_methods[]= {
    { "Translate", _wrap_polyhedron_Translate},
    { "Transform", _wrap_polyhedron_Transform},
    { "add", _wrap_polyhedron_add},
    { "subtract", _wrap_polyhedron_subtract},
    { "intersect", _wrap_polyhedron_intersect},
    {0,0}
};
static swig_lua_method swig_polyhedron_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_polyhedron_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_polyhedron_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_polyhedron_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_polyhedron_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_polyhedron_Sf_SwigStatic = {
    "polyhedron",
    swig_polyhedron_Sf_SwigStatic_methods,
    swig_polyhedron_Sf_SwigStatic_attributes,
    swig_polyhedron_Sf_SwigStatic_constants,
    swig_polyhedron_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_polyhedron_bases[] = {0};
static const char *swig_polyhedron_base_names[] = {0};
static swig_lua_class _wrap_class_polyhedron = { "polyhedron", "polyhedron", &SWIGTYPE_p_inlib__hep__polyhedron,_proxy__wrap_new_polyhedron, swig_delete_polyhedron, swig_polyhedron_methods, swig_polyhedron_attributes, &swig_polyhedron_Sf_SwigStatic, swig_polyhedron_meta, swig_polyhedron_bases, swig_polyhedron_base_names };

static int _wrap_new_hep_polyhedron_tubs__SWIG_0(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; int arg6 ; inlib::hep::polyhedron_tubs *result = 0 ;
  SWIG_check_num_args("inlib::hep::polyhedron_tubs::polyhedron_tubs",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",6,"int");
  arg1 = (double)lua_tonumber(L, 1); arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  result = (inlib::hep::polyhedron_tubs *)new inlib::hep::polyhedron_tubs(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron_tubs,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_hep_polyhedron_tubs__SWIG_1(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; inlib::hep::polyhedron_tubs *result = 0 ;
  SWIG_check_num_args("inlib::hep::polyhedron_tubs::polyhedron_tubs",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",5,"double");
  arg1 = (double)lua_tonumber(L, 1); arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  result = (inlib::hep::polyhedron_tubs *)new inlib::hep::polyhedron_tubs(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron_tubs,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_hep_polyhedron_tubs__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::hep::polyhedron_tubs *arg1 = 0 ;
  inlib::hep::polyhedron_tubs *result = 0 ; SWIG_check_num_args("inlib::hep::polyhedron_tubs::polyhedron_tubs",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::hep::polyhedron_tubs::polyhedron_tubs",1,"inlib::hep::polyhedron_tubs const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__polyhedron_tubs,0))){
    SWIG_fail_ptr("new_hep_polyhedron_tubs",1,SWIGTYPE_p_inlib__hep__polyhedron_tubs); } 
  result = (inlib::hep::polyhedron_tubs *)new inlib::hep::polyhedron_tubs((inlib::hep::polyhedron_tubs const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron_tubs,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_hep_polyhedron_tubs(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__polyhedron_tubs, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_hep_polyhedron_tubs__SWIG_2(L);}  }  if (argc == 5) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_new_hep_polyhedron_tubs__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_new_hep_polyhedron_tubs__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_hep_polyhedron_tubs'\n"
  "  Possible C/C++ prototypes are:\n"
  "    inlib::hep::polyhedron_tubs::polyhedron_tubs(double,double,double,double,double,int)\n"
  "    inlib::hep::polyhedron_tubs::polyhedron_tubs(double,double,double,double,double)\n"
  "    inlib::hep::polyhedron_tubs::polyhedron_tubs(inlib::hep::polyhedron_tubs const &)\n"); lua_error(L);return 0; }
static void swig_delete_hep_polyhedron_tubs(void *obj) {
inlib::hep::polyhedron_tubs *arg1 = (inlib::hep::polyhedron_tubs *) obj;
delete arg1;
}
static int _proxy__wrap_new_hep_polyhedron_tubs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_hep_polyhedron_tubs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_hep_polyhedron_tubs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_hep_polyhedron_tubs_methods[]= {
    {0,0}
};
static swig_lua_method swig_hep_polyhedron_tubs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_hep_polyhedron_tubs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_hep_polyhedron_tubs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_hep_polyhedron_tubs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_hep_polyhedron_tubs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_hep_polyhedron_tubs_Sf_SwigStatic = {
    "hep_polyhedron_tubs",
    swig_hep_polyhedron_tubs_Sf_SwigStatic_methods,
    swig_hep_polyhedron_tubs_Sf_SwigStatic_attributes,
    swig_hep_polyhedron_tubs_Sf_SwigStatic_constants,
    swig_hep_polyhedron_tubs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_hep_polyhedron_tubs_bases[] = {0,0};
static const char *swig_hep_polyhedron_tubs_base_names[] = {"inlib::hep::polyhedron *",0};
static swig_lua_class _wrap_class_hep_polyhedron_tubs = { "hep_polyhedron_tubs", "hep_polyhedron_tubs", &SWIGTYPE_p_inlib__hep__polyhedron_tubs,_proxy__wrap_new_hep_polyhedron_tubs, swig_delete_hep_polyhedron_tubs, swig_hep_polyhedron_tubs_methods, swig_hep_polyhedron_tubs_attributes, &swig_hep_polyhedron_tubs_Sf_SwigStatic, swig_hep_polyhedron_tubs_meta, swig_hep_polyhedron_tubs_bases, swig_hep_polyhedron_tubs_base_names };

static int _wrap_new_sf_polyhedron__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::hep::sf_polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::hep::sf_polyhedron::sf_polyhedron",0,0)
  result = (inlib::hep::sf_polyhedron *)new inlib::hep::sf_polyhedron();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__sf_polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_polyhedron__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::hep::sf_polyhedron *arg1 = 0 ;
  inlib::hep::sf_polyhedron *result = 0 ; SWIG_check_num_args("inlib::hep::sf_polyhedron::sf_polyhedron",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::hep::sf_polyhedron::sf_polyhedron",1,"inlib::hep::sf_polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__sf_polyhedron,0))){
    SWIG_fail_ptr("new_sf_polyhedron",1,SWIGTYPE_p_inlib__hep__sf_polyhedron); } 
  result = (inlib::hep::sf_polyhedron *)new inlib::hep::sf_polyhedron((inlib::hep::sf_polyhedron const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__sf_polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_polyhedron(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_polyhedron__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__sf_polyhedron, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_polyhedron__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_polyhedron'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::hep::sf_polyhedron::sf_polyhedron()\n"
  "    inlib::hep::sf_polyhedron::sf_polyhedron(inlib::hep::sf_polyhedron const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_polyhedron_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::sf_polyhedron *arg1 = (inlib::hep::sf_polyhedron *) 0 ; inlib::hep::polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::hep::sf_polyhedron::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::sf_polyhedron::value",1,"inlib::hep::sf_polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__sf_polyhedron,0))){
    SWIG_fail_ptr("sf_polyhedron_value",1,SWIGTYPE_p_inlib__hep__sf_polyhedron); } 
  result = (inlib::hep::polyhedron *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_polyhedron_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::sf_polyhedron *arg1 = (inlib::hep::sf_polyhedron *) 0 ; inlib::hep::polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::hep::sf_polyhedron::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::sf_polyhedron::value",1,"inlib::hep::sf_polyhedron const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__sf_polyhedron,0))){
    SWIG_fail_ptr("sf_polyhedron_value",1,SWIGTYPE_p_inlib__hep__sf_polyhedron); } 
  result = (inlib::hep::polyhedron *) &((inlib::hep::sf_polyhedron const *)arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_polyhedron_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::hep::sf_polyhedron *arg1 = (inlib::hep::sf_polyhedron *) 0 ; inlib::hep::polyhedron *arg2 = 0 ;
  SWIG_check_num_args("inlib::hep::sf_polyhedron::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::hep::sf_polyhedron::value",1,"inlib::hep::sf_polyhedron *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::hep::sf_polyhedron::value",2,"inlib::hep::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__hep__sf_polyhedron,0))){
    SWIG_fail_ptr("sf_polyhedron_value",1,SWIGTYPE_p_inlib__hep__sf_polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__hep__polyhedron,0))){
    SWIG_fail_ptr("sf_polyhedron_value",2,SWIGTYPE_p_inlib__hep__polyhedron); } 
  (arg1)->value((inlib::hep::polyhedron const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_polyhedron_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__sf_polyhedron, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_polyhedron_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__sf_polyhedron, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_polyhedron_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__hep__sf_polyhedron, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__hep__polyhedron, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_polyhedron_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_polyhedron_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::hep::sf_polyhedron::value()\n"
  "    inlib::hep::sf_polyhedron::value() const\n" "    inlib::hep::sf_polyhedron::value(inlib::hep::polyhedron const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sf_polyhedron(void *obj) {
inlib::hep::sf_polyhedron *arg1 = (inlib::hep::sf_polyhedron *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_polyhedron(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_polyhedron);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_polyhedron_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_polyhedron_methods[]= {
    { "value", _wrap_sf_polyhedron_value},
    {0,0}
};
static swig_lua_method swig_sf_polyhedron_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_polyhedron_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_polyhedron_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_polyhedron_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_polyhedron_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_polyhedron_Sf_SwigStatic = {
    "sf_polyhedron",
    swig_sf_polyhedron_Sf_SwigStatic_methods,
    swig_sf_polyhedron_Sf_SwigStatic_attributes,
    swig_sf_polyhedron_Sf_SwigStatic_constants,
    swig_sf_polyhedron_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_polyhedron_bases[] = {0};
static const char *swig_sf_polyhedron_base_names[] = {0};
static swig_lua_class _wrap_class_sf_polyhedron = { "sf_polyhedron", "sf_polyhedron", &SWIGTYPE_p_inlib__hep__sf_polyhedron,_proxy__wrap_new_sf_polyhedron, swig_delete_sf_polyhedron, swig_sf_polyhedron_methods, swig_sf_polyhedron_attributes, &swig_sf_polyhedron_Sf_SwigStatic, swig_sf_polyhedron_meta, swig_sf_polyhedron_bases, swig_sf_polyhedron_base_names };

static int _wrap_sg_node_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::node *arg1 = (inlib::sg::node *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::node::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::node::copy",1,"inlib::sg::node const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__node,0))){
    SWIG_fail_ptr("sg_node_copy",1,SWIGTYPE_p_inlib__sg__node); } 
  result = (inlib::sg::node *)((inlib::sg::node const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_node_render(lua_State* L) { int SWIG_arg = 0; inlib::sg::node *arg1 = (inlib::sg::node *) 0 ;
  inlib::sg::render_action *arg2 = 0 ; SWIG_check_num_args("inlib::sg::node::render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::node::render",1,"inlib::sg::node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::node::render",2,"inlib::sg::render_action &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__node,0))){
    SWIG_fail_ptr("sg_node_render",1,SWIGTYPE_p_inlib__sg__node); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__render_action,0))){
    SWIG_fail_ptr("sg_node_render",2,SWIGTYPE_p_inlib__sg__render_action); }  (arg1)->render(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_node_write(lua_State* L) { int SWIG_arg = 0; inlib::sg::node *arg1 = (inlib::sg::node *) 0 ;
  inlib::sg::write_action *arg2 = 0 ; SWIG_check_num_args("inlib::sg::node::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::node::write",1,"inlib::sg::node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::node::write",2,"inlib::sg::write_action &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__node,0))){
    SWIG_fail_ptr("sg_node_write",1,SWIGTYPE_p_inlib__sg__node); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__write_action,0))){
    SWIG_fail_ptr("sg_node_write",2,SWIGTYPE_p_inlib__sg__write_action); }  (arg1)->write(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_node(void *obj) {
inlib::sg::node *arg1 = (inlib::sg::node *) obj;
delete arg1;
}
static swig_lua_attribute swig_sg_node_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_node_methods[]= {
    { "copy", _wrap_sg_node_copy},
    { "render", _wrap_sg_node_render},
    { "write", _wrap_sg_node_write},
    {0,0}
};
static swig_lua_method swig_sg_node_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_node_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_node_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_node_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_node_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_node_Sf_SwigStatic = {
    "sg_node",
    swig_sg_node_Sf_SwigStatic_methods,
    swig_sg_node_Sf_SwigStatic_attributes,
    swig_sg_node_Sf_SwigStatic_constants,
    swig_sg_node_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_node_bases[] = {0};
static const char *swig_sg_node_base_names[] = {0};
static swig_lua_class _wrap_class_sg_node = { "sg_node", "sg_node", &SWIGTYPE_p_inlib__sg__node,0, swig_delete_sg_node, swig_sg_node_methods, swig_sg_node_attributes, &swig_sg_node_Sf_SwigStatic, swig_sg_node_meta, swig_sg_node_bases, swig_sg_node_base_names };

static int _wrap_sg_group_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *arg1 = (inlib::sg::group *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::group::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::group::copy",1,"inlib::sg::group const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__group,0))){
    SWIG_fail_ptr("sg_group_copy",1,SWIGTYPE_p_inlib__sg__group); } 
  result = (inlib::sg::node *)((inlib::sg::group const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_group__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *result = 0 ;
  SWIG_check_num_args("inlib::sg::group::group",0,0) result = (inlib::sg::group *)new inlib::sg::group();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__group,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_group__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *arg1 = 0 ;
  inlib::sg::group *result = 0 ; SWIG_check_num_args("inlib::sg::group::group",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::group::group",1,"inlib::sg::group const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__group,0))){
    SWIG_fail_ptr("new_sg_group",1,SWIGTYPE_p_inlib__sg__group); } 
  result = (inlib::sg::group *)new inlib::sg::group((inlib::sg::group const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__group,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_group(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_group__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__group, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_group__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_group'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::group::group()\n" "    inlib::sg::group::group(inlib::sg::group const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_group_add(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *arg1 = (inlib::sg::group *) 0 ;
  inlib::sg::node *arg2 = (inlib::sg::node *) 0 ; SWIG_check_num_args("inlib::sg::group::add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::group::add",1,"inlib::sg::group *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::group::add",2,"inlib::sg::node *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__group,0))){
    SWIG_fail_ptr("sg_group_add",1,SWIGTYPE_p_inlib__sg__group); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__node,0))){
    SWIG_fail_ptr("sg_group_add",2,SWIGTYPE_p_inlib__sg__node); }  (arg1)->add(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_group_remove(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *arg1 = (inlib::sg::group *) 0 ;
  inlib::sg::node *arg2 = (inlib::sg::node *) 0 ; bool result; SWIG_check_num_args("inlib::sg::group::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::group::remove",1,"inlib::sg::group *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::group::remove",2,"inlib::sg::node *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__group,0))){
    SWIG_fail_ptr("sg_group_remove",1,SWIGTYPE_p_inlib__sg__group); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__node,0))){
    SWIG_fail_ptr("sg_group_remove",2,SWIGTYPE_p_inlib__sg__node); }  result = (bool)(arg1)->remove(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_group_remove_index(lua_State* L) { int SWIG_arg = 0; inlib::sg::group *arg1 = (inlib::sg::group *) 0 ;
  unsigned int arg2 ; bool result; SWIG_check_num_args("inlib::sg::group::remove_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::group::remove_index",1,"inlib::sg::group *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::group::remove_index",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__group,0))){
    SWIG_fail_ptr("sg_group_remove_index",1,SWIGTYPE_p_inlib__sg__group); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->remove_index(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_group(void *obj) {
inlib::sg::group *arg1 = (inlib::sg::group *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_group(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_group);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_group_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_group_methods[]= {
    { "copy", _wrap_sg_group_copy},
    { "add", _wrap_sg_group_add},
    { "remove", _wrap_sg_group_remove},
    { "remove_index", _wrap_sg_group_remove_index},
    {0,0}
};
static swig_lua_method swig_sg_group_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_group_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_group_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_group_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_group_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_group_SwigStatic = {
    "sg_group",
    swig_sg_group_SwigStatic_methods,
    swig_sg_group_SwigStatic_attributes,
    swig_sg_group_SwigStatic_constants,
    swig_sg_group_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_group_bases[] = {0,0};
static const char *swig_sg_group_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_group = { "sg_group", "sg_group", &SWIGTYPE_p_inlib__sg__group,_proxy__wrap_new_sg_group, swig_delete_sg_group, swig_sg_group_methods, swig_sg_group_attributes, &swig_sg_group_SwigStatic, swig_sg_group_meta, swig_sg_group_bases, swig_sg_group_base_names };

static int _wrap_new_sg_separator__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::separator *result = 0 ;
  SWIG_check_num_args("inlib::sg::separator::separator",0,0) result = (inlib::sg::separator *)new inlib::sg::separator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__separator,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_separator__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::separator *arg1 = 0 ;
  inlib::sg::separator *result = 0 ; SWIG_check_num_args("inlib::sg::separator::separator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::separator::separator",1,"inlib::sg::separator const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__separator,0))){
    SWIG_fail_ptr("new_sg_separator",1,SWIGTYPE_p_inlib__sg__separator); } 
  result = (inlib::sg::separator *)new inlib::sg::separator((inlib::sg::separator const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__separator,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_separator(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_separator__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__separator, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_separator__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_separator'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::separator::separator()\n" "    inlib::sg::separator::separator(inlib::sg::separator const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_separator(void *obj) {
inlib::sg::separator *arg1 = (inlib::sg::separator *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_separator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_separator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_separator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_separator_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_separator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_separator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_separator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_separator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_separator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_separator_Sf_SwigStatic = {
    "sg_separator",
    swig_sg_separator_Sf_SwigStatic_methods,
    swig_sg_separator_Sf_SwigStatic_attributes,
    swig_sg_separator_Sf_SwigStatic_constants,
    swig_sg_separator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_separator_bases[] = {0,0};
static const char *swig_sg_separator_base_names[] = {"inlib::sg::group *",0};
static swig_lua_class _wrap_class_sg_separator = { "sg_separator", "sg_separator", &SWIGTYPE_p_inlib__sg__separator,_proxy__wrap_new_sg_separator, swig_delete_sg_separator, swig_sg_separator_methods, swig_sg_separator_attributes, &swig_sg_separator_Sf_SwigStatic, swig_sg_separator_meta, swig_sg_separator_bases, swig_sg_separator_base_names };

static int _wrap_new_sg_selection__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::selection *result = 0 ;
  SWIG_check_num_args("inlib::sg::selection::selection",0,0) result = (inlib::sg::selection *)new inlib::sg::selection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__selection,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_selection__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::selection *arg1 = 0 ;
  inlib::sg::selection *result = 0 ; SWIG_check_num_args("inlib::sg::selection::selection",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::selection::selection",1,"inlib::sg::selection const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__selection,0))){
    SWIG_fail_ptr("new_sg_selection",1,SWIGTYPE_p_inlib__sg__selection); } 
  result = (inlib::sg::selection *)new inlib::sg::selection((inlib::sg::selection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__selection,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_selection(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_selection__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__selection, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_selection__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_selection'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::selection::selection()\n" "    inlib::sg::selection::selection(inlib::sg::selection const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_selection(void *obj) {
inlib::sg::selection *arg1 = (inlib::sg::selection *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_selection(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_selection);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_selection_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_selection_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_selection_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_selection_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_selection_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_selection_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_selection_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_selection_Sf_SwigStatic = {
    "sg_selection",
    swig_sg_selection_Sf_SwigStatic_methods,
    swig_sg_selection_Sf_SwigStatic_attributes,
    swig_sg_selection_Sf_SwigStatic_constants,
    swig_sg_selection_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_selection_bases[] = {0,0};
static const char *swig_sg_selection_base_names[] = {"inlib::sg::separator *",0};
static swig_lua_class _wrap_class_sg_selection = { "sg_selection", "sg_selection", &SWIGTYPE_p_inlib__sg__selection,_proxy__wrap_new_sg_selection, swig_delete_sg_selection, swig_sg_selection_methods, swig_sg_selection_attributes, &swig_sg_selection_Sf_SwigStatic, swig_sg_selection_meta, swig_sg_selection_bases, swig_sg_selection_base_names };

static int _wrap_sg_base_camera_near_height(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; float result;
  SWIG_check_num_args("inlib::sg::base_camera::near_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::near_height",1,"inlib::sg::base_camera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_near_height",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (float)((inlib::sg::base_camera const *)arg1)->near_height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_zoom(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::sg::base_camera::zoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::zoom",1,"inlib::sg::base_camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::base_camera::zoom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_zoom",1,SWIGTYPE_p_inlib__sg__base_camera); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->zoom(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::copy",1,"inlib::sg::base_camera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_copy",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::node *)((inlib::sg::base_camera const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_base_camera_znear_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::znear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::znear",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::znear",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_znear_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_znear_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->znear = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_znear_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::znear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::znear",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_znear_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->znear);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_zfar_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::zfar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::zfar",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::zfar",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_zfar_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_zfar_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->zfar = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_zfar_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::zfar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::zfar",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_zfar_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->zfar);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_position_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::position",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::position",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_position_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("sg_base_camera_position_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->position = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_position_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf_vec3f *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::position",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_position_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_orientation_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf_rotf *arg2 = (inlib::sg::sf_rotf *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::orientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::orientation",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::orientation",2,"inlib::sg::sf_rotf *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_orientation_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_rotf,0))){
    SWIG_fail_ptr("sg_base_camera_orientation_set",2,SWIGTYPE_p_inlib__sg__sf_rotf); }  if (arg1) (arg1)->orientation = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_orientation_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf_rotf *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::orientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::orientation",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_orientation_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf_rotf *)& ((arg1)->orientation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_rotf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_dx_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::dx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::dx",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::dx",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_dx_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_dx_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->dx = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_dx_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::dx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::dx",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_dx_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->dx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_da_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::da",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::da",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::da",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_da_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_da_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->da = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_da_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::da",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::da",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_da_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->da);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_ds_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::ds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::ds",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::ds",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_ds_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_ds_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->ds = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_ds_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::ds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::ds",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_ds_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->ds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_focal_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::focal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::focal",1,"inlib::sg::base_camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_camera::focal",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_focal_set",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_base_camera_focal_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->focal = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_camera_focal_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_camera::focal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_camera::focal",1,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_base_camera_focal_get",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->focal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_base_camera(void *obj) {
inlib::sg::base_camera *arg1 = (inlib::sg::base_camera *) obj;
delete arg1;
}
static swig_lua_attribute swig_sg_base_camera_attributes[] = {
    { "znear", _wrap_sg_base_camera_znear_get, _wrap_sg_base_camera_znear_set },
    { "zfar", _wrap_sg_base_camera_zfar_get, _wrap_sg_base_camera_zfar_set },
    { "position", _wrap_sg_base_camera_position_get, _wrap_sg_base_camera_position_set },
    { "orientation", _wrap_sg_base_camera_orientation_get, _wrap_sg_base_camera_orientation_set },
    { "dx", _wrap_sg_base_camera_dx_get, _wrap_sg_base_camera_dx_set },
    { "da", _wrap_sg_base_camera_da_get, _wrap_sg_base_camera_da_set },
    { "ds", _wrap_sg_base_camera_ds_get, _wrap_sg_base_camera_ds_set },
    { "focal", _wrap_sg_base_camera_focal_get, _wrap_sg_base_camera_focal_set },
    {0,0,0}
};
static swig_lua_method swig_sg_base_camera_methods[]= {
    { "near_height", _wrap_sg_base_camera_near_height},
    { "zoom", _wrap_sg_base_camera_zoom},
    { "copy", _wrap_sg_base_camera_copy},
    {0,0}
};
static swig_lua_method swig_sg_base_camera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_base_camera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_base_camera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_base_camera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_base_camera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_base_camera_Sf_SwigStatic = {
    "sg_base_camera",
    swig_sg_base_camera_Sf_SwigStatic_methods,
    swig_sg_base_camera_Sf_SwigStatic_attributes,
    swig_sg_base_camera_Sf_SwigStatic_constants,
    swig_sg_base_camera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_base_camera_bases[] = {0,0};
static const char *swig_sg_base_camera_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_base_camera = { "sg_base_camera", "sg_base_camera", &SWIGTYPE_p_inlib__sg__base_camera,0, swig_delete_sg_base_camera, swig_sg_base_camera_methods, swig_sg_base_camera_attributes, &swig_sg_base_camera_Sf_SwigStatic, swig_sg_base_camera_meta, swig_sg_base_camera_bases, swig_sg_base_camera_base_names };

static int _wrap_sg_ortho_near_height(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = (inlib::sg::ortho *) 0 ;
  float result; SWIG_check_num_args("inlib::sg::ortho::near_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::ortho::near_height",1,"inlib::sg::ortho const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_ortho_near_height",1,SWIGTYPE_p_inlib__sg__ortho); } 
  result = (float)((inlib::sg::ortho const *)arg1)->near_height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_ortho_zoom(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = (inlib::sg::ortho *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::sg::ortho::zoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::ortho::zoom",1,"inlib::sg::ortho *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::ortho::zoom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_ortho_zoom",1,SWIGTYPE_p_inlib__sg__ortho); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->zoom(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_ortho_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = (inlib::sg::ortho *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::ortho::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::ortho::copy",1,"inlib::sg::ortho const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_ortho_copy",1,SWIGTYPE_p_inlib__sg__ortho); } 
  result = (inlib::sg::node *)((inlib::sg::ortho const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_ortho__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *result = 0 ;
  SWIG_check_num_args("inlib::sg::ortho::ortho",0,0) result = (inlib::sg::ortho *)new inlib::sg::ortho();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__ortho,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_ortho__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = 0 ;
  inlib::sg::ortho *result = 0 ; SWIG_check_num_args("inlib::sg::ortho::ortho",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::ortho::ortho",1,"inlib::sg::ortho const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("new_sg_ortho",1,SWIGTYPE_p_inlib__sg__ortho); } 
  result = (inlib::sg::ortho *)new inlib::sg::ortho((inlib::sg::ortho const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__ortho,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_ortho(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_ortho__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__ortho, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_ortho__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_ortho'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::ortho::ortho()\n" "    inlib::sg::ortho::ortho(inlib::sg::ortho const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_ortho_height_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = (inlib::sg::ortho *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::ortho::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::ortho::height",1,"inlib::sg::ortho *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::ortho::height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_ortho_height_set",1,SWIGTYPE_p_inlib__sg__ortho); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_ortho_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_ortho_height_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::ortho *arg1 = (inlib::sg::ortho *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::ortho::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::ortho::height",1,"inlib::sg::ortho *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_ortho_height_get",1,SWIGTYPE_p_inlib__sg__ortho); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_ortho(void *obj) {
inlib::sg::ortho *arg1 = (inlib::sg::ortho *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_ortho(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_ortho);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_ortho_attributes[] = {
    { "height", _wrap_sg_ortho_height_get, _wrap_sg_ortho_height_set },
    {0,0,0}
};
static swig_lua_method swig_sg_ortho_methods[]= {
    { "near_height", _wrap_sg_ortho_near_height},
    { "zoom", _wrap_sg_ortho_zoom},
    { "copy", _wrap_sg_ortho_copy},
    {0,0}
};
static swig_lua_method swig_sg_ortho_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_ortho_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_ortho_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_ortho_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_ortho_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_ortho_Sf_SwigStatic = {
    "sg_ortho",
    swig_sg_ortho_Sf_SwigStatic_methods,
    swig_sg_ortho_Sf_SwigStatic_attributes,
    swig_sg_ortho_Sf_SwigStatic_constants,
    swig_sg_ortho_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_ortho_bases[] = {0,0};
static const char *swig_sg_ortho_base_names[] = {"inlib::sg::base_camera *",0};
static swig_lua_class _wrap_class_sg_ortho = { "sg_ortho", "sg_ortho", &SWIGTYPE_p_inlib__sg__ortho,_proxy__wrap_new_sg_ortho, swig_delete_sg_ortho, swig_sg_ortho_methods, swig_sg_ortho_attributes, &swig_sg_ortho_Sf_SwigStatic, swig_sg_ortho_meta, swig_sg_ortho_bases, swig_sg_ortho_base_names };

static int _wrap_sg_cast_ortho(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_camera *arg1 = 0 ;
  inlib::sg::ortho *result = 0 ; SWIG_check_num_args("inlib::sg::cast_ortho",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cast_ortho",1,"inlib::sg::base_camera &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_cast_ortho",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::ortho *)inlib::sg::cast_ortho(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__ortho,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_perspective_near_height(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::perspective *arg1 = (inlib::sg::perspective *) 0 ; float result;
  SWIG_check_num_args("inlib::sg::perspective::near_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::perspective::near_height",1,"inlib::sg::perspective const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("sg_perspective_near_height",1,SWIGTYPE_p_inlib__sg__perspective); } 
  result = (float)((inlib::sg::perspective const *)arg1)->near_height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_perspective_zoom(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::perspective *arg1 = (inlib::sg::perspective *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::sg::perspective::zoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::perspective::zoom",1,"inlib::sg::perspective *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::perspective::zoom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("sg_perspective_zoom",1,SWIGTYPE_p_inlib__sg__perspective); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->zoom(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_perspective_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::perspective *arg1 = (inlib::sg::perspective *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::perspective::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::perspective::copy",1,"inlib::sg::perspective const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("sg_perspective_copy",1,SWIGTYPE_p_inlib__sg__perspective); } 
  result = (inlib::sg::node *)((inlib::sg::perspective const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_perspective__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::perspective *result = 0 ;
  SWIG_check_num_args("inlib::sg::perspective::perspective",0,0)
  result = (inlib::sg::perspective *)new inlib::sg::perspective();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__perspective,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_perspective__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::perspective *arg1 = 0 ;
  inlib::sg::perspective *result = 0 ; SWIG_check_num_args("inlib::sg::perspective::perspective",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::perspective::perspective",1,"inlib::sg::perspective const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("new_sg_perspective",1,SWIGTYPE_p_inlib__sg__perspective); } 
  result = (inlib::sg::perspective *)new inlib::sg::perspective((inlib::sg::perspective const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__perspective,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_perspective(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_perspective__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__perspective, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_perspective__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_perspective'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::perspective::perspective()\n" "    inlib::sg::perspective::perspective(inlib::sg::perspective const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_perspective_height_angle_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::perspective *arg1 = (inlib::sg::perspective *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::perspective::height_angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::perspective::height_angle",1,"inlib::sg::perspective *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::perspective::height_angle",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("sg_perspective_height_angle_set",1,SWIGTYPE_p_inlib__sg__perspective); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_perspective_height_angle_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->height_angle = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_perspective_height_angle_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::perspective *arg1 = (inlib::sg::perspective *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::perspective::height_angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::perspective::height_angle",1,"inlib::sg::perspective *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__perspective,0))){
    SWIG_fail_ptr("sg_perspective_height_angle_get",1,SWIGTYPE_p_inlib__sg__perspective); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->height_angle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_perspective(void *obj) {
inlib::sg::perspective *arg1 = (inlib::sg::perspective *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_perspective(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_perspective);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_perspective_attributes[] = {
    { "height_angle", _wrap_sg_perspective_height_angle_get, _wrap_sg_perspective_height_angle_set },
    {0,0,0}
};
static swig_lua_method swig_sg_perspective_methods[]= {
    { "near_height", _wrap_sg_perspective_near_height},
    { "zoom", _wrap_sg_perspective_zoom},
    { "copy", _wrap_sg_perspective_copy},
    {0,0}
};
static swig_lua_method swig_sg_perspective_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_perspective_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_perspective_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_perspective_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_perspective_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_perspective_Sf_SwigStatic = {
    "sg_perspective",
    swig_sg_perspective_Sf_SwigStatic_methods,
    swig_sg_perspective_Sf_SwigStatic_attributes,
    swig_sg_perspective_Sf_SwigStatic_constants,
    swig_sg_perspective_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_perspective_bases[] = {0,0};
static const char *swig_sg_perspective_base_names[] = {"inlib::sg::base_camera *",0};
static swig_lua_class _wrap_class_sg_perspective = { "sg_perspective", "sg_perspective", &SWIGTYPE_p_inlib__sg__perspective,_proxy__wrap_new_sg_perspective, swig_delete_sg_perspective, swig_sg_perspective_methods, swig_sg_perspective_attributes, &swig_sg_perspective_Sf_SwigStatic, swig_sg_perspective_meta, swig_sg_perspective_bases, swig_sg_perspective_base_names };

static int _wrap_sg_cast_perspective(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_camera *arg1 = 0 ;
  inlib::sg::perspective *result = 0 ; SWIG_check_num_args("inlib::sg::cast_perspective",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cast_perspective",1,"inlib::sg::base_camera &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_cast_perspective",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::perspective *)inlib::sg::cast_perspective(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__perspective,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_near_height(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  float result; SWIG_check_num_args("inlib::sg::frustum::near_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::near_height",1,"inlib::sg::frustum const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_near_height",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (float)((inlib::sg::frustum const *)arg1)->near_height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_zoom(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  float arg2 ; SWIG_check_num_args("inlib::sg::frustum::zoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::zoom",1,"inlib::sg::frustum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::frustum::zoom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_zoom",1,SWIGTYPE_p_inlib__sg__frustum); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->zoom(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::copy",1,"inlib::sg::frustum const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_copy",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (inlib::sg::node *)((inlib::sg::frustum const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_frustum__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *result = 0 ;
  SWIG_check_num_args("inlib::sg::frustum::frustum",0,0) result = (inlib::sg::frustum *)new inlib::sg::frustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__frustum,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_frustum__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = 0 ;
  inlib::sg::frustum *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::frustum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::frustum::frustum",1,"inlib::sg::frustum const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("new_sg_frustum",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (inlib::sg::frustum *)new inlib::sg::frustum((inlib::sg::frustum const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__frustum,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_frustum(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_frustum__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__frustum, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_frustum__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_frustum'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::frustum::frustum()\n" "    inlib::sg::frustum::frustum(inlib::sg::frustum const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_frustum_left_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::frustum::left",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::left",1,"inlib::sg::frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::frustum::left",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_left_set",1,SWIGTYPE_p_inlib__sg__frustum); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_frustum_left_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->left = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_left_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::left",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::left",1,"inlib::sg::frustum *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_left_get",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->left);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_right_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::frustum::right",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::right",1,"inlib::sg::frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::frustum::right",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_right_set",1,SWIGTYPE_p_inlib__sg__frustum); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_frustum_right_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->right = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_right_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::right",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::right",1,"inlib::sg::frustum *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_right_get",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->right);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_bottom_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::frustum::bottom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::bottom",1,"inlib::sg::frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::frustum::bottom",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_bottom_set",1,SWIGTYPE_p_inlib__sg__frustum); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_frustum_bottom_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->bottom = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_bottom_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::bottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::bottom",1,"inlib::sg::frustum *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_bottom_get",1,SWIGTYPE_p_inlib__sg__frustum); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->bottom);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_top_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::frustum::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::top",1,"inlib::sg::frustum *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::frustum::top",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_top_set",1,SWIGTYPE_p_inlib__sg__frustum); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_frustum_top_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->top = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_frustum_top_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::frustum *arg1 = (inlib::sg::frustum *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::frustum::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::frustum::top",1,"inlib::sg::frustum *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__frustum,0))){
    SWIG_fail_ptr("sg_frustum_top_get",1,SWIGTYPE_p_inlib__sg__frustum); }  result = (inlib::sg::sf< float > *)& ((arg1)->top);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_frustum(void *obj) {
inlib::sg::frustum *arg1 = (inlib::sg::frustum *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_frustum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_frustum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_frustum_attributes[] = {
    { "left", _wrap_sg_frustum_left_get, _wrap_sg_frustum_left_set },
    { "right", _wrap_sg_frustum_right_get, _wrap_sg_frustum_right_set },
    { "bottom", _wrap_sg_frustum_bottom_get, _wrap_sg_frustum_bottom_set },
    { "top", _wrap_sg_frustum_top_get, _wrap_sg_frustum_top_set },
    {0,0,0}
};
static swig_lua_method swig_sg_frustum_methods[]= {
    { "near_height", _wrap_sg_frustum_near_height},
    { "zoom", _wrap_sg_frustum_zoom},
    { "copy", _wrap_sg_frustum_copy},
    {0,0}
};
static swig_lua_method swig_sg_frustum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_frustum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_frustum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_frustum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_frustum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_frustum_Sf_SwigStatic = {
    "sg_frustum",
    swig_sg_frustum_Sf_SwigStatic_methods,
    swig_sg_frustum_Sf_SwigStatic_attributes,
    swig_sg_frustum_Sf_SwigStatic_constants,
    swig_sg_frustum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_frustum_bases[] = {0,0};
static const char *swig_sg_frustum_base_names[] = {"inlib::sg::base_camera *",0};
static swig_lua_class _wrap_class_sg_frustum = { "sg_frustum", "sg_frustum", &SWIGTYPE_p_inlib__sg__frustum,_proxy__wrap_new_sg_frustum, swig_delete_sg_frustum, swig_sg_frustum_methods, swig_sg_frustum_attributes, &swig_sg_frustum_Sf_SwigStatic, swig_sg_frustum_meta, swig_sg_frustum_bases, swig_sg_frustum_base_names };

static int _wrap_sg_cast_frustum(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_camera *arg1 = 0 ;
  inlib::sg::frustum *result = 0 ; SWIG_check_num_args("inlib::sg::cast_frustum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cast_frustum",1,"inlib::sg::base_camera &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_cast_frustum",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::frustum *)inlib::sg::cast_frustum(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__frustum,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_near_height(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  float result; SWIG_check_num_args("inlib::sg::lrbt::near_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::near_height",1,"inlib::sg::lrbt const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_near_height",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  result = (float)((inlib::sg::lrbt const *)arg1)->near_height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_zoom(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::sg::lrbt::zoom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::zoom",1,"inlib::sg::lrbt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::lrbt::zoom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_zoom",1,SWIGTYPE_p_inlib__sg__lrbt); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->zoom(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::lrbt::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::copy",1,"inlib::sg::lrbt const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_copy",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  result = (inlib::sg::node *)((inlib::sg::lrbt const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_lrbt__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *result = 0 ;
  SWIG_check_num_args("inlib::sg::lrbt::lrbt",0,0) result = (inlib::sg::lrbt *)new inlib::sg::lrbt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__lrbt,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_lrbt__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = 0 ; inlib::sg::lrbt *result = 0 ;
  SWIG_check_num_args("inlib::sg::lrbt::lrbt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::lrbt::lrbt",1,"inlib::sg::lrbt const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("new_sg_lrbt",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  result = (inlib::sg::lrbt *)new inlib::sg::lrbt((inlib::sg::lrbt const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__lrbt,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_lrbt(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_lrbt__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__lrbt, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_lrbt__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_lrbt'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::lrbt::lrbt()\n" "    inlib::sg::lrbt::lrbt(inlib::sg::lrbt const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_lrbt_left_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::lrbt::left",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::left",1,"inlib::sg::lrbt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::lrbt::left",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_left_set",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_lrbt_left_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->left = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_left_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::lrbt::left",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::left",1,"inlib::sg::lrbt *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_left_get",1,SWIGTYPE_p_inlib__sg__lrbt); }  result = (inlib::sg::sf< float > *)& ((arg1)->left);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_right_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::lrbt::right",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::right",1,"inlib::sg::lrbt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::lrbt::right",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_right_set",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_lrbt_right_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->right = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_right_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::lrbt::right",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::right",1,"inlib::sg::lrbt *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_right_get",1,SWIGTYPE_p_inlib__sg__lrbt); }  result = (inlib::sg::sf< float > *)& ((arg1)->right);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_bottom_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::lrbt::bottom",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::bottom",1,"inlib::sg::lrbt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::lrbt::bottom",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_bottom_set",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_lrbt_bottom_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->bottom = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_bottom_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::lrbt::bottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::bottom",1,"inlib::sg::lrbt *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_bottom_get",1,SWIGTYPE_p_inlib__sg__lrbt); }  result = (inlib::sg::sf< float > *)& ((arg1)->bottom);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_top_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::lrbt::top",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::top",1,"inlib::sg::lrbt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::lrbt::top",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_top_set",1,SWIGTYPE_p_inlib__sg__lrbt); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_lrbt_top_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->top = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_lrbt_top_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::lrbt::top",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::lrbt::top",1,"inlib::sg::lrbt *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__lrbt,0))){
    SWIG_fail_ptr("sg_lrbt_top_get",1,SWIGTYPE_p_inlib__sg__lrbt); }  result = (inlib::sg::sf< float > *)& ((arg1)->top);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_lrbt(void *obj) {
inlib::sg::lrbt *arg1 = (inlib::sg::lrbt *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_lrbt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_lrbt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_lrbt_attributes[] = {
    { "left", _wrap_sg_lrbt_left_get, _wrap_sg_lrbt_left_set },
    { "right", _wrap_sg_lrbt_right_get, _wrap_sg_lrbt_right_set },
    { "bottom", _wrap_sg_lrbt_bottom_get, _wrap_sg_lrbt_bottom_set },
    { "top", _wrap_sg_lrbt_top_get, _wrap_sg_lrbt_top_set },
    {0,0,0}
};
static swig_lua_method swig_sg_lrbt_methods[]= {
    { "near_height", _wrap_sg_lrbt_near_height},
    { "zoom", _wrap_sg_lrbt_zoom},
    { "copy", _wrap_sg_lrbt_copy},
    {0,0}
};
static swig_lua_method swig_sg_lrbt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_lrbt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_lrbt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_lrbt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_lrbt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_lrbt_Sf_SwigStatic = {
    "sg_lrbt",
    swig_sg_lrbt_Sf_SwigStatic_methods,
    swig_sg_lrbt_Sf_SwigStatic_attributes,
    swig_sg_lrbt_Sf_SwigStatic_constants,
    swig_sg_lrbt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_lrbt_bases[] = {0,0};
static const char *swig_sg_lrbt_base_names[] = {"inlib::sg::base_camera *",0};
static swig_lua_class _wrap_class_sg_lrbt = { "sg_lrbt", "sg_lrbt", &SWIGTYPE_p_inlib__sg__lrbt,_proxy__wrap_new_sg_lrbt, swig_delete_sg_lrbt, swig_sg_lrbt_methods, swig_sg_lrbt_attributes, &swig_sg_lrbt_Sf_SwigStatic, swig_sg_lrbt_meta, swig_sg_lrbt_bases, swig_sg_lrbt_base_names };

static int _wrap_sg_cast_lrbt(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_camera *arg1 = 0 ; inlib::sg::lrbt *result = 0 ;
  SWIG_check_num_args("inlib::sg::cast_lrbt",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cast_lrbt",1,"inlib::sg::base_camera &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("sg_cast_lrbt",1,SWIGTYPE_p_inlib__sg__base_camera); } 
  result = (inlib::sg::lrbt *)inlib::sg::cast_lrbt(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__lrbt,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_rgba_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::rgba *arg1 = (inlib::sg::rgba *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::rgba::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::rgba::copy",1,"inlib::sg::rgba const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__rgba,0))){
    SWIG_fail_ptr("sg_rgba_copy",1,SWIGTYPE_p_inlib__sg__rgba); } 
  result = (inlib::sg::node *)((inlib::sg::rgba const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_rgba__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::rgba *result = 0 ;
  SWIG_check_num_args("inlib::sg::rgba::rgba",0,0) result = (inlib::sg::rgba *)new inlib::sg::rgba();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__rgba,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_rgba__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::rgba *arg1 = 0 ; inlib::sg::rgba *result = 0 ;
  SWIG_check_num_args("inlib::sg::rgba::rgba",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::rgba::rgba",1,"inlib::sg::rgba const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__rgba,0))){
    SWIG_fail_ptr("new_sg_rgba",1,SWIGTYPE_p_inlib__sg__rgba); } 
  result = (inlib::sg::rgba *)new inlib::sg::rgba((inlib::sg::rgba const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__rgba,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_rgba(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_rgba__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__rgba, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_rgba__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_rgba'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::rgba::rgba()\n" "    inlib::sg::rgba::rgba(inlib::sg::rgba const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_rgba_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::rgba *arg1 = (inlib::sg::rgba *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::rgba::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::rgba::color",1,"inlib::sg::rgba *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::rgba::color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__rgba,0))){
    SWIG_fail_ptr("sg_rgba_color_set",1,SWIGTYPE_p_inlib__sg__rgba); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sg_rgba_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_rgba_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::rgba *arg1 = (inlib::sg::rgba *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::rgba::color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::rgba::color",1,"inlib::sg::rgba *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__rgba,0))){
    SWIG_fail_ptr("sg_rgba_color_get",1,SWIGTYPE_p_inlib__sg__rgba); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_rgba(void *obj) {
inlib::sg::rgba *arg1 = (inlib::sg::rgba *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_rgba(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_rgba);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_rgba_attributes[] = {
    { "color", _wrap_sg_rgba_color_get, _wrap_sg_rgba_color_set },
    {0,0,0}
};
static swig_lua_method swig_sg_rgba_methods[]= {
    { "copy", _wrap_sg_rgba_copy},
    {0,0}
};
static swig_lua_method swig_sg_rgba_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_rgba_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_rgba_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_rgba_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_rgba_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_rgba_Sf_SwigStatic = {
    "sg_rgba",
    swig_sg_rgba_Sf_SwigStatic_methods,
    swig_sg_rgba_Sf_SwigStatic_attributes,
    swig_sg_rgba_Sf_SwigStatic_constants,
    swig_sg_rgba_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_rgba_bases[] = {0,0};
static const char *swig_sg_rgba_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_rgba = { "sg_rgba", "sg_rgba", &SWIGTYPE_p_inlib__sg__rgba,_proxy__wrap_new_sg_rgba, swig_delete_sg_rgba, swig_sg_rgba_methods, swig_sg_rgba_attributes, &swig_sg_rgba_Sf_SwigStatic, swig_sg_rgba_meta, swig_sg_rgba_bases, swig_sg_rgba_base_names };

static int _wrap_sg_base_tex_intersect_value(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; std::ostream *arg2 = 0 ; inlib::sg::base_tex::intersect_type arg3 ;
  inlib::line< inlib::vec3f > *arg4 = 0 ; std::string *arg5 = 0 ; bool result;
  SWIG_check_num_args("inlib::sg::base_tex::intersect_value",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::intersect_value",1,"inlib::sg::base_tex const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::base_tex::intersect_value",2,"std::ostream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::base_tex::intersect_value",3,"inlib::sg::base_tex::intersect_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("inlib::sg::base_tex::intersect_value",4,"inlib::line< inlib::vec3f > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("inlib::sg::base_tex::intersect_value",5,"std::string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_intersect_value",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("sg_base_tex_intersect_value",2,SWIGTYPE_p_std__ostream); } 
  arg3 = (inlib::sg::base_tex::intersect_type)(int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_inlib__lineT_inlib__vec3f_t,0))){
    SWIG_fail_ptr("sg_base_tex_intersect_value",4,SWIGTYPE_p_inlib__lineT_inlib__vec3f_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("sg_base_tex_intersect_value",5,SWIGTYPE_p_std__string); } 
  result = (bool)((inlib::sg::base_tex const *)arg1)->intersect_value(*arg2,arg3,(inlib::line< inlib::vec3f > const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_img_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ;
  inlib::sg::sf_img< inlib::byte > *arg2 = (inlib::sg::sf_img< inlib::byte > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::img",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::img",1,"inlib::sg::base_tex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_tex::img",2,"inlib::sg::sf_img< inlib::byte > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_img_set",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0))){
    SWIG_fail_ptr("sg_base_tex_img_set",2,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t); }  if (arg1) (arg1)->img = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_img_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ;
  inlib::sg::sf_img< inlib::byte > *result = 0 ; SWIG_check_num_args("inlib::sg::base_tex::img",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::img",1,"inlib::sg::base_tex *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_img_get",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  result = (inlib::sg::sf_img< inlib::byte > *)& ((arg1)->img);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_imgT_inlib__byte_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_back_color_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::back_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::back_color",1,"inlib::sg::base_tex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_tex::back_color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_back_color_set",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sg_base_tex_back_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->back_color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_back_color_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::back_color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::back_color",1,"inlib::sg::base_tex *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_back_color_get",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->back_color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_expand_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::expand",1,"inlib::sg::base_tex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_tex::expand",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_expand_set",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_base_tex_expand_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->expand = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_expand_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::expand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::expand",1,"inlib::sg::base_tex *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_expand_get",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->expand);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_limit_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::limit",1,"inlib::sg::base_tex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_tex::limit",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_limit_set",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_base_tex_limit_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->limit = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_limit_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::base_tex::limit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::limit",1,"inlib::sg::base_tex *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_limit_get",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->limit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_nearest_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::nearest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::nearest",1,"inlib::sg::base_tex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::base_tex::nearest",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_nearest_set",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_base_tex_nearest_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->nearest = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_base_tex_nearest_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::base_tex::nearest",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::base_tex::nearest",1,"inlib::sg::base_tex *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_tex,0))){
    SWIG_fail_ptr("sg_base_tex_nearest_get",1,SWIGTYPE_p_inlib__sg__base_tex); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->nearest);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_base_tex(void *obj) {
inlib::sg::base_tex *arg1 = (inlib::sg::base_tex *) obj;
delete arg1;
}
static swig_lua_attribute swig_sg_base_tex_attributes[] = {
    { "img", _wrap_sg_base_tex_img_get, _wrap_sg_base_tex_img_set },
    { "back_color", _wrap_sg_base_tex_back_color_get, _wrap_sg_base_tex_back_color_set },
    { "expand", _wrap_sg_base_tex_expand_get, _wrap_sg_base_tex_expand_set },
    { "limit", _wrap_sg_base_tex_limit_get, _wrap_sg_base_tex_limit_set },
    { "nearest", _wrap_sg_base_tex_nearest_get, _wrap_sg_base_tex_nearest_set },
    {0,0,0}
};
static swig_lua_method swig_sg_base_tex_methods[]= {
    { "intersect_value", _wrap_sg_base_tex_intersect_value},
    {0,0}
};
static swig_lua_method swig_sg_base_tex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_base_tex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_base_tex_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("intersect_down", inlib::sg::base_tex::intersect_down)},
    {SWIG_LUA_CONSTTAB_INT("intersect_move", inlib::sg::base_tex::intersect_move)},
    {SWIG_LUA_CONSTTAB_INT("intersect_up", inlib::sg::base_tex::intersect_up)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_base_tex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_base_tex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_base_tex_Sf_SwigStatic = {
    "sg_base_tex",
    swig_sg_base_tex_Sf_SwigStatic_methods,
    swig_sg_base_tex_Sf_SwigStatic_attributes,
    swig_sg_base_tex_Sf_SwigStatic_constants,
    swig_sg_base_tex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_base_tex_bases[] = {0};
static const char *swig_sg_base_tex_base_names[] = {0};
static swig_lua_class _wrap_class_sg_base_tex = { "sg_base_tex", "sg_base_tex", &SWIGTYPE_p_inlib__sg__base_tex,0, swig_delete_sg_base_tex, swig_sg_base_tex_methods, swig_sg_base_tex_attributes, &swig_sg_base_tex_Sf_SwigStatic, swig_sg_base_tex_meta, swig_sg_base_tex_bases, swig_sg_base_tex_base_names };

static int _wrap_sg_tex_rect_intersect_value(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::tex_rect *arg1 = (inlib::sg::tex_rect *) 0 ; std::ostream *arg2 = 0 ; inlib::sg::base_tex::intersect_type arg3 ;
  inlib::line< inlib::vec3f > *arg4 = 0 ; std::string *arg5 = 0 ; bool result;
  SWIG_check_num_args("inlib::sg::tex_rect::intersect_value",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::tex_rect::intersect_value",1,"inlib::sg::tex_rect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::tex_rect::intersect_value",2,"std::ostream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::tex_rect::intersect_value",3,"inlib::sg::base_tex::intersect_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("inlib::sg::tex_rect::intersect_value",4,"inlib::line< inlib::vec3f > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("inlib::sg::tex_rect::intersect_value",5,"std::string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__tex_rect,0))){
    SWIG_fail_ptr("sg_tex_rect_intersect_value",1,SWIGTYPE_p_inlib__sg__tex_rect); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("sg_tex_rect_intersect_value",2,SWIGTYPE_p_std__ostream); } 
  arg3 = (inlib::sg::base_tex::intersect_type)(int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_inlib__lineT_inlib__vec3f_t,0))){
    SWIG_fail_ptr("sg_tex_rect_intersect_value",4,SWIGTYPE_p_inlib__lineT_inlib__vec3f_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("sg_tex_rect_intersect_value",5,SWIGTYPE_p_std__string); } 
  result = (bool)((inlib::sg::tex_rect const *)arg1)->intersect_value(*arg2,arg3,(inlib::line< inlib::vec3f > const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_tex_rect_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::tex_rect *arg1 = (inlib::sg::tex_rect *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::tex_rect::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::tex_rect::copy",1,"inlib::sg::tex_rect const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__tex_rect,0))){
    SWIG_fail_ptr("sg_tex_rect_copy",1,SWIGTYPE_p_inlib__sg__tex_rect); } 
  result = (inlib::sg::node *)((inlib::sg::tex_rect const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_tex_rect__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::tex_rect *result = 0 ;
  SWIG_check_num_args("inlib::sg::tex_rect::tex_rect",0,0) result = (inlib::sg::tex_rect *)new inlib::sg::tex_rect();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__tex_rect,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_tex_rect__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::tex_rect *arg1 = 0 ;
  inlib::sg::tex_rect *result = 0 ; SWIG_check_num_args("inlib::sg::tex_rect::tex_rect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::tex_rect::tex_rect",1,"inlib::sg::tex_rect const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__tex_rect,0))){
    SWIG_fail_ptr("new_sg_tex_rect",1,SWIGTYPE_p_inlib__sg__tex_rect); } 
  result = (inlib::sg::tex_rect *)new inlib::sg::tex_rect((inlib::sg::tex_rect const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__tex_rect,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_tex_rect(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_tex_rect__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__tex_rect, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_tex_rect__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_tex_rect'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::tex_rect::tex_rect()\n" "    inlib::sg::tex_rect::tex_rect(inlib::sg::tex_rect const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_tex_rect(void *obj) {
inlib::sg::tex_rect *arg1 = (inlib::sg::tex_rect *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_tex_rect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_tex_rect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_tex_rect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_tex_rect_methods[]= {
    { "intersect_value", _wrap_sg_tex_rect_intersect_value},
    { "copy", _wrap_sg_tex_rect_copy},
    {0,0}
};
static swig_lua_method swig_sg_tex_rect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_tex_rect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_tex_rect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_tex_rect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_tex_rect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_tex_rect_Sf_SwigStatic = {
    "sg_tex_rect",
    swig_sg_tex_rect_Sf_SwigStatic_methods,
    swig_sg_tex_rect_Sf_SwigStatic_attributes,
    swig_sg_tex_rect_Sf_SwigStatic_constants,
    swig_sg_tex_rect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_tex_rect_bases[] = {0,0,0};
static const char *swig_sg_tex_rect_base_names[] = {"inlib::sg::base_tex *","inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_tex_rect = { "sg_tex_rect", "sg_tex_rect", &SWIGTYPE_p_inlib__sg__tex_rect,_proxy__wrap_new_sg_tex_rect, swig_delete_sg_tex_rect, swig_sg_tex_rect_methods, swig_sg_tex_rect_attributes, &swig_sg_tex_rect_Sf_SwigStatic, swig_sg_tex_rect_meta, swig_sg_tex_rect_bases, swig_sg_tex_rect_base_names };

static int _wrap_sg_torche_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::torche::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::copy",1,"inlib::sg::torche const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_copy",1,SWIGTYPE_p_inlib__sg__torche); } 
  result = (inlib::sg::node *)((inlib::sg::torche const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_torche__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *result = 0 ;
  SWIG_check_num_args("inlib::sg::torche::torche",0,0) result = (inlib::sg::torche *)new inlib::sg::torche();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__torche,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_torche__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = 0 ;
  inlib::sg::torche *result = 0 ; SWIG_check_num_args("inlib::sg::torche::torche",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::torche::torche",1,"inlib::sg::torche const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("new_sg_torche",1,SWIGTYPE_p_inlib__sg__torche); } 
  result = (inlib::sg::torche *)new inlib::sg::torche((inlib::sg::torche const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__torche,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_torche(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_torche__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__torche, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_torche__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_torche'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::torche::torche()\n" "    inlib::sg::torche::torche(inlib::sg::torche const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_torche_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::torche::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::color",1,"inlib::sg::torche *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::torche::color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_color_set",1,SWIGTYPE_p_inlib__sg__torche); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sg_torche_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_torche_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::torche::color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::color",1,"inlib::sg::torche *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_color_get",1,SWIGTYPE_p_inlib__sg__torche); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_torche_direction_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf_vec3f *arg2 = (inlib::sg::sf_vec3f *) 0 ; SWIG_check_num_args("inlib::sg::torche::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::direction",1,"inlib::sg::torche *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::torche::direction",2,"inlib::sg::sf_vec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_direction_set",1,SWIGTYPE_p_inlib__sg__torche); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vec3f,0))){
    SWIG_fail_ptr("sg_torche_direction_set",2,SWIGTYPE_p_inlib__sg__sf_vec3f); }  if (arg1) (arg1)->direction = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_torche_direction_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf_vec3f *result = 0 ; SWIG_check_num_args("inlib::sg::torche::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::direction",1,"inlib::sg::torche *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_direction_get",1,SWIGTYPE_p_inlib__sg__torche); } 
  result = (inlib::sg::sf_vec3f *)& ((arg1)->direction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_torche_on_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::torche::on",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::on",1,"inlib::sg::torche *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::torche::on",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_on_set",1,SWIGTYPE_p_inlib__sg__torche); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_torche_on_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->on = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_torche_on_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::torche *arg1 = (inlib::sg::torche *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::torche::on",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::torche::on",1,"inlib::sg::torche *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("sg_torche_on_get",1,SWIGTYPE_p_inlib__sg__torche); }  result = (inlib::sg::sf< bool > *)& ((arg1)->on);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_torche(void *obj) {
inlib::sg::torche *arg1 = (inlib::sg::torche *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_torche(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_torche);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_torche_attributes[] = {
    { "color", _wrap_sg_torche_color_get, _wrap_sg_torche_color_set },
    { "direction", _wrap_sg_torche_direction_get, _wrap_sg_torche_direction_set },
    { "on", _wrap_sg_torche_on_get, _wrap_sg_torche_on_set },
    {0,0,0}
};
static swig_lua_method swig_sg_torche_methods[]= {
    { "copy", _wrap_sg_torche_copy},
    {0,0}
};
static swig_lua_method swig_sg_torche_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_torche_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_torche_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_torche_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_torche_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_torche_Sf_SwigStatic = {
    "sg_torche",
    swig_sg_torche_Sf_SwigStatic_methods,
    swig_sg_torche_Sf_SwigStatic_attributes,
    swig_sg_torche_Sf_SwigStatic_constants,
    swig_sg_torche_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_torche_bases[] = {0,0};
static const char *swig_sg_torche_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_torche = { "sg_torche", "sg_torche", &SWIGTYPE_p_inlib__sg__torche,_proxy__wrap_new_sg_torche, swig_delete_sg_torche, swig_sg_torche_methods, swig_sg_torche_attributes, &swig_sg_torche_Sf_SwigStatic, swig_sg_torche_meta, swig_sg_torche_bases, swig_sg_torche_base_names };

static int _wrap_sg_head_light_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::head_light *arg1 = (inlib::sg::head_light *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::head_light::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::head_light::copy",1,"inlib::sg::head_light const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__head_light,0))){
    SWIG_fail_ptr("sg_head_light_copy",1,SWIGTYPE_p_inlib__sg__head_light); } 
  result = (inlib::sg::node *)((inlib::sg::head_light const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_head_light__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::head_light *result = 0 ;
  SWIG_check_num_args("inlib::sg::head_light::head_light",0,0) result = (inlib::sg::head_light *)new inlib::sg::head_light();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__head_light,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_head_light__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::head_light *arg1 = 0 ;
  inlib::sg::head_light *result = 0 ; SWIG_check_num_args("inlib::sg::head_light::head_light",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::head_light::head_light",1,"inlib::sg::head_light const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__head_light,0))){
    SWIG_fail_ptr("new_sg_head_light",1,SWIGTYPE_p_inlib__sg__head_light); } 
  result = (inlib::sg::head_light *)new inlib::sg::head_light((inlib::sg::head_light const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__head_light,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_head_light(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_head_light__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__head_light, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_head_light__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_head_light'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::head_light::head_light()\n" "    inlib::sg::head_light::head_light(inlib::sg::head_light const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_head_light(void *obj) {
inlib::sg::head_light *arg1 = (inlib::sg::head_light *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_head_light(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_head_light);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_head_light_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_head_light_methods[]= {
    { "copy", _wrap_sg_head_light_copy},
    {0,0}
};
static swig_lua_method swig_sg_head_light_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_head_light_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_head_light_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_head_light_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_head_light_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_head_light_Sf_SwigStatic = {
    "sg_head_light",
    swig_sg_head_light_Sf_SwigStatic_methods,
    swig_sg_head_light_Sf_SwigStatic_attributes,
    swig_sg_head_light_Sf_SwigStatic_constants,
    swig_sg_head_light_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_head_light_bases[] = {0,0};
static const char *swig_sg_head_light_base_names[] = {"inlib::sg::torche *",0};
static swig_lua_class _wrap_class_sg_head_light = { "sg_head_light", "sg_head_light", &SWIGTYPE_p_inlib__sg__head_light,_proxy__wrap_new_sg_head_light, swig_delete_sg_head_light, swig_sg_head_light_methods, swig_sg_head_light_attributes, &swig_sg_head_light_Sf_SwigStatic, swig_sg_head_light_meta, swig_sg_head_light_bases, swig_sg_head_light_base_names };

static int _wrap_sg_blend_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::blend *arg1 = (inlib::sg::blend *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::blend::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::blend::copy",1,"inlib::sg::blend const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__blend,0))){
    SWIG_fail_ptr("sg_blend_copy",1,SWIGTYPE_p_inlib__sg__blend); } 
  result = (inlib::sg::node *)((inlib::sg::blend const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_blend__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::blend *result = 0 ;
  SWIG_check_num_args("inlib::sg::blend::blend",0,0) result = (inlib::sg::blend *)new inlib::sg::blend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__blend,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_blend__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::blend *arg1 = 0 ;
  inlib::sg::blend *result = 0 ; SWIG_check_num_args("inlib::sg::blend::blend",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::blend::blend",1,"inlib::sg::blend const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__blend,0))){
    SWIG_fail_ptr("new_sg_blend",1,SWIGTYPE_p_inlib__sg__blend); } 
  result = (inlib::sg::blend *)new inlib::sg::blend((inlib::sg::blend const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__blend,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_blend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_blend__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__blend, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_blend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_blend'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::blend::blend()\n" "    inlib::sg::blend::blend(inlib::sg::blend const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_blend_on_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::blend *arg1 = (inlib::sg::blend *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::blend::on",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::blend::on",1,"inlib::sg::blend *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::blend::on",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__blend,0))){
    SWIG_fail_ptr("sg_blend_on_set",1,SWIGTYPE_p_inlib__sg__blend); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_blend_on_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->on = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_blend_on_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::blend *arg1 = (inlib::sg::blend *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::blend::on",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::blend::on",1,"inlib::sg::blend *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__blend,0))){
    SWIG_fail_ptr("sg_blend_on_get",1,SWIGTYPE_p_inlib__sg__blend); }  result = (inlib::sg::sf< bool > *)& ((arg1)->on);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_blend(void *obj) {
inlib::sg::blend *arg1 = (inlib::sg::blend *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_blend(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_blend);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_blend_attributes[] = {
    { "on", _wrap_sg_blend_on_get, _wrap_sg_blend_on_set },
    {0,0,0}
};
static swig_lua_method swig_sg_blend_methods[]= {
    { "copy", _wrap_sg_blend_copy},
    {0,0}
};
static swig_lua_method swig_sg_blend_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_blend_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_blend_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_blend_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_blend_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_blend_Sf_SwigStatic = {
    "sg_blend",
    swig_sg_blend_Sf_SwigStatic_methods,
    swig_sg_blend_Sf_SwigStatic_attributes,
    swig_sg_blend_Sf_SwigStatic_constants,
    swig_sg_blend_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_blend_bases[] = {0,0};
static const char *swig_sg_blend_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_blend = { "sg_blend", "sg_blend", &SWIGTYPE_p_inlib__sg__blend,_proxy__wrap_new_sg_blend, swig_delete_sg_blend, swig_sg_blend_methods, swig_sg_blend_attributes, &swig_sg_blend_Sf_SwigStatic, swig_sg_blend_meta, swig_sg_blend_bases, swig_sg_blend_base_names };

static int _wrap_sg_matrix_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::matrix::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::copy",1,"inlib::sg::matrix const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_copy",1,SWIGTYPE_p_inlib__sg__matrix); } 
  result = (inlib::sg::node *)((inlib::sg::matrix const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_matrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *result = 0 ;
  SWIG_check_num_args("inlib::sg::matrix::matrix",0,0) result = (inlib::sg::matrix *)new inlib::sg::matrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__matrix,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_matrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = 0 ;
  inlib::sg::matrix *result = 0 ; SWIG_check_num_args("inlib::sg::matrix::matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::matrix::matrix",1,"inlib::sg::matrix const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("new_sg_matrix",1,SWIGTYPE_p_inlib__sg__matrix); } 
  result = (inlib::sg::matrix *)new inlib::sg::matrix((inlib::sg::matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__matrix,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_matrix(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_matrix__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_matrix__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_matrix'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::matrix::matrix()\n" "    inlib::sg::matrix::matrix(inlib::sg::matrix const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_mtx_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  inlib::sg::sf_mat4f *arg2 = (inlib::sg::sf_mat4f *) 0 ; SWIG_check_num_args("inlib::sg::matrix::mtx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mtx",1,"inlib::sg::matrix *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::matrix::mtx",2,"inlib::sg::sf_mat4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mtx_set",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_mat4f,0))){
    SWIG_fail_ptr("sg_matrix_mtx_set",2,SWIGTYPE_p_inlib__sg__sf_mat4f); }  if (arg1) (arg1)->mtx = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mtx_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  inlib::sg::sf_mat4f *result = 0 ; SWIG_check_num_args("inlib::sg::matrix::mtx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mtx",1,"inlib::sg::matrix *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mtx_get",1,SWIGTYPE_p_inlib__sg__matrix); }  result = (inlib::sg::sf_mat4f *)& ((arg1)->mtx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_mat4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_identity(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  SWIG_check_num_args("inlib::sg::matrix::set_identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_identity",1,"inlib::sg::matrix *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_identity",1,SWIGTYPE_p_inlib__sg__matrix); }  (arg1)->set_identity(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::matrix::set_translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_translate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::set_translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::set_translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_translate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set_translate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::matrix::set_translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_translate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_translate",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_translate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_set_translate",2,SWIGTYPE_p_inlib__vec3f); }  (arg1)->set_translate((inlib::vec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_matrix_set_translate__SWIG_1(L);}  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_matrix_set_translate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_set_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::set_translate(float,float,float)\n"
  "    inlib::sg::matrix::set_translate(inlib::vec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_set_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::matrix::set_scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_scale",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::set_scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::set_scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_scale",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set_scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; SWIG_check_num_args("inlib::sg::matrix::set_scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_scale",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_scale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_scale",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_scale(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_scale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sg_matrix_set_scale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_matrix_set_scale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_set_scale'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::set_scale(float,float,float)\n"
  "    inlib::sg::matrix::set_scale(float)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_set_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("inlib::sg::matrix::set_rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_rotate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set_rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ; float arg3 ;
  SWIG_check_num_args("inlib::sg::matrix::set_rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",2,"inlib::vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::set_rotate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_set_rotate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_set_rotate",2,SWIGTYPE_p_inlib__vec3f); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set_rotate((inlib::vec3f const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_set_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_sg_matrix_set_rotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_sg_matrix_set_rotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_set_rotate'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::set_rotate(float,float,float,float)\n"
  "    inlib::sg::matrix::set_rotate(inlib::vec3f const &,float)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_mul_mtx(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  inlib::mat4f *arg2 = 0 ; SWIG_check_num_args("inlib::sg::matrix::mul_mtx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_mtx",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_mtx",2,"inlib::mat4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_mtx",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__mat4f,0))){
    SWIG_fail_ptr("sg_matrix_mul_mtx",2,SWIGTYPE_p_inlib__mat4f); }  (arg1)->mul_mtx((inlib::mat4f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::matrix::mul_translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_translate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->mul_translate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::matrix::mul_translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_translate",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_translate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_mul_translate",2,SWIGTYPE_p_inlib__vec3f); }  (arg1)->mul_translate((inlib::vec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_matrix_mul_translate__SWIG_1(L);}  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_matrix_mul_translate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_mul_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::mul_translate(float,float,float)\n"
  "    inlib::sg::matrix::mul_translate(inlib::vec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_mul_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::matrix::mul_scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_scale",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->mul_scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; SWIG_check_num_args("inlib::sg::matrix::mul_scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_scale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_scale",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->mul_scale(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_scale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sg_matrix_mul_scale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_matrix_mul_scale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_mul_scale'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::mul_scale(float,float,float)\n"
  "    inlib::sg::matrix::mul_scale(float)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_mul_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("inlib::sg::matrix::mul_rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->mul_rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ; float arg3 ;
  SWIG_check_num_args("inlib::sg::matrix::mul_rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",2,"inlib::vec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",2,SWIGTYPE_p_inlib__vec3f); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->mul_rotate((inlib::vec3f const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_left_mul_rotate(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("inlib::sg::matrix::left_mul_rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::left_mul_rotate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::left_mul_rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::left_mul_rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::left_mul_rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::matrix::left_mul_rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_left_mul_rotate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->left_mul_rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_left_mul_scale(lua_State* L) { int SWIG_arg = 0; inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("inlib::sg::matrix::left_mul_scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::left_mul_scale",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::left_mul_scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::left_mul_scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::left_mul_scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_left_mul_scale",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->left_mul_scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_left_mul_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::matrix::left_mul_translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",1,"inlib::sg::matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_left_mul_translate",1,SWIGTYPE_p_inlib__sg__matrix); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->left_mul_translate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_left_mul_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::matrix::left_mul_translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::left_mul_translate",2,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_left_mul_translate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_left_mul_translate",2,SWIGTYPE_p_inlib__vec3f); } 
  (arg1)->left_mul_translate((inlib::vec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_matrix_left_mul_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_matrix_left_mul_translate__SWIG_1(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_matrix_left_mul_translate__SWIG_0(L);}  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_left_mul_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::left_mul_translate(float,float,float)\n"
  "    inlib::sg::matrix::left_mul_translate(inlib::vec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_matrix_mul_rotate__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::matrix *arg1 = (inlib::sg::matrix *) 0 ; inlib::vec3f *arg2 = 0 ; inlib::vec3f *arg3 = 0 ; bool result;
  SWIG_check_num_args("inlib::sg::matrix::mul_rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",1,"inlib::sg::matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",2,"inlib::vec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::sg::matrix::mul_rotate",3,"inlib::vec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__matrix,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",1,SWIGTYPE_p_inlib__sg__matrix); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",2,SWIGTYPE_p_inlib__vec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__vec3f,0))){
    SWIG_fail_ptr("sg_matrix_mul_rotate",3,SWIGTYPE_p_inlib__vec3f); } 
  result = (bool)(arg1)->mul_rotate((inlib::vec3f const &)*arg2,(inlib::vec3f const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_matrix_mul_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_matrix_mul_rotate__SWIG_2(L);}  }  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__vec3f, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_sg_matrix_mul_rotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__matrix, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_sg_matrix_mul_rotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_matrix_mul_rotate'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::matrix::mul_rotate(float,float,float,float)\n"
  "    inlib::sg::matrix::mul_rotate(inlib::vec3f const &,float)\n"
  "    inlib::sg::matrix::mul_rotate(inlib::vec3f const &,inlib::vec3f const &)\n"); lua_error(L);return 0; }
static void swig_delete_sg_matrix(void *obj) {
inlib::sg::matrix *arg1 = (inlib::sg::matrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_matrix_attributes[] = {
    { "mtx", _wrap_sg_matrix_mtx_get, _wrap_sg_matrix_mtx_set },
    {0,0,0}
};
static swig_lua_method swig_sg_matrix_methods[]= {
    { "copy", _wrap_sg_matrix_copy},
    { "set_identity", _wrap_sg_matrix_set_identity},
    { "set_translate", _wrap_sg_matrix_set_translate},
    { "set_scale", _wrap_sg_matrix_set_scale},
    { "set_rotate", _wrap_sg_matrix_set_rotate},
    { "mul_mtx", _wrap_sg_matrix_mul_mtx},
    { "mul_translate", _wrap_sg_matrix_mul_translate},
    { "mul_scale", _wrap_sg_matrix_mul_scale},
    { "left_mul_rotate", _wrap_sg_matrix_left_mul_rotate},
    { "left_mul_scale", _wrap_sg_matrix_left_mul_scale},
    { "left_mul_translate", _wrap_sg_matrix_left_mul_translate},
    { "mul_rotate", _wrap_sg_matrix_mul_rotate},
    {0,0}
};
static swig_lua_method swig_sg_matrix_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_matrix_Sf_SwigStatic = {
    "sg_matrix",
    swig_sg_matrix_Sf_SwigStatic_methods,
    swig_sg_matrix_Sf_SwigStatic_attributes,
    swig_sg_matrix_Sf_SwigStatic_constants,
    swig_sg_matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_matrix_bases[] = {0,0};
static const char *swig_sg_matrix_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_matrix = { "sg_matrix", "sg_matrix", &SWIGTYPE_p_inlib__sg__matrix,_proxy__wrap_new_sg_matrix, swig_delete_sg_matrix, swig_sg_matrix_methods, swig_sg_matrix_attributes, &swig_sg_matrix_Sf_SwigStatic, swig_sg_matrix_meta, swig_sg_matrix_bases, swig_sg_matrix_base_names };

static int _wrap_sg_polyhedron_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::copy",1,"inlib::sg::polyhedron const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_copy",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::sg::node *)((inlib::sg::polyhedron const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_polyhedron__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::polyhedron",0,0) result = (inlib::sg::polyhedron *)new inlib::sg::polyhedron();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_polyhedron__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::polyhedron *arg1 = 0 ;
  inlib::sg::polyhedron *result = 0 ; SWIG_check_num_args("inlib::sg::polyhedron::polyhedron",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::polyhedron",1,"inlib::sg::polyhedron const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("new_sg_polyhedron",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::sg::polyhedron *)new inlib::sg::polyhedron((inlib::sg::polyhedron const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__polyhedron,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_polyhedron(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_polyhedron__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__polyhedron, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_polyhedron__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_polyhedron'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::polyhedron::polyhedron()\n" "    inlib::sg::polyhedron::polyhedron(inlib::sg::polyhedron const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_polyhedron_ph_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ;
  inlib::hep::sf_polyhedron *arg2 = (inlib::hep::sf_polyhedron *) 0 ; SWIG_check_num_args("inlib::sg::polyhedron::ph",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::ph",1,"inlib::sg::polyhedron *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::polyhedron::ph",2,"inlib::hep::sf_polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_ph_set",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__hep__sf_polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_ph_set",2,SWIGTYPE_p_inlib__hep__sf_polyhedron); }  if (arg1) (arg1)->ph = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_ph_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::hep::sf_polyhedron *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::ph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::ph",1,"inlib::sg::polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_ph_get",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::hep::sf_polyhedron *)& ((arg1)->ph);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__hep__sf_polyhedron,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_solid_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::solid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::solid",1,"inlib::sg::polyhedron *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::polyhedron::solid",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_solid_set",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_polyhedron_solid_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->solid = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_solid_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::solid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::solid",1,"inlib::sg::polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_solid_get",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->solid);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_reduced_wire_frame_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::reduced_wire_frame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::reduced_wire_frame",1,"inlib::sg::polyhedron *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::polyhedron::reduced_wire_frame",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_reduced_wire_frame_set",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_polyhedron_reduced_wire_frame_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->reduced_wire_frame = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_reduced_wire_frame_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::reduced_wire_frame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::reduced_wire_frame",1,"inlib::sg::polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_reduced_wire_frame_get",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->reduced_wire_frame);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_enforce_edges_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::enforce_edges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::enforce_edges",1,"inlib::sg::polyhedron *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::polyhedron::enforce_edges",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_enforce_edges_set",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_polyhedron_enforce_edges_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->enforce_edges = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_polyhedron_enforce_edges_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::polyhedron::enforce_edges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::polyhedron::enforce_edges",1,"inlib::sg::polyhedron *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__polyhedron,0))){
    SWIG_fail_ptr("sg_polyhedron_enforce_edges_get",1,SWIGTYPE_p_inlib__sg__polyhedron); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->enforce_edges);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_polyhedron(void *obj) {
inlib::sg::polyhedron *arg1 = (inlib::sg::polyhedron *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_polyhedron(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_polyhedron);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_polyhedron_attributes[] = {
    { "ph", _wrap_sg_polyhedron_ph_get, _wrap_sg_polyhedron_ph_set },
    { "solid", _wrap_sg_polyhedron_solid_get, _wrap_sg_polyhedron_solid_set },
    { "reduced_wire_frame", _wrap_sg_polyhedron_reduced_wire_frame_get, _wrap_sg_polyhedron_reduced_wire_frame_set },
    { "enforce_edges", _wrap_sg_polyhedron_enforce_edges_get, _wrap_sg_polyhedron_enforce_edges_set },
    {0,0,0}
};
static swig_lua_method swig_sg_polyhedron_methods[]= {
    { "copy", _wrap_sg_polyhedron_copy},
    {0,0}
};
static swig_lua_method swig_sg_polyhedron_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_polyhedron_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_polyhedron_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_polyhedron_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_polyhedron_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_polyhedron_Sf_SwigStatic = {
    "sg_polyhedron",
    swig_sg_polyhedron_Sf_SwigStatic_methods,
    swig_sg_polyhedron_Sf_SwigStatic_attributes,
    swig_sg_polyhedron_Sf_SwigStatic_constants,
    swig_sg_polyhedron_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_polyhedron_bases[] = {0,0};
static const char *swig_sg_polyhedron_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_polyhedron = { "sg_polyhedron", "sg_polyhedron", &SWIGTYPE_p_inlib__sg__polyhedron,_proxy__wrap_new_sg_polyhedron, swig_delete_sg_polyhedron, swig_sg_polyhedron_methods, swig_sg_polyhedron_attributes, &swig_sg_polyhedron_Sf_SwigStatic, swig_sg_polyhedron_meta, swig_sg_polyhedron_bases, swig_sg_polyhedron_base_names };

static int _wrap_sg_cone_hat_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::copy",1,"inlib::sg::cone_hat const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_copy",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::node *)((inlib::sg::cone_hat const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_cone_hat__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *result = 0 ;
  SWIG_check_num_args("inlib::sg::cone_hat::cone_hat",0,0) result = (inlib::sg::cone_hat *)new inlib::sg::cone_hat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__cone_hat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_cone_hat__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = 0 ;
  inlib::sg::cone_hat *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::cone_hat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::cone_hat",1,"inlib::sg::cone_hat const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("new_sg_cone_hat",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::cone_hat *)new inlib::sg::cone_hat((inlib::sg::cone_hat const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__cone_hat,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_cone_hat(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_cone_hat__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__cone_hat, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_cone_hat__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_cone_hat'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::cone_hat::cone_hat()\n" "    inlib::sg::cone_hat::cone_hat(inlib::sg::cone_hat const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_cone_hat_height_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::cone_hat::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::height",1,"inlib::sg::cone_hat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cone_hat::height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_height_set",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cone_hat_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_height_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::cone_hat::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::height",1,"inlib::sg::cone_hat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_height_get",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_rmin_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cone_hat::rmin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::rmin",1,"inlib::sg::cone_hat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cone_hat::rmin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_rmin_set",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cone_hat_rmin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->rmin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_rmin_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::rmin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::rmin",1,"inlib::sg::cone_hat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_rmin_get",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->rmin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_rmax_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cone_hat::rmax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::rmax",1,"inlib::sg::cone_hat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cone_hat::rmax",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_rmax_set",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cone_hat_rmax_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->rmax = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_rmax_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::rmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::rmax",1,"inlib::sg::cone_hat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_rmax_get",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->rmax);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_angle_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cone_hat::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::angle",1,"inlib::sg::cone_hat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cone_hat::angle",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_angle_set",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cone_hat_angle_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->angle = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_angle_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::angle",1,"inlib::sg::cone_hat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_angle_get",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->angle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_steps_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::cone_hat::steps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::steps",1,"inlib::sg::cone_hat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cone_hat::steps",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_steps_set",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_cone_hat_steps_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->steps = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cone_hat_steps_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::cone_hat::steps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cone_hat::steps",1,"inlib::sg::cone_hat *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cone_hat,0))){
    SWIG_fail_ptr("sg_cone_hat_steps_get",1,SWIGTYPE_p_inlib__sg__cone_hat); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->steps);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_cone_hat(void *obj) {
inlib::sg::cone_hat *arg1 = (inlib::sg::cone_hat *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_cone_hat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_cone_hat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_cone_hat_attributes[] = {
    { "height", _wrap_sg_cone_hat_height_get, _wrap_sg_cone_hat_height_set },
    { "rmin", _wrap_sg_cone_hat_rmin_get, _wrap_sg_cone_hat_rmin_set },
    { "rmax", _wrap_sg_cone_hat_rmax_get, _wrap_sg_cone_hat_rmax_set },
    { "angle", _wrap_sg_cone_hat_angle_get, _wrap_sg_cone_hat_angle_set },
    { "steps", _wrap_sg_cone_hat_steps_get, _wrap_sg_cone_hat_steps_set },
    {0,0,0}
};
static swig_lua_method swig_sg_cone_hat_methods[]= {
    { "copy", _wrap_sg_cone_hat_copy},
    {0,0}
};
static swig_lua_method swig_sg_cone_hat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_cone_hat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_cone_hat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_cone_hat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_cone_hat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_cone_hat_Sf_SwigStatic = {
    "sg_cone_hat",
    swig_sg_cone_hat_Sf_SwigStatic_methods,
    swig_sg_cone_hat_Sf_SwigStatic_attributes,
    swig_sg_cone_hat_Sf_SwigStatic_constants,
    swig_sg_cone_hat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_cone_hat_bases[] = {0,0};
static const char *swig_sg_cone_hat_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_cone_hat = { "sg_cone_hat", "sg_cone_hat", &SWIGTYPE_p_inlib__sg__cone_hat,_proxy__wrap_new_sg_cone_hat, swig_delete_sg_cone_hat, swig_sg_cone_hat_methods, swig_sg_cone_hat_attributes, &swig_sg_cone_hat_Sf_SwigStatic, swig_sg_cone_hat_meta, swig_sg_cone_hat_bases, swig_sg_cone_hat_base_names };

static int _wrap_sg_cube_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::cube::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::copy",1,"inlib::sg::cube const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_copy",1,SWIGTYPE_p_inlib__sg__cube); } 
  result = (inlib::sg::node *)((inlib::sg::cube const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_cube__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *result = 0 ;
  SWIG_check_num_args("inlib::sg::cube::cube",0,0) result = (inlib::sg::cube *)new inlib::sg::cube();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__cube,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_cube__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = 0 ; inlib::sg::cube *result = 0 ;
  SWIG_check_num_args("inlib::sg::cube::cube",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cube::cube",1,"inlib::sg::cube const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("new_sg_cube",1,SWIGTYPE_p_inlib__sg__cube); } 
  result = (inlib::sg::cube *)new inlib::sg::cube((inlib::sg::cube const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__cube,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_cube(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_cube__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__cube, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_cube__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_cube'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::cube::cube()\n" "    inlib::sg::cube::cube(inlib::sg::cube const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_cube_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cube::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::width",1,"inlib::sg::cube *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cube::width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_width_set",1,SWIGTYPE_p_inlib__sg__cube); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cube_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->width = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cube_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cube::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::width",1,"inlib::sg::cube *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_width_get",1,SWIGTYPE_p_inlib__sg__cube); }  result = (inlib::sg::sf< float > *)& ((arg1)->width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cube_height_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cube::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::height",1,"inlib::sg::cube *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cube::height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_height_set",1,SWIGTYPE_p_inlib__sg__cube); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cube_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cube_height_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cube::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::height",1,"inlib::sg::cube *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_height_get",1,SWIGTYPE_p_inlib__sg__cube); }  result = (inlib::sg::sf< float > *)& ((arg1)->height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_cube_depth_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::cube::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::depth",1,"inlib::sg::cube *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::cube::depth",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_depth_set",1,SWIGTYPE_p_inlib__sg__cube); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_cube_depth_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->depth = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_cube_depth_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::cube *arg1 = (inlib::sg::cube *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::cube::depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::cube::depth",1,"inlib::sg::cube *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__cube,0))){
    SWIG_fail_ptr("sg_cube_depth_get",1,SWIGTYPE_p_inlib__sg__cube); }  result = (inlib::sg::sf< float > *)& ((arg1)->depth);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_cube(void *obj) {
inlib::sg::cube *arg1 = (inlib::sg::cube *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_cube(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_cube);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_cube_attributes[] = {
    { "width", _wrap_sg_cube_width_get, _wrap_sg_cube_width_set },
    { "height", _wrap_sg_cube_height_get, _wrap_sg_cube_height_set },
    { "depth", _wrap_sg_cube_depth_get, _wrap_sg_cube_depth_set },
    {0,0,0}
};
static swig_lua_method swig_sg_cube_methods[]= {
    { "copy", _wrap_sg_cube_copy},
    {0,0}
};
static swig_lua_method swig_sg_cube_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_cube_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_cube_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_cube_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_cube_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_cube_Sf_SwigStatic = {
    "sg_cube",
    swig_sg_cube_Sf_SwigStatic_methods,
    swig_sg_cube_Sf_SwigStatic_attributes,
    swig_sg_cube_Sf_SwigStatic_constants,
    swig_sg_cube_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_cube_bases[] = {0,0};
static const char *swig_sg_cube_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_cube = { "sg_cube", "sg_cube", &SWIGTYPE_p_inlib__sg__cube,_proxy__wrap_new_sg_cube, swig_delete_sg_cube, swig_sg_cube_methods, swig_sg_cube_attributes, &swig_sg_cube_Sf_SwigStatic, swig_sg_cube_meta, swig_sg_cube_bases, swig_sg_cube_base_names };

static int _wrap_sg_sphere_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::sphere::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::copy",1,"inlib::sg::sphere const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_copy",1,SWIGTYPE_p_inlib__sg__sphere); } 
  result = (inlib::sg::node *)((inlib::sg::sphere const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_sphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *result = 0 ;
  SWIG_check_num_args("inlib::sg::sphere::sphere",0,0) result = (inlib::sg::sphere *)new inlib::sg::sphere();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sphere,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_sphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = 0 ;
  inlib::sg::sphere *result = 0 ; SWIG_check_num_args("inlib::sg::sphere::sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sphere::sphere",1,"inlib::sg::sphere const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("new_sg_sphere",1,SWIGTYPE_p_inlib__sg__sphere); } 
  result = (inlib::sg::sphere *)new inlib::sg::sphere((inlib::sg::sphere const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sphere,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_sphere(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_sphere__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sphere, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_sphere__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_sphere'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sphere::sphere()\n" "    inlib::sg::sphere::sphere(inlib::sg::sphere const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_sphere_radius_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::sphere::radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::radius",1,"inlib::sg::sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::sphere::radius",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_radius_set",1,SWIGTYPE_p_inlib__sg__sphere); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_sphere_radius_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->radius = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_sphere_radius_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::sphere::radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::radius",1,"inlib::sg::sphere *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_radius_get",1,SWIGTYPE_p_inlib__sg__sphere); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->radius);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_sphere_slices_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::sphere::slices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::slices",1,"inlib::sg::sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::sphere::slices",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_slices_set",1,SWIGTYPE_p_inlib__sg__sphere); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_sphere_slices_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->slices = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_sphere_slices_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::sphere::slices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::slices",1,"inlib::sg::sphere *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_slices_get",1,SWIGTYPE_p_inlib__sg__sphere); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->slices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_sphere_stacks_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::sphere::stacks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::stacks",1,"inlib::sg::sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::sphere::stacks",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_stacks_set",1,SWIGTYPE_p_inlib__sg__sphere); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_sphere_stacks_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->stacks = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_sphere_stacks_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::sphere *arg1 = (inlib::sg::sphere *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::sphere::stacks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sphere::stacks",1,"inlib::sg::sphere *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sphere,0))){
    SWIG_fail_ptr("sg_sphere_stacks_get",1,SWIGTYPE_p_inlib__sg__sphere); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->stacks);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_sphere(void *obj) {
inlib::sg::sphere *arg1 = (inlib::sg::sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_sphere_attributes[] = {
    { "radius", _wrap_sg_sphere_radius_get, _wrap_sg_sphere_radius_set },
    { "slices", _wrap_sg_sphere_slices_get, _wrap_sg_sphere_slices_set },
    { "stacks", _wrap_sg_sphere_stacks_get, _wrap_sg_sphere_stacks_set },
    {0,0,0}
};
static swig_lua_method swig_sg_sphere_methods[]= {
    { "copy", _wrap_sg_sphere_copy},
    {0,0}
};
static swig_lua_method swig_sg_sphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_sphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_sphere_Sf_SwigStatic = {
    "sg_sphere",
    swig_sg_sphere_Sf_SwigStatic_methods,
    swig_sg_sphere_Sf_SwigStatic_attributes,
    swig_sg_sphere_Sf_SwigStatic_constants,
    swig_sg_sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_sphere_bases[] = {0,0};
static const char *swig_sg_sphere_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_sphere = { "sg_sphere", "sg_sphere", &SWIGTYPE_p_inlib__sg__sphere,_proxy__wrap_new_sg_sphere, swig_delete_sg_sphere, swig_sg_sphere_methods, swig_sg_sphere_attributes, &swig_sg_sphere_Sf_SwigStatic, swig_sg_sphere_meta, swig_sg_sphere_bases, swig_sg_sphere_base_names };

static int _wrap_sg_draw_style_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::copy",1,"inlib::sg::draw_style const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_copy",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::node *)((inlib::sg::draw_style const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_draw_style__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::draw_style *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::draw_style",0,0) result = (inlib::sg::draw_style *)new inlib::sg::draw_style();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__draw_style,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_draw_style__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::draw_style *arg1 = 0 ;
  inlib::sg::draw_style *result = 0 ; SWIG_check_num_args("inlib::sg::draw_style::draw_style",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::draw_style::draw_style",1,"inlib::sg::draw_style const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("new_sg_draw_style",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::draw_style *)new inlib::sg::draw_style((inlib::sg::draw_style const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__draw_style,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_draw_style(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_draw_style__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__draw_style, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_draw_style__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_draw_style'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::draw_style::draw_style()\n" "    inlib::sg::draw_style::draw_style(inlib::sg::draw_style const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_draw_style_style_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ;
  inlib::sg::sf_enum< inlib::sg::draw_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::draw_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::style",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::style",2,"inlib::sg::sf_enum< inlib::sg::draw_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_style_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0))){
    SWIG_fail_ptr("sg_draw_style_style_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t); } 
  if (arg1) (arg1)->style = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_style_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf_enum< inlib::sg::draw_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::style",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::style",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_style_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf_enum< inlib::sg::draw_type > *)& ((arg1)->style);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_line_width_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::line_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::line_width",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::line_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_line_width_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_draw_style_line_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->line_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_line_width_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::line_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::line_width",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_line_width_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->line_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_line_pattern_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ;
  inlib::sg::sf< inlib::sg::lpat > *arg2 = (inlib::sg::sf< inlib::sg::lpat > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::line_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::line_pattern",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::line_pattern",2,"inlib::sg::sf< inlib::sg::lpat > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_line_pattern_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0))){
    SWIG_fail_ptr("sg_draw_style_line_pattern_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t); } 
  if (arg1) (arg1)->line_pattern = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_line_pattern_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< inlib::sg::lpat > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::line_pattern",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::line_pattern",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_line_pattern_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf< inlib::sg::lpat > *)& ((arg1)->line_pattern);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_point_size_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::point_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::point_size",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::point_size",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_point_size_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_draw_style_point_size_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->point_size = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_point_size_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::point_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::point_size",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_point_size_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->point_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_cull_face_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::cull_face",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::cull_face",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::cull_face",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_cull_face_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_draw_style_cull_face_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->cull_face = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_cull_face_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::cull_face",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::cull_face",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_cull_face_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->cull_face);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_winding_ccw_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::winding_ccw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::winding_ccw",1,"inlib::sg::draw_style *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::draw_style::winding_ccw",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_winding_ccw_set",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_draw_style_winding_ccw_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->winding_ccw = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_draw_style_winding_ccw_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::draw_style::winding_ccw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::draw_style::winding_ccw",1,"inlib::sg::draw_style *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__draw_style,0))){
    SWIG_fail_ptr("sg_draw_style_winding_ccw_get",1,SWIGTYPE_p_inlib__sg__draw_style); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->winding_ccw);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_draw_style(void *obj) {
inlib::sg::draw_style *arg1 = (inlib::sg::draw_style *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_draw_style(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_draw_style);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_draw_style_attributes[] = {
    { "style", _wrap_sg_draw_style_style_get, _wrap_sg_draw_style_style_set },
    { "line_width", _wrap_sg_draw_style_line_width_get, _wrap_sg_draw_style_line_width_set },
    { "line_pattern", _wrap_sg_draw_style_line_pattern_get, _wrap_sg_draw_style_line_pattern_set },
    { "point_size", _wrap_sg_draw_style_point_size_get, _wrap_sg_draw_style_point_size_set },
    { "cull_face", _wrap_sg_draw_style_cull_face_get, _wrap_sg_draw_style_cull_face_set },
    { "winding_ccw", _wrap_sg_draw_style_winding_ccw_get, _wrap_sg_draw_style_winding_ccw_set },
    {0,0,0}
};
static swig_lua_method swig_sg_draw_style_methods[]= {
    { "copy", _wrap_sg_draw_style_copy},
    {0,0}
};
static swig_lua_method swig_sg_draw_style_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_draw_style_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_draw_style_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_draw_style_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_draw_style_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_draw_style_Sf_SwigStatic = {
    "sg_draw_style",
    swig_sg_draw_style_Sf_SwigStatic_methods,
    swig_sg_draw_style_Sf_SwigStatic_attributes,
    swig_sg_draw_style_Sf_SwigStatic_constants,
    swig_sg_draw_style_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_draw_style_bases[] = {0,0};
static const char *swig_sg_draw_style_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_draw_style = { "sg_draw_style", "sg_draw_style", &SWIGTYPE_p_inlib__sg__draw_style,_proxy__wrap_new_sg_draw_style, swig_delete_sg_draw_style, swig_sg_draw_style_methods, swig_sg_draw_style_attributes, &swig_sg_draw_style_Sf_SwigStatic, swig_sg_draw_style_meta, swig_sg_draw_style_bases, swig_sg_draw_style_base_names };

static int _wrap_sg_shade_model_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::shade_model *arg1 = (inlib::sg::shade_model *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::shade_model::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::shade_model::copy",1,"inlib::sg::shade_model const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__shade_model,0))){
    SWIG_fail_ptr("sg_shade_model_copy",1,SWIGTYPE_p_inlib__sg__shade_model); } 
  result = (inlib::sg::node *)((inlib::sg::shade_model const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_shade_model__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::shade_model *result = 0 ;
  SWIG_check_num_args("inlib::sg::shade_model::shade_model",0,0)
  result = (inlib::sg::shade_model *)new inlib::sg::shade_model();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__shade_model,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_shade_model__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::shade_model *arg1 = 0 ;
  inlib::sg::shade_model *result = 0 ; SWIG_check_num_args("inlib::sg::shade_model::shade_model",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::shade_model::shade_model",1,"inlib::sg::shade_model const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__shade_model,0))){
    SWIG_fail_ptr("new_sg_shade_model",1,SWIGTYPE_p_inlib__sg__shade_model); } 
  result = (inlib::sg::shade_model *)new inlib::sg::shade_model((inlib::sg::shade_model const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__shade_model,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_shade_model(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_shade_model__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__shade_model, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_shade_model__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_shade_model'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::shade_model::shade_model()\n" "    inlib::sg::shade_model::shade_model(inlib::sg::shade_model const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_shade_model_model_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::shade_model *arg1 = (inlib::sg::shade_model *) 0 ;
  inlib::sg::sf_enum< inlib::sg::shade_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::shade_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::shade_model::model",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::shade_model::model",1,"inlib::sg::shade_model *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::shade_model::model",2,"inlib::sg::sf_enum< inlib::sg::shade_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__shade_model,0))){
    SWIG_fail_ptr("sg_shade_model_model_set",1,SWIGTYPE_p_inlib__sg__shade_model); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0))){
    SWIG_fail_ptr("sg_shade_model_model_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t); } 
  if (arg1) (arg1)->model = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_shade_model_model_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::shade_model *arg1 = (inlib::sg::shade_model *) 0 ; inlib::sg::sf_enum< inlib::sg::shade_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::shade_model::model",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::shade_model::model",1,"inlib::sg::shade_model *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__shade_model,0))){
    SWIG_fail_ptr("sg_shade_model_model_get",1,SWIGTYPE_p_inlib__sg__shade_model); } 
  result = (inlib::sg::sf_enum< inlib::sg::shade_type > *)& ((arg1)->model);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_shade_model(void *obj) {
inlib::sg::shade_model *arg1 = (inlib::sg::shade_model *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_shade_model(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_shade_model);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_shade_model_attributes[] = {
    { "model", _wrap_sg_shade_model_model_get, _wrap_sg_shade_model_model_set },
    {0,0,0}
};
static swig_lua_method swig_sg_shade_model_methods[]= {
    { "copy", _wrap_sg_shade_model_copy},
    {0,0}
};
static swig_lua_method swig_sg_shade_model_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_shade_model_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_shade_model_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_shade_model_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_shade_model_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_shade_model_Sf_SwigStatic = {
    "sg_shade_model",
    swig_sg_shade_model_Sf_SwigStatic_methods,
    swig_sg_shade_model_Sf_SwigStatic_attributes,
    swig_sg_shade_model_Sf_SwigStatic_constants,
    swig_sg_shade_model_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_shade_model_bases[] = {0,0};
static const char *swig_sg_shade_model_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_shade_model = { "sg_shade_model", "sg_shade_model", &SWIGTYPE_p_inlib__sg__shade_model,_proxy__wrap_new_sg_shade_model, swig_delete_sg_shade_model, swig_sg_shade_model_methods, swig_sg_shade_model_attributes, &swig_sg_shade_model_Sf_SwigStatic, swig_sg_shade_model_meta, swig_sg_shade_model_bases, swig_sg_shade_model_base_names };

static int _wrap_points(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result; SWIG_check_num_args("inlib::gl::points",0,0)
  result = (inlib::gl::mode_t)inlib::gl::points(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lines(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result; SWIG_check_num_args("inlib::gl::lines",0,0)
  result = (inlib::gl::mode_t)inlib::gl::lines(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_line_loop(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result;
  SWIG_check_num_args("inlib::gl::line_loop",0,0) result = (inlib::gl::mode_t)inlib::gl::line_loop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_line_strip(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result;
  SWIG_check_num_args("inlib::gl::line_strip",0,0) result = (inlib::gl::mode_t)inlib::gl::line_strip();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangles(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result;
  SWIG_check_num_args("inlib::gl::triangles",0,0) result = (inlib::gl::mode_t)inlib::gl::triangles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangle_strip(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result;
  SWIG_check_num_args("inlib::gl::triangle_strip",0,0) result = (inlib::gl::mode_t)inlib::gl::triangle_strip();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangle_fan(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t result;
  SWIG_check_num_args("inlib::gl::triangle_fan",0,0) result = (inlib::gl::mode_t)inlib::gl::triangle_fan();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_is_mode(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t arg1 ; bool result;
  SWIG_check_num_args("inlib::gl::is_mode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::gl::is_mode",1,"inlib::gl::mode_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (inlib::gl::mode_t)lua_tonumber(L, 1);
  result = (bool)inlib::gl::is_mode(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_is_line(lua_State* L) { int SWIG_arg = 0; inlib::gl::mode_t arg1 ; bool result;
  SWIG_check_num_args("inlib::gl::is_line",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("inlib::gl::is_line",1,"inlib::gl::mode_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (inlib::gl::mode_t)lua_tonumber(L, 1);
  result = (bool)inlib::gl::is_line(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_mode_t__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< inlib::gl::mode_t > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::sf",0,0)
  result = (inlib::sg::sf< inlib::gl::mode_t > *)new inlib::sg::sf< inlib::gl::mode_t >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_mode_t__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::sf< inlib::gl::mode_t > *arg1 = 0 ;
  inlib::sg::sf< inlib::gl::mode_t > *result = 0 ; SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::sf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::sf",1,"inlib::sg::sf< inlib::gl::mode_t > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_sf_mode_t",1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); } 
  result = (inlib::sg::sf< inlib::gl::mode_t > *)new inlib::sg::sf< inlib::gl::mode_t >((inlib::sg::sf< inlib::gl::mode_t > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_mode_t(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_mode_t__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_mode_t__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_mode_t'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< inlib::gl::mode_t >::sf()\n"
  "    inlib::sg::sf< inlib::gl::mode_t >::sf(inlib::sg::sf< inlib::gl::mode_t > const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_mode_t_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< inlib::gl::mode_t > *arg1 = (inlib::sg::sf< inlib::gl::mode_t > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::value",1,"inlib::sg::sf< inlib::gl::mode_t > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("sf_mode_t_value",1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); } 
  result = (unsigned char *) &(arg1)->value(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_mode_t_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< inlib::gl::mode_t > *arg1 = (inlib::sg::sf< inlib::gl::mode_t > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::value",1,"inlib::sg::sf< inlib::gl::mode_t > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("sf_mode_t_value",1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); } 
  result = (unsigned char *) &((inlib::sg::sf< inlib::gl::mode_t > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_mode_t_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< inlib::gl::mode_t > *arg1 = (inlib::sg::sf< inlib::gl::mode_t > *) 0 ; unsigned char *arg2 = 0 ;
  unsigned char temp2 ; SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::value",1,"inlib::sg::sf< inlib::gl::mode_t > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::value",2,"unsigned char const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("sf_mode_t_value",1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2; (arg1)->value((unsigned char const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_mode_t_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_mode_t_value__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_mode_t_value__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_mode_t_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_mode_t_value'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::sf< inlib::gl::mode_t >::value()\n" "    inlib::sg::sf< inlib::gl::mode_t >::value() const\n"
  "    inlib::sg::sf< inlib::gl::mode_t >::value(unsigned char const &)\n"); lua_error(L);return 0; }
static int _wrap_sf_mode_t_value_cp(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf< inlib::gl::mode_t > *arg1 = (inlib::sg::sf< inlib::gl::mode_t > *) 0 ; unsigned char result;
  SWIG_check_num_args("inlib::sg::sf< inlib::gl::mode_t >::value_cp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf< inlib::gl::mode_t >::value_cp",1,"inlib::sg::sf< inlib::gl::mode_t > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("sf_mode_t_value_cp",1,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); } 
  result = (unsigned char)inlib_sg_sf_Sl_inlib_gl_mode_t_Sg__value_cp((inlib::sg::sf< unsigned char > const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sf_mode_t(void *obj) {
inlib::sg::sf< inlib::gl::mode_t > *arg1 = (inlib::sg::sf< inlib::gl::mode_t > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_mode_t(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_mode_t);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_mode_t_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_mode_t_methods[]= {
    { "value", _wrap_sf_mode_t_value},
    { "value_cp", _wrap_sf_mode_t_value_cp},
    {0,0}
};
static swig_lua_method swig_sf_mode_t_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_mode_t_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_mode_t_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_mode_t_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_mode_t_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_mode_t_Sf_SwigStatic = {
    "sf_mode_t",
    swig_sf_mode_t_Sf_SwigStatic_methods,
    swig_sf_mode_t_Sf_SwigStatic_attributes,
    swig_sf_mode_t_Sf_SwigStatic_constants,
    swig_sf_mode_t_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_mode_t_bases[] = {0};
static const char *swig_sf_mode_t_base_names[] = {0};
static swig_lua_class _wrap_class_sf_mode_t = { "sf_mode_t", "sf_mode_t", &SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,_proxy__wrap_new_sf_mode_t, swig_delete_sf_mode_t, swig_sf_mode_t_methods, swig_sf_mode_t_attributes, &swig_sf_mode_t_Sf_SwigStatic, swig_sf_mode_t_meta, swig_sf_mode_t_bases, swig_sf_mode_t_base_names };

static int _wrap_sg_vertices_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::vertices::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::copy",1,"inlib::sg::vertices const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_copy",1,SWIGTYPE_p_inlib__sg__vertices); } 
  result = (inlib::sg::node *)((inlib::sg::vertices const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_vertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *result = 0 ;
  SWIG_check_num_args("inlib::sg::vertices::vertices",0,0) result = (inlib::sg::vertices *)new inlib::sg::vertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__vertices,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_vertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = 0 ;
  inlib::sg::vertices *result = 0 ; SWIG_check_num_args("inlib::sg::vertices::vertices",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::vertices::vertices",1,"inlib::sg::vertices const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("new_sg_vertices",1,SWIGTYPE_p_inlib__sg__vertices); } 
  result = (inlib::sg::vertices *)new inlib::sg::vertices((inlib::sg::vertices const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__vertices,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_vertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_vertices__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__vertices, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_vertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_vertices'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::vertices::vertices()\n" "    inlib::sg::vertices::vertices(inlib::sg::vertices const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_vertices_mode_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  inlib::sg::sf< inlib::gl::mode_t > *arg2 = (inlib::sg::sf< inlib::gl::mode_t > *) 0 ;
  SWIG_check_num_args("inlib::sg::vertices::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::mode",1,"inlib::sg::vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::vertices::mode",2,"inlib::sg::sf< inlib::gl::mode_t > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_mode_set",1,SWIGTYPE_p_inlib__sg__vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0))){
    SWIG_fail_ptr("sg_vertices_mode_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t); }  if (arg1) (arg1)->mode = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_mode_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  inlib::sg::sf< inlib::gl::mode_t > *result = 0 ; SWIG_check_num_args("inlib::sg::vertices::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::mode",1,"inlib::sg::vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_mode_get",1,SWIGTYPE_p_inlib__sg__vertices); } 
  result = (inlib::sg::sf< inlib::gl::mode_t > *)& ((arg1)->mode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_xyzs_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ; SWIG_check_num_args("inlib::sg::vertices::xyzs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::xyzs",1,"inlib::sg::vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::vertices::xyzs",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_xyzs_set",1,SWIGTYPE_p_inlib__sg__vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_vertices_xyzs_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->xyzs = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_xyzs_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  inlib::sg::mf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::vertices::xyzs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::xyzs",1,"inlib::sg::vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_xyzs_get",1,SWIGTYPE_p_inlib__sg__vertices); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->xyzs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_add(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("inlib::sg::vertices::add",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::add",1,"inlib::sg::vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::vertices::add",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::vertices::add",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::vertices::add",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_add",1,SWIGTYPE_p_inlib__sg__vertices); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->add(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_number(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  size_t result; SWIG_check_num_args("inlib::sg::vertices::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::number",1,"inlib::sg::vertices const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_number",1,SWIGTYPE_p_inlib__sg__vertices); } 
  result = ((inlib::sg::vertices const *)arg1)->number(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_clear(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  SWIG_check_num_args("inlib::sg::vertices::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::clear",1,"inlib::sg::vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_clear",1,SWIGTYPE_p_inlib__sg__vertices); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_add_dashed_line(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; unsigned int arg8 ; bool result; SWIG_check_num_args("inlib::sg::vertices::add_dashed_line",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",1,"inlib::sg::vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("inlib::sg::vertices::add_dashed_line",8,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_add_dashed_line",1,SWIGTYPE_p_inlib__sg__vertices); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative") arg8 = (unsigned int)lua_tonumber(L, 8);
  result = (bool)(arg1)->add_dashed_line(arg2,arg3,arg4,arg5,arg6,arg7,arg8); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_vertices_center(lua_State* L) { int SWIG_arg = 0; inlib::sg::vertices *arg1 = (inlib::sg::vertices *) 0 ;
  bool result; SWIG_check_num_args("inlib::sg::vertices::center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::vertices::center",1,"inlib::sg::vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__vertices,0))){
    SWIG_fail_ptr("sg_vertices_center",1,SWIGTYPE_p_inlib__sg__vertices); }  result = (bool)(arg1)->center();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_vertices(void *obj) {
inlib::sg::vertices *arg1 = (inlib::sg::vertices *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_vertices(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_vertices);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_vertices_attributes[] = {
    { "mode", _wrap_sg_vertices_mode_get, _wrap_sg_vertices_mode_set },
    { "xyzs", _wrap_sg_vertices_xyzs_get, _wrap_sg_vertices_xyzs_set },
    {0,0,0}
};
static swig_lua_method swig_sg_vertices_methods[]= {
    { "copy", _wrap_sg_vertices_copy},
    { "add", _wrap_sg_vertices_add},
    { "number", _wrap_sg_vertices_number},
    { "clear", _wrap_sg_vertices_clear},
    { "add_dashed_line", _wrap_sg_vertices_add_dashed_line},
    { "center", _wrap_sg_vertices_center},
    {0,0}
};
static swig_lua_method swig_sg_vertices_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_vertices_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_vertices_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_vertices_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_vertices_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_vertices_Sf_SwigStatic = {
    "sg_vertices",
    swig_sg_vertices_Sf_SwigStatic_methods,
    swig_sg_vertices_Sf_SwigStatic_attributes,
    swig_sg_vertices_Sf_SwigStatic_constants,
    swig_sg_vertices_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_vertices_bases[] = {0,0};
static const char *swig_sg_vertices_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_vertices = { "sg_vertices", "sg_vertices", &SWIGTYPE_p_inlib__sg__vertices,_proxy__wrap_new_sg_vertices, swig_delete_sg_vertices, swig_sg_vertices_methods, swig_sg_vertices_attributes, &swig_sg_vertices_Sf_SwigStatic, swig_sg_vertices_meta, swig_sg_vertices_bases, swig_sg_vertices_base_names };

static int _wrap_sg_atb_vertices_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::copy",1,"inlib::sg::atb_vertices const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_copy",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::node *)((inlib::sg::atb_vertices const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_atb_vertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::atb_vertices *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::atb_vertices",0,0)
  result = (inlib::sg::atb_vertices *)new inlib::sg::atb_vertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__atb_vertices,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_atb_vertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::atb_vertices *arg1 = 0 ;
  inlib::sg::atb_vertices *result = 0 ; SWIG_check_num_args("inlib::sg::atb_vertices::atb_vertices",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::atb_vertices",1,"inlib::sg::atb_vertices const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("new_sg_atb_vertices",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::atb_vertices *)new inlib::sg::atb_vertices((inlib::sg::atb_vertices const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__atb_vertices,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_atb_vertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_atb_vertices__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__atb_vertices, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_atb_vertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_atb_vertices'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::atb_vertices::atb_vertices()\n"
  "    inlib::sg::atb_vertices::atb_vertices(inlib::sg::atb_vertices const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_atb_vertices_rgbas_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::rgbas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::rgbas",1,"inlib::sg::atb_vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::rgbas",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_rgbas_set",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_atb_vertices_rgbas_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->rgbas = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_rgbas_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::mf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::rgbas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::rgbas",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_rgbas_get",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->rgbas);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_nms_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::nms",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::nms",1,"inlib::sg::atb_vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::nms",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_nms_set",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_atb_vertices_nms_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->nms = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_nms_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::mf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::nms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::nms",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_nms_get",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->nms);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_do_back_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::do_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::do_back",1,"inlib::sg::atb_vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::do_back",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_do_back_set",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_atb_vertices_do_back_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->do_back = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_do_back_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::do_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::do_back",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_do_back_get",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->do_back);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_epsilon_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::epsilon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::epsilon",1,"inlib::sg::atb_vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::epsilon",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_epsilon_set",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_atb_vertices_epsilon_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->epsilon = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_epsilon_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::epsilon",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_epsilon_get",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->epsilon);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_draw_edges_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::draw_edges",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::draw_edges",1,"inlib::sg::atb_vertices *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::draw_edges",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_draw_edges_set",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_atb_vertices_draw_edges_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->draw_edges = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_draw_edges_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::draw_edges",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::draw_edges",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_draw_edges_get",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->draw_edges);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_add_pos_color(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("inlib::sg::atb_vertices::add_pos_color",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",1,"inlib::sg::atb_vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("inlib::sg::atb_vertices::add_pos_color",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_pos_color",1,SWIGTYPE_p_inlib__sg__atb_vertices); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->add_pos_color(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_atb_vertices_add_rgba(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::add_rgba",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::add_rgba",1,"inlib::sg::atb_vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::add_rgba",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::atb_vertices::add_rgba",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::atb_vertices::add_rgba",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::atb_vertices::add_rgba",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_rgba",1,SWIGTYPE_p_inlib__sg__atb_vertices); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->add_rgba(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_add_color(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; inlib::colorf *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::add_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::add_color",1,"inlib::sg::atb_vertices *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::add_color",2,"inlib::colorf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_color",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_color",2,SWIGTYPE_p_inlib__colorf); }  (arg1)->add_color((inlib::colorf const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_add_normal(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::atb_vertices::add_normal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::add_normal",1,"inlib::sg::atb_vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::add_normal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::atb_vertices::add_normal",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::atb_vertices::add_normal",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_normal",1,SWIGTYPE_p_inlib__sg__atb_vertices); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->add_normal(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_add_dashed_line_rgba(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; unsigned int arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ; bool result;
  SWIG_check_num_args("inlib::sg::atb_vertices::add_dashed_line_rgba",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",1,"inlib::sg::atb_vertices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",8,"unsigned int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("inlib::sg::atb_vertices::add_dashed_line_rgba",12,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_add_dashed_line_rgba",1,SWIGTYPE_p_inlib__sg__atb_vertices); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative") arg8 = (unsigned int)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12);
  result = (bool)(arg1)->add_dashed_line_rgba(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_atb_vertices_clear(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) 0 ; SWIG_check_num_args("inlib::sg::atb_vertices::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::atb_vertices::clear",1,"inlib::sg::atb_vertices *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__atb_vertices,0))){
    SWIG_fail_ptr("sg_atb_vertices_clear",1,SWIGTYPE_p_inlib__sg__atb_vertices); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_atb_vertices(void *obj) {
inlib::sg::atb_vertices *arg1 = (inlib::sg::atb_vertices *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_atb_vertices(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_atb_vertices);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_atb_vertices_attributes[] = {
    { "rgbas", _wrap_sg_atb_vertices_rgbas_get, _wrap_sg_atb_vertices_rgbas_set },
    { "nms", _wrap_sg_atb_vertices_nms_get, _wrap_sg_atb_vertices_nms_set },
    { "do_back", _wrap_sg_atb_vertices_do_back_get, _wrap_sg_atb_vertices_do_back_set },
    { "epsilon", _wrap_sg_atb_vertices_epsilon_get, _wrap_sg_atb_vertices_epsilon_set },
    { "draw_edges", _wrap_sg_atb_vertices_draw_edges_get, _wrap_sg_atb_vertices_draw_edges_set },
    {0,0,0}
};
static swig_lua_method swig_sg_atb_vertices_methods[]= {
    { "copy", _wrap_sg_atb_vertices_copy},
    { "add_pos_color", _wrap_sg_atb_vertices_add_pos_color},
    { "add_rgba", _wrap_sg_atb_vertices_add_rgba},
    { "add_color", _wrap_sg_atb_vertices_add_color},
    { "add_normal", _wrap_sg_atb_vertices_add_normal},
    { "add_dashed_line_rgba", _wrap_sg_atb_vertices_add_dashed_line_rgba},
    { "clear", _wrap_sg_atb_vertices_clear},
    {0,0}
};
static swig_lua_method swig_sg_atb_vertices_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_atb_vertices_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_atb_vertices_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_atb_vertices_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_atb_vertices_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_atb_vertices_Sf_SwigStatic = {
    "sg_atb_vertices",
    swig_sg_atb_vertices_Sf_SwigStatic_methods,
    swig_sg_atb_vertices_Sf_SwigStatic_attributes,
    swig_sg_atb_vertices_Sf_SwigStatic_constants,
    swig_sg_atb_vertices_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_atb_vertices_bases[] = {0,0};
static const char *swig_sg_atb_vertices_base_names[] = {"inlib::sg::vertices *",0};
static swig_lua_class _wrap_class_sg_atb_vertices = { "sg_atb_vertices", "sg_atb_vertices", &SWIGTYPE_p_inlib__sg__atb_vertices,_proxy__wrap_new_sg_atb_vertices, swig_delete_sg_atb_vertices, swig_sg_atb_vertices_methods, swig_sg_atb_vertices_attributes, &swig_sg_atb_vertices_Sf_SwigStatic, swig_sg_atb_vertices_meta, swig_sg_atb_vertices_bases, swig_sg_atb_vertices_base_names };

static int _wrap_sg_colored_sized_points_copy(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ; inlib::sg::node *result = 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::copy",1,"inlib::sg::colored_sized_points const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_copy",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  result = (inlib::sg::node *)((inlib::sg::colored_sized_points const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_colored_sized_points__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *result = 0 ; SWIG_check_num_args("inlib::sg::colored_sized_points::colored_sized_points",0,0)
  result = (inlib::sg::colored_sized_points *)new inlib::sg::colored_sized_points();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__colored_sized_points,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_colored_sized_points__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = 0 ; inlib::sg::colored_sized_points *result = 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::colored_sized_points",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::colored_sized_points",1,"inlib::sg::colored_sized_points const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("new_sg_colored_sized_points",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  result = (inlib::sg::colored_sized_points *)new inlib::sg::colored_sized_points((inlib::sg::colored_sized_points const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__colored_sized_points,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_colored_sized_points(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sg_colored_sized_points__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__colored_sized_points, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_colored_sized_points__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_colored_sized_points'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::colored_sized_points::colored_sized_points()\n"
  "    inlib::sg::colored_sized_points::colored_sized_points(inlib::sg::colored_sized_points const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_colored_sized_points_rgbas_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ;
  inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::rgbas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::rgbas",1,"inlib::sg::colored_sized_points *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::colored_sized_points::rgbas",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_rgbas_set",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_colored_sized_points_rgbas_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->rgbas = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_colored_sized_points_rgbas_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ; inlib::sg::mf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::rgbas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::rgbas",1,"inlib::sg::colored_sized_points *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_rgbas_get",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->rgbas);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_colored_sized_points_sizes_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ;
  inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::sizes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::sizes",1,"inlib::sg::colored_sized_points *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::colored_sized_points::sizes",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_sizes_set",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_colored_sized_points_sizes_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->sizes = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_colored_sized_points_sizes_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ; inlib::sg::mf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::sizes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::sizes",1,"inlib::sg::colored_sized_points *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_sizes_get",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->sizes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_colored_sized_points_add(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::add",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",1,"inlib::sg::colored_sized_points *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("inlib::sg::colored_sized_points::add",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_add",1,SWIGTYPE_p_inlib__sg__colored_sized_points); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); (arg1)->add(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_colored_sized_points_clear(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) 0 ;
  SWIG_check_num_args("inlib::sg::colored_sized_points::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::colored_sized_points::clear",1,"inlib::sg::colored_sized_points *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__colored_sized_points,0))){
    SWIG_fail_ptr("sg_colored_sized_points_clear",1,SWIGTYPE_p_inlib__sg__colored_sized_points); }  (arg1)->clear();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_colored_sized_points(void *obj) {
inlib::sg::colored_sized_points *arg1 = (inlib::sg::colored_sized_points *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_colored_sized_points(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_colored_sized_points);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_colored_sized_points_attributes[] = {
    { "rgbas", _wrap_sg_colored_sized_points_rgbas_get, _wrap_sg_colored_sized_points_rgbas_set },
    { "sizes", _wrap_sg_colored_sized_points_sizes_get, _wrap_sg_colored_sized_points_sizes_set },
    {0,0,0}
};
static swig_lua_method swig_sg_colored_sized_points_methods[]= {
    { "copy", _wrap_sg_colored_sized_points_copy},
    { "add", _wrap_sg_colored_sized_points_add},
    { "clear", _wrap_sg_colored_sized_points_clear},
    {0,0}
};
static swig_lua_method swig_sg_colored_sized_points_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_colored_sized_points_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_colored_sized_points_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_colored_sized_points_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_colored_sized_points_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_colored_sized_points_Sf_SwigStatic = {
    "sg_colored_sized_points",
    swig_sg_colored_sized_points_Sf_SwigStatic_methods,
    swig_sg_colored_sized_points_Sf_SwigStatic_attributes,
    swig_sg_colored_sized_points_Sf_SwigStatic_constants,
    swig_sg_colored_sized_points_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_colored_sized_points_bases[] = {0,0};
static const char *swig_sg_colored_sized_points_base_names[] = {"inlib::sg::vertices *",0};
static swig_lua_class _wrap_class_sg_colored_sized_points = { "sg_colored_sized_points", "sg_colored_sized_points", &SWIGTYPE_p_inlib__sg__colored_sized_points,_proxy__wrap_new_sg_colored_sized_points, swig_delete_sg_colored_sized_points, swig_sg_colored_sized_points_methods, swig_sg_colored_sized_points_attributes, &swig_sg_colored_sized_points_Sf_SwigStatic, swig_sg_colored_sized_points_meta, swig_sg_colored_sized_points_bases, swig_sg_colored_sized_points_base_names };

static void swig_delete_base_freetype(void *obj) {
inlib::sg::base_freetype *arg1 = (inlib::sg::base_freetype *) obj;
delete arg1;
}
static swig_lua_attribute swig_base_freetype_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_base_freetype_methods[]= {
    {0,0}
};
static swig_lua_method swig_base_freetype_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_base_freetype_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_base_freetype_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_base_freetype_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_base_freetype_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_base_freetype_Sf_SwigStatic = {
    "base_freetype",
    swig_base_freetype_Sf_SwigStatic_methods,
    swig_base_freetype_Sf_SwigStatic_attributes,
    swig_base_freetype_Sf_SwigStatic_constants,
    swig_base_freetype_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_base_freetype_bases[] = {0};
static const char *swig_base_freetype_base_names[] = {0};
static swig_lua_class _wrap_class_base_freetype = { "base_freetype", "base_freetype", &SWIGTYPE_p_inlib__sg__base_freetype,0, swig_delete_base_freetype, swig_base_freetype_methods, swig_base_freetype_attributes, &swig_base_freetype_Sf_SwigStatic, swig_base_freetype_meta, swig_base_freetype_bases, swig_base_freetype_base_names };

static swig_lua_attribute swig_plottable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_plottable_methods[]= {
    {0,0}
};
static swig_lua_method swig_plottable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_plottable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_plottable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_plottable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_plottable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_plottable_Sf_SwigStatic = {
    "plottable",
    swig_plottable_Sf_SwigStatic_methods,
    swig_plottable_Sf_SwigStatic_attributes,
    swig_plottable_Sf_SwigStatic_constants,
    swig_plottable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_plottable_bases[] = {0};
static const char *swig_plottable_base_names[] = {0};
static swig_lua_class _wrap_class_plottable = { "plottable", "plottable", &SWIGTYPE_p_inlib__sg__plottable,0,0, swig_plottable_methods, swig_plottable_attributes, &swig_plottable_Sf_SwigStatic, swig_plottable_meta, swig_plottable_bases, swig_plottable_base_names };

static int _wrap_new_h1d2plot__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = 0 ;
  inlib::sg::h1d2plot *result = 0 ; SWIG_check_num_args("inlib::sg::h1d2plot::h1d2plot",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::h1d2plot::h1d2plot",1,"inlib::histo::h1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("new_h1d2plot",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (inlib::sg::h1d2plot *)new inlib::sg::h1d2plot((inlib::histo::h1d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__h1d2plot,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_h1d2plot__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::h1d2plot *arg1 = 0 ;
  inlib::sg::h1d2plot *result = 0 ; SWIG_check_num_args("inlib::sg::h1d2plot::h1d2plot",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::h1d2plot::h1d2plot",1,"inlib::sg::h1d2plot const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__h1d2plot,0))){
    SWIG_fail_ptr("new_h1d2plot",1,SWIGTYPE_p_inlib__sg__h1d2plot); } 
  result = (inlib::sg::h1d2plot *)new inlib::sg::h1d2plot((inlib::sg::h1d2plot const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__h1d2plot,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_h1d2plot(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_h1d2plot__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__h1d2plot, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_h1d2plot__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_h1d2plot'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::h1d2plot::h1d2plot(inlib::histo::h1d const &)\n"
  "    inlib::sg::h1d2plot::h1d2plot(inlib::sg::h1d2plot const &)\n"); lua_error(L);return 0; }
static void swig_delete_h1d2plot(void *obj) {
inlib::sg::h1d2plot *arg1 = (inlib::sg::h1d2plot *) obj;
delete arg1;
}
static int _proxy__wrap_new_h1d2plot(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_h1d2plot);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_h1d2plot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_h1d2plot_methods[]= {
    {0,0}
};
static swig_lua_method swig_h1d2plot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_h1d2plot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_h1d2plot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_h1d2plot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_h1d2plot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_h1d2plot_Sf_SwigStatic = {
    "h1d2plot",
    swig_h1d2plot_Sf_SwigStatic_methods,
    swig_h1d2plot_Sf_SwigStatic_attributes,
    swig_h1d2plot_Sf_SwigStatic_constants,
    swig_h1d2plot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_h1d2plot_bases[] = {0,0};
static const char *swig_h1d2plot_base_names[] = {"inlib::sg::plottable *",0};
static swig_lua_class _wrap_class_h1d2plot = { "h1d2plot", "h1d2plot", &SWIGTYPE_p_inlib__sg__h1d2plot,_proxy__wrap_new_h1d2plot, swig_delete_h1d2plot, swig_h1d2plot_methods, swig_h1d2plot_attributes, &swig_h1d2plot_Sf_SwigStatic, swig_h1d2plot_meta, swig_h1d2plot_bases, swig_h1d2plot_base_names };

static int _wrap_new_h1d2plot_cp__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::histo::h1d *arg1 = 0 ;
  inlib::sg::h1d2plot_cp *result = 0 ; SWIG_check_num_args("inlib::sg::h1d2plot_cp::h1d2plot_cp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::h1d2plot_cp::h1d2plot_cp",1,"inlib::histo::h1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("new_h1d2plot_cp",1,SWIGTYPE_p_inlib__histo__h1d); } 
  result = (inlib::sg::h1d2plot_cp *)new inlib::sg::h1d2plot_cp((inlib::histo::h1d const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__h1d2plot_cp,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_h1d2plot_cp__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::h1d2plot_cp *arg1 = 0 ;
  inlib::sg::h1d2plot_cp *result = 0 ; SWIG_check_num_args("inlib::sg::h1d2plot_cp::h1d2plot_cp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::h1d2plot_cp::h1d2plot_cp",1,"inlib::sg::h1d2plot_cp const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__h1d2plot_cp,0))){
    SWIG_fail_ptr("new_h1d2plot_cp",1,SWIGTYPE_p_inlib__sg__h1d2plot_cp); } 
  result = (inlib::sg::h1d2plot_cp *)new inlib::sg::h1d2plot_cp((inlib::sg::h1d2plot_cp const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__h1d2plot_cp,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_h1d2plot_cp(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_h1d2plot_cp__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__h1d2plot_cp, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_h1d2plot_cp__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_h1d2plot_cp'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::h1d2plot_cp::h1d2plot_cp(inlib::histo::h1d const &)\n"
  "    inlib::sg::h1d2plot_cp::h1d2plot_cp(inlib::sg::h1d2plot_cp const &)\n"); lua_error(L);return 0; }
static void swig_delete_h1d2plot_cp(void *obj) {
inlib::sg::h1d2plot_cp *arg1 = (inlib::sg::h1d2plot_cp *) obj;
delete arg1;
}
static int _proxy__wrap_new_h1d2plot_cp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_h1d2plot_cp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_h1d2plot_cp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_h1d2plot_cp_methods[]= {
    {0,0}
};
static swig_lua_method swig_h1d2plot_cp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_h1d2plot_cp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_h1d2plot_cp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_h1d2plot_cp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_h1d2plot_cp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_h1d2plot_cp_SwigStatic = {
    "h1d2plot_cp",
    swig_h1d2plot_cp_SwigStatic_methods,
    swig_h1d2plot_cp_SwigStatic_attributes,
    swig_h1d2plot_cp_SwigStatic_constants,
    swig_h1d2plot_cp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_h1d2plot_cp_bases[] = {0,0};
static const char *swig_h1d2plot_cp_base_names[] = {"inlib::sg::plottable *",0};
static swig_lua_class _wrap_class_h1d2plot_cp = { "h1d2plot_cp", "h1d2plot_cp", &SWIGTYPE_p_inlib__sg__h1d2plot_cp,_proxy__wrap_new_h1d2plot_cp, swig_delete_h1d2plot_cp, swig_h1d2plot_cp_methods, swig_h1d2plot_cp_attributes, &swig_h1d2plot_cp_SwigStatic, swig_h1d2plot_cp_meta, swig_h1d2plot_cp_bases, swig_h1d2plot_cp_base_names };

static int _wrap_new_sf_enum_shape_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *)new inlib::sg::sf_enum< inlib::sg::plotter::shape_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_shape_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg1 = 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::plotter::shape_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_shape_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t); } 
  result = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *)new inlib::sg::sf_enum< inlib::sg::plotter::shape_type >((inlib::sg::sf_enum< inlib::sg::plotter::shape_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_shape_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sf_enum_shape_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_shape_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_shape_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::plotter::shape_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_shape_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *) 0 ;
  inlib::sg::plotter::shape_type *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0))){
    SWIG_fail_ptr("sf_enum_shape_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t); } 
  result = (inlib::sg::plotter::shape_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plotter__shape_type,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_shape_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *) 0 ;
  inlib::sg::plotter::shape_type *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::shape_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0))){
    SWIG_fail_ptr("sf_enum_shape_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t); } 
  result = (inlib::sg::plotter::shape_type *) &((inlib::sg::sf_enum< inlib::sg::plotter::shape_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_shape_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *) 0 ;
  inlib::sg::plotter::shape_type *arg2 = 0 ; inlib::sg::plotter::shape_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value",2,"inlib::sg::plotter::shape_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0))){
    SWIG_fail_ptr("sf_enum_shape_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t); } 
  temp2=(inlib::sg::plotter::shape_type)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((inlib::sg::plotter::shape_type const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sf_enum_shape_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_shape_type_value__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_shape_type_value__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_shape_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_shape_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::shape_type >::value(inlib::sg::plotter::shape_type const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sf_enum_shape_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_shape_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_shape_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_shape_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_shape_type_methods[]= {
    { "value", _wrap_sf_enum_shape_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_shape_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_shape_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_shape_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_shape_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_shape_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_shape_type_Sf_SwigStatic = {
    "sf_enum_shape_type",
    swig_sf_enum_shape_type_Sf_SwigStatic_methods,
    swig_sf_enum_shape_type_Sf_SwigStatic_attributes,
    swig_sf_enum_shape_type_Sf_SwigStatic_constants,
    swig_sf_enum_shape_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_shape_type_bases[] = {0};
static const char *swig_sf_enum_shape_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_shape_type = { "sf_enum_shape_type", "sf_enum_shape_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,_proxy__wrap_new_sf_enum_shape_type, swig_delete_sf_enum_shape_type, swig_sf_enum_shape_type_methods, swig_sf_enum_shape_type_attributes, &swig_sf_enum_shape_type_Sf_SwigStatic, swig_sf_enum_shape_type_meta, swig_sf_enum_shape_type_bases, swig_sf_enum_shape_type_base_names };

static int _wrap_new_sf_enum_colormap_axis_labeling_type__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::sf_enum",0,0)
  result = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *)new inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_colormap_axis_labeling_type__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg1 = 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::sf_enum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::sf_enum",1,"inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0))){
    SWIG_fail_ptr("new_sf_enum_colormap_axis_labeling_type",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t); }
  
  result = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *)new inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >((inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sf_enum_colormap_axis_labeling_type(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_sf_enum_colormap_axis_labeling_type__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sf_enum_colormap_axis_labeling_type__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sf_enum_colormap_axis_labeling_type'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::sf_enum()\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::sf_enum(inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > const &)\n");
  lua_error(L);return 0; }
static int _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *) 0 ;
  inlib::sg::plotter::colormap_axis_labeling_type *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0))){
    SWIG_fail_ptr("sf_enum_colormap_axis_labeling_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t); }
   result = (inlib::sg::plotter::colormap_axis_labeling_type *) &(arg1)->value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plotter__colormap_axis_labeling_type,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *) 0 ;
  inlib::sg::plotter::colormap_axis_labeling_type *result = 0 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0))){
    SWIG_fail_ptr("sf_enum_colormap_axis_labeling_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t); }
  
  result = (inlib::sg::plotter::colormap_axis_labeling_type *) &((inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *) 0 ;
  inlib::sg::plotter::colormap_axis_labeling_type *arg2 = 0 ; inlib::sg::plotter::colormap_axis_labeling_type temp2 ;
  SWIG_check_num_args("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",1,"inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value",2,"inlib::sg::plotter::colormap_axis_labeling_type const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0))){
    SWIG_fail_ptr("sf_enum_colormap_axis_labeling_type_value",1,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t); }
   temp2=(inlib::sg::plotter::colormap_axis_labeling_type)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->value((inlib::sg::plotter::colormap_axis_labeling_type const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sf_enum_colormap_axis_labeling_type_value(lua_State* L) { int argc; int argv[3]={ 1,2,3} ;
  argc = lua_gettop(L); if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_0(L);}  } 
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_1(L);}  } 
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_sf_enum_colormap_axis_labeling_type_value__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sf_enum_colormap_axis_labeling_type_value'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value()\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value() const\n"
  "    inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type >::value(inlib::sg::plotter::colormap_axis_labeling_type const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sf_enum_colormap_axis_labeling_type(void *obj) {
inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg1 = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *) obj;
delete arg1;
}
static int _proxy__wrap_new_sf_enum_colormap_axis_labeling_type(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sf_enum_colormap_axis_labeling_type);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sf_enum_colormap_axis_labeling_type_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sf_enum_colormap_axis_labeling_type_methods[]= {
    { "value", _wrap_sf_enum_colormap_axis_labeling_type_value},
    {0,0}
};
static swig_lua_method swig_sf_enum_colormap_axis_labeling_type_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic = {
    "sf_enum_colormap_axis_labeling_type",
    swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_methods,
    swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_attributes,
    swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_constants,
    swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sf_enum_colormap_axis_labeling_type_bases[] = {0};
static const char *swig_sf_enum_colormap_axis_labeling_type_base_names[] = {0};
static swig_lua_class _wrap_class_sf_enum_colormap_axis_labeling_type = { "sf_enum_colormap_axis_labeling_type", "sf_enum_colormap_axis_labeling_type", &SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,_proxy__wrap_new_sf_enum_colormap_axis_labeling_type, swig_delete_sf_enum_colormap_axis_labeling_type, swig_sf_enum_colormap_axis_labeling_type_methods, swig_sf_enum_colormap_axis_labeling_type_attributes, &swig_sf_enum_colormap_axis_labeling_type_Sf_SwigStatic, swig_sf_enum_colormap_axis_labeling_type_meta, swig_sf_enum_colormap_axis_labeling_type_bases, swig_sf_enum_colormap_axis_labeling_type_base_names };

static int _wrap_sg_plotter_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::copy",1,"inlib::sg::plotter const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_copy",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::node *)((inlib::sg::plotter const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::width",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_width_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::width",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_width_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_height_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::height",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_height_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_height_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::height",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_height_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_left_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::left_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::left_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::left_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_left_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_left_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->left_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_left_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::left_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::left_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_left_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->left_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_right_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::right_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::right_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::right_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_right_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_right_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->right_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_right_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::right_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::right_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_right_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->right_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_bottom_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::bottom_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::bottom_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::bottom_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_bottom_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_bottom_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->bottom_margin = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_bottom_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::bottom_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::bottom_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_bottom_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->bottom_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_top_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::top_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::top_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::top_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_top_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_top_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->top_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_top_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::top_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::top_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_top_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->top_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_depth_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::depth",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::depth",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_depth_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_depth_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->depth = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_depth_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::depth",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_depth_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->depth);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_down_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::down_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::down_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::down_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_down_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_down_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->down_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_down_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::down_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::down_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_down_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->down_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_up_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::up_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::up_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::up_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_up_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_up_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->up_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_up_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::up_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::up_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_up_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->up_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_up_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::title_up",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_up",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title_up",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_up_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_title_up_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->title_up = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_up_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::title_up",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_up",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_up_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->title_up);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_to_axis_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_to_axis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_to_axis",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title_to_axis",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_to_axis_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_title_to_axis_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->title_to_axis = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_to_axis_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_to_axis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_to_axis",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_to_axis_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->title_to_axis);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_height_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_height",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title_height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_height_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_title_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->title_height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_height_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_height",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_height_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->title_height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_title_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->title_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->title_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_hjust_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_enum< inlib::sg::hjust > *arg2 = (inlib::sg::sf_enum< inlib::sg::hjust > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_hjust",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_hjust",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title_hjust",2,"inlib::sg::sf_enum< inlib::sg::hjust > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_hjust_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0))){
    SWIG_fail_ptr("sg_plotter_title_hjust_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t); } 
  if (arg1) (arg1)->title_hjust = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_hjust_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf_enum< inlib::sg::hjust > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::title_hjust",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title_hjust",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_hjust_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf_enum< inlib::sg::hjust > *)& ((arg1)->title_hjust);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__hjust_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ; SWIG_check_num_args("inlib::sg::plotter::title",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::title",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("sg_plotter_title_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->title = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_title_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_string *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::title",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_title_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf_string *)& ((arg1)->title);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_visible",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::colormap_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_visible_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_colormap_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->colormap_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_visible",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_visible_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->colormap_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_axis_labeling_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_axis_labeling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_labeling",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_labeling",2,"inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_labeling_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_labeling_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t); }
   if (arg1) (arg1)->colormap_axis_labeling = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_axis_labeling_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_axis_labeling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_labeling",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_labeling_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *)& ((arg1)->colormap_axis_labeling);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_attached_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_attached",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_attached",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::colormap_attached",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_attached_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_colormap_attached_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->colormap_attached = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_attached_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_attached",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_attached",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_attached_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->colormap_attached);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_axis_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_axis_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_visible",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_visible_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->colormap_axis_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_colormap_axis_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::colormap_axis_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::colormap_axis_visible",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_colormap_axis_visible_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->colormap_axis_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_enforced",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::x_axis_enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_enforced_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->x_axis_enforced = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_enforced",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_enforced_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->x_axis_enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::x_axis_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->x_axis_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->x_axis_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_min_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_min",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::x_axis_min",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_min_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_min_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->x_axis_min = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_min_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_min",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_min_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->x_axis_min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_max_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_max",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::x_axis_max",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_max_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_max_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->x_axis_max = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_max_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_max",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_max_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->x_axis_max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_is_log_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_is_log",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_is_log",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::x_axis_is_log",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_is_log_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_is_log_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->x_axis_is_log = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_x_axis_is_log_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::x_axis_is_log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::x_axis_is_log",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_x_axis_is_log_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->x_axis_is_log);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_enforced",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::y_axis_enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_enforced_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->y_axis_enforced = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_enforced",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_enforced_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->y_axis_enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::y_axis_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->y_axis_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->y_axis_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_min_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_min",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::y_axis_min",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_min_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_min_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->y_axis_min = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_min_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_min",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_min_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->y_axis_min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_max_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_max",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::y_axis_max",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_max_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_max_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->y_axis_max = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_max_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_max",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_max_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->y_axis_max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_is_log_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_is_log",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_is_log",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::y_axis_is_log",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_is_log_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_is_log_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->y_axis_is_log = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_y_axis_is_log_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::y_axis_is_log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::y_axis_is_log",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_y_axis_is_log_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->y_axis_is_log);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_enforced",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::z_axis_enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_enforced_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->z_axis_enforced = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_enforced",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_enforced_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->z_axis_enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::z_axis_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->z_axis_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->z_axis_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_min_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_min",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::z_axis_min",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_min_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_min_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->z_axis_min = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_min_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_min",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_min_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->z_axis_min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_max_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_max",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::z_axis_max",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_max_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_max_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->z_axis_max = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_max_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_max",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_max_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->z_axis_max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_is_log_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_is_log",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_is_log",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::z_axis_is_log",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_is_log_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_is_log_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->z_axis_is_log = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_z_axis_is_log_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::z_axis_is_log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::z_axis_is_log",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_z_axis_is_log_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->z_axis_is_log);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_value_top_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::value_top_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::value_top_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::value_top_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_value_top_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_value_top_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->value_top_margin = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_value_top_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::value_top_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::value_top_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_value_top_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->value_top_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_width_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_width",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::infos_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_width_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_infos_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->infos_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_width_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_width",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_width_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->infos_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_x_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_x_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_x_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::infos_x_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_x_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_infos_x_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->infos_x_margin = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_x_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_x_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_x_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_x_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->infos_x_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_y_margin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_y_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_y_margin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::infos_y_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_y_margin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_infos_y_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->infos_y_margin = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_y_margin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_y_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_y_margin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_y_margin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->infos_y_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_what_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf_string *arg2 = (inlib::sg::sf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_what",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_what",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::infos_what",2,"inlib::sg::sf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_what_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_string,0))){
    SWIG_fail_ptr("sg_plotter_infos_what_set",2,SWIGTYPE_p_inlib__sg__sf_string); }  if (arg1) (arg1)->infos_what = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_infos_what_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::infos_what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_what",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_what_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf_string *)& ((arg1)->infos_what);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_func2D_borders_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::func2D_borders_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::func2D_borders_visible",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::func2D_borders_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_func2D_borders_visible_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_func2D_borders_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->func2D_borders_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_func2D_borders_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::func2D_borders_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::func2D_borders_visible",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_func2D_borders_visible_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->func2D_borders_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_theta_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::theta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::theta",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::theta",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_theta_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_theta_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->theta = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_theta_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::theta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::theta",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_theta_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->theta);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_phi_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::phi",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::phi",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::phi",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_phi_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_phi_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->phi = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_phi_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::phi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::phi",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_phi_get",1,SWIGTYPE_p_inlib__sg__plotter); }  result = (inlib::sg::sf< float > *)& ((arg1)->phi);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_tau_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::tau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::tau",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::tau",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_tau_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_tau_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->tau = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_tau_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::tau",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::tau",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_tau_get",1,SWIGTYPE_p_inlib__sg__plotter); }  result = (inlib::sg::sf< float > *)& ((arg1)->tau);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::legends_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_legends_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->legends_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->legends_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_origin_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::mf_vec< inlib::vec2f,float > *arg2 = (inlib::sg::mf_vec< inlib::vec2f,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_origin",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::legends_origin",2,"inlib::sg::mf_vec< inlib::vec2f,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_set",2,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  if (arg1) (arg1)->legends_origin = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_origin_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::mf_vec< inlib::vec2f,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_origin",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::mf_vec< inlib::vec2f,float > *)& ((arg1)->legends_origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_origin_unit_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *arg2 = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_origin_unit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_origin_unit",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::legends_origin_unit",2,"inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_unit_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_unit_set",2,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t); } 
  if (arg1) (arg1)->legends_origin_unit = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_origin_unit_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_origin_unit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_origin_unit",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_origin_unit_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *)& ((arg1)->legends_origin_unit);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_size_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::mf_vec< inlib::vec2f,float > *arg2 = (inlib::sg::mf_vec< inlib::vec2f,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_size",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::legends_size",2,"inlib::sg::mf_vec< inlib::vec2f,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_size_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0))){
    SWIG_fail_ptr("sg_plotter_legends_size_set",2,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t); } 
  if (arg1) (arg1)->legends_size = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_size_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::mf_vec< inlib::vec2f,float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_size",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_size_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::mf_vec< inlib::vec2f,float > *)& ((arg1)->legends_size);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_vecT_inlib__vec2f_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_string_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::mf_string *arg2 = (inlib::sg::mf_string *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_string",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::legends_string",2,"inlib::sg::mf_string *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_string_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mf_string,0))){
    SWIG_fail_ptr("sg_plotter_legends_string_set",2,SWIGTYPE_p_inlib__sg__mf_string); } 
  if (arg1) (arg1)->legends_string = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_legends_string_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::mf_string *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::legends_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legends_string",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legends_string_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::mf_string *)& ((arg1)->legends_string);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mf_string,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_shape_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::shape_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::shape_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::shape_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_shape_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_shape_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->shape_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_shape_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::shape_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::shape_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_shape_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->shape_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_shape_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *arg2 = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::shape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::shape",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::shape",2,"inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_shape_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0))){
    SWIG_fail_ptr("sg_plotter_shape_set",2,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t); } 
  if (arg1) (arg1)->shape = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_shape_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::shape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::shape",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_shape_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *)& ((arg1)->shape);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_xy_depth_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::xy_depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::xy_depth",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::xy_depth",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_xy_depth_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_xy_depth_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->xy_depth = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_xy_depth_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::xy_depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::xy_depth",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_xy_depth_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->xy_depth);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_curve_number_of_points_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::curve_number_of_points",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::curve_number_of_points",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::curve_number_of_points",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_curve_number_of_points_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_plotter_curve_number_of_points_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); } 
  if (arg1) (arg1)->curve_number_of_points = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_curve_number_of_points_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< unsigned int > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::curve_number_of_points",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::curve_number_of_points",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_curve_number_of_points_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->curve_number_of_points);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_data_light_on_automated_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::data_light_on_automated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::data_light_on_automated",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::data_light_on_automated",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_data_light_on_automated_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_data_light_on_automated_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->data_light_on_automated = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_data_light_on_automated_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::data_light_on_automated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::data_light_on_automated",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_data_light_on_automated_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->data_light_on_automated);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_primitives_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::primitives_enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::primitives_enforced",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::primitives_enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_primitives_enforced_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_primitives_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->primitives_enforced = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_primitives_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::primitives_enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::primitives_enforced",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_primitives_enforced_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->primitives_enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_inner_frame_enforced_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::inner_frame_enforced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::inner_frame_enforced",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::inner_frame_enforced",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_inner_frame_enforced_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_inner_frame_enforced_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->inner_frame_enforced = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_inner_frame_enforced_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::inner_frame_enforced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::inner_frame_enforced",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_inner_frame_enforced_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->inner_frame_enforced);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_top_axis_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::top_axis_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::top_axis_visible",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::top_axis_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_top_axis_visible_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_top_axis_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->top_axis_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_top_axis_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::top_axis_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::top_axis_visible",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_top_axis_visible_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->top_axis_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_right_axis_visible_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::right_axis_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::right_axis_visible",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::right_axis_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_right_axis_visible_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_right_axis_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->right_axis_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_right_axis_visible_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::right_axis_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::right_axis_visible",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_right_axis_visible_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->right_axis_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_superpose_bins_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::superpose_bins",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::superpose_bins",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::superpose_bins",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_superpose_bins_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plotter_superpose_bins_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->superpose_bins = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_superpose_bins_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< bool > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::superpose_bins",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::superpose_bins",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_superpose_bins_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->superpose_bins);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_number_of_levels_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::number_of_levels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::number_of_levels",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::number_of_levels",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_number_of_levels_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_plotter_number_of_levels_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); } 
  if (arg1) (arg1)->number_of_levels = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_number_of_levels_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::sf< unsigned int > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::number_of_levels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::number_of_levels",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_number_of_levels_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->number_of_levels);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_levels_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::mf< float > *arg2 = (inlib::sg::mf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plotter::levels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::levels",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::levels",2,"inlib::sg::mf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_levels_set",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__mfT_float_t,0))){
    SWIG_fail_ptr("sg_plotter_levels_set",2,SWIGTYPE_p_inlib__sg__mfT_float_t); }  if (arg1) (arg1)->levels = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_levels_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::mf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::levels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::levels",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_levels_get",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::mf< float > *)& ((arg1)->levels);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__mfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_plotter__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_freetype *arg1 = 0 ;
  inlib::sg::plotter *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::plotter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::plotter::plotter",1,"inlib::sg::base_freetype const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_freetype,0))){
    SWIG_fail_ptr("new_sg_plotter",1,SWIGTYPE_p_inlib__sg__base_freetype); } 
  result = (inlib::sg::plotter *)new inlib::sg::plotter((inlib::sg::base_freetype const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plotter,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_plotter__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = 0 ;
  inlib::sg::plotter *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::plotter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::plotter::plotter",1,"inlib::sg::plotter const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("new_sg_plotter",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::plotter *)new inlib::sg::plotter((inlib::sg::plotter const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plotter,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_plotter(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__base_freetype, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_plotter__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_plotter__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_plotter'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::plotter::plotter(inlib::sg::base_freetype const &)\n"
  "    inlib::sg::plotter::plotter(inlib::sg::plotter const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_plotter_add_plottable(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::plottable *arg2 = (inlib::sg::plottable *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::add_plottable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::add_plottable",1,"inlib::sg::plotter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plotter::add_plottable",2,"inlib::sg::plottable *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_add_plottable",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__plottable,0))){
    SWIG_fail_ptr("sg_plotter_add_plottable",2,SWIGTYPE_p_inlib__sg__plottable); }  (arg1)->add_plottable(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_bins_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  unsigned int arg2 ; inlib::sg::style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::bins_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::bins_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::bins_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_bins_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->bins_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_points_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  unsigned int arg2 ; inlib::sg::style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::points_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::points_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::points_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_points_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->points_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_func_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  unsigned int arg2 ; inlib::sg::style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::func_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::func_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::func_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_func_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->func_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_errors_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  unsigned int arg2 ; inlib::sg::style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::errors_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::errors_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::errors_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_errors_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->errors_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_left_hatch_style(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; unsigned int arg2 ; inlib::sg::style *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::left_hatch_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::left_hatch_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::left_hatch_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_left_hatch_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->left_hatch_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_right_hatch_style(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; unsigned int arg2 ; inlib::sg::style *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::right_hatch_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::right_hatch_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::right_hatch_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_right_hatch_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->right_hatch_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_legend_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  unsigned int arg2 ; inlib::sg::style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::legend_style",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::legend_style",1,"inlib::sg::plotter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plotter::legend_style",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_legend_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (inlib::sg::style *) &(arg1)->legend_style(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_infos_style(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::sg::text_style *result = 0 ; SWIG_check_num_args("inlib::sg::plotter::infos_style",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::infos_style",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_infos_style",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::text_style *) &(arg1)->infos_style();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__text_style,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_clear(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  SWIG_check_num_args("inlib::sg::plotter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::clear",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_clear",1,SWIGTYPE_p_inlib__sg__plotter); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_etc_sep__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::separator *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::etc_sep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::etc_sep",1,"inlib::sg::plotter const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_etc_sep",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::separator *) &((inlib::sg::plotter const *)arg1)->etc_sep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__separator,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_etc_sep__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::sg::separator *result = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::etc_sep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::etc_sep",1,"inlib::sg::plotter *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_etc_sep",1,SWIGTYPE_p_inlib__sg__plotter); } 
  result = (inlib::sg::separator *) &(arg1)->etc_sep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__separator,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plotter_etc_sep(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_etc_sep__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_etc_sep__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_plotter_etc_sep'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::plotter::etc_sep() const\n" "    inlib::sg::plotter::etc_sep()\n"); lua_error(L);return 0; }
static int _wrap_sg_plotter_plot__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::histo::h1d *arg2 = 0 ; SWIG_check_num_args("inlib::sg::plotter::plot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot",2,"inlib::histo::h1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("sg_plotter_plot",2,SWIGTYPE_p_inlib__histo__h1d); } 
  inlib_sg_plotter_plot__SWIG_0(arg1,(inlib::histo::h1d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot_cp__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::histo::h1d *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::plot_cp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",2,"inlib::histo::h1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",2,SWIGTYPE_p_inlib__histo__h1d); } 
  inlib_sg_plotter_plot_cp__SWIG_0(arg1,(inlib::histo::h1d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::histo::h2d *arg2 = 0 ; SWIG_check_num_args("inlib::sg::plotter::plot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot",2,"inlib::histo::h2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("sg_plotter_plot",2,SWIGTYPE_p_inlib__histo__h2d); } 
  inlib_sg_plotter_plot__SWIG_1(arg1,(inlib::histo::h2d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot_cp__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::histo::h2d *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::plot_cp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",2,"inlib::histo::h2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",2,SWIGTYPE_p_inlib__histo__h2d); } 
  inlib_sg_plotter_plot_cp__SWIG_1(arg1,(inlib::histo::h2d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot__SWIG_2(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::histo::p1d *arg2 = 0 ; SWIG_check_num_args("inlib::sg::plotter::plot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot",2,"inlib::histo::p1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("sg_plotter_plot",2,SWIGTYPE_p_inlib__histo__p1d); } 
  inlib_sg_plotter_plot__SWIG_2(arg1,(inlib::histo::p1d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot_cp__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::histo::p1d *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::plot_cp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",2,"inlib::histo::p1d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",2,SWIGTYPE_p_inlib__histo__p1d); } 
  inlib_sg_plotter_plot_cp__SWIG_2(arg1,(inlib::histo::p1d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot__SWIG_3(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::histo::c2d *arg2 = 0 ; SWIG_check_num_args("inlib::sg::plotter::plot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot",2,"inlib::histo::c2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("sg_plotter_plot",2,SWIGTYPE_p_inlib__histo__c2d); } 
  inlib_sg_plotter_plot__SWIG_3(arg1,(inlib::histo::c2d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot_cp__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::histo::c2d *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::plot_cp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",2,"inlib::histo::c2d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__c2d,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",2,SWIGTYPE_p_inlib__histo__c2d); } 
  inlib_sg_plotter_plot_cp__SWIG_3(arg1,(inlib::histo::c2d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot__SWIG_4(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ;
  inlib::histo::c3d *arg2 = 0 ; SWIG_check_num_args("inlib::sg::plotter::plot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot",2,"inlib::histo::c3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("sg_plotter_plot",2,SWIGTYPE_p_inlib__histo__c3d); } 
  inlib_sg_plotter_plot__SWIG_4(arg1,(inlib::histo::c3d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__p1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__c2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__c3d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot__SWIG_4(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_plotter_plot'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::plotter::plot(inlib::histo::h1d const &)\n" "    inlib::sg::plotter::plot(inlib::histo::h2d const &)\n"
  "    inlib::sg::plotter::plot(inlib::histo::p1d const &)\n" "    inlib::sg::plotter::plot(inlib::histo::c2d const &)\n"
  "    inlib::sg::plotter::plot(inlib::histo::c3d const &)\n"); lua_error(L);return 0; }
static int _wrap_sg_plotter_plot_cp__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plotter *arg1 = (inlib::sg::plotter *) 0 ; inlib::histo::c3d *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::plotter::plot_cp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",1,"inlib::sg::plotter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::plotter::plot_cp",2,"inlib::histo::c3d const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__c3d,0))){
    SWIG_fail_ptr("sg_plotter_plot_cp",2,SWIGTYPE_p_inlib__histo__c3d); } 
  inlib_sg_plotter_plot_cp__SWIG_4(arg1,(inlib::histo::c3d const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plotter_plot_cp(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot_cp__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot_cp__SWIG_1(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__p1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot_cp__SWIG_2(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__c2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot_cp__SWIG_3(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__c3d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_plotter_plot_cp__SWIG_4(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_plotter_plot_cp'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::plotter::plot_cp(inlib::histo::h1d const &)\n" "    inlib::sg::plotter::plot_cp(inlib::histo::h2d const &)\n"
  "    inlib::sg::plotter::plot_cp(inlib::histo::p1d const &)\n" "    inlib::sg::plotter::plot_cp(inlib::histo::c2d const &)\n"
  "    inlib::sg::plotter::plot_cp(inlib::histo::c3d const &)\n"); lua_error(L);return 0; }
static void swig_delete_sg_plotter(void *obj) {
inlib::sg::plotter *arg1 = (inlib::sg::plotter *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_plotter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_plotter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_plotter_attributes[] = {
    { "width", _wrap_sg_plotter_width_get, _wrap_sg_plotter_width_set },
    { "height", _wrap_sg_plotter_height_get, _wrap_sg_plotter_height_set },
    { "left_margin", _wrap_sg_plotter_left_margin_get, _wrap_sg_plotter_left_margin_set },
    { "right_margin", _wrap_sg_plotter_right_margin_get, _wrap_sg_plotter_right_margin_set },
    { "bottom_margin", _wrap_sg_plotter_bottom_margin_get, _wrap_sg_plotter_bottom_margin_set },
    { "top_margin", _wrap_sg_plotter_top_margin_get, _wrap_sg_plotter_top_margin_set },
    { "depth", _wrap_sg_plotter_depth_get, _wrap_sg_plotter_depth_set },
    { "down_margin", _wrap_sg_plotter_down_margin_get, _wrap_sg_plotter_down_margin_set },
    { "up_margin", _wrap_sg_plotter_up_margin_get, _wrap_sg_plotter_up_margin_set },
    { "title_up", _wrap_sg_plotter_title_up_get, _wrap_sg_plotter_title_up_set },
    { "title_to_axis", _wrap_sg_plotter_title_to_axis_get, _wrap_sg_plotter_title_to_axis_set },
    { "title_height", _wrap_sg_plotter_title_height_get, _wrap_sg_plotter_title_height_set },
    { "title_automated", _wrap_sg_plotter_title_automated_get, _wrap_sg_plotter_title_automated_set },
    { "title_hjust", _wrap_sg_plotter_title_hjust_get, _wrap_sg_plotter_title_hjust_set },
    { "title", _wrap_sg_plotter_title_get, _wrap_sg_plotter_title_set },
    { "colormap_visible", _wrap_sg_plotter_colormap_visible_get, _wrap_sg_plotter_colormap_visible_set },
    { "colormap_axis_labeling", _wrap_sg_plotter_colormap_axis_labeling_get, _wrap_sg_plotter_colormap_axis_labeling_set },
    { "colormap_attached", _wrap_sg_plotter_colormap_attached_get, _wrap_sg_plotter_colormap_attached_set },
    { "colormap_axis_visible", _wrap_sg_plotter_colormap_axis_visible_get, _wrap_sg_plotter_colormap_axis_visible_set },
    { "x_axis_enforced", _wrap_sg_plotter_x_axis_enforced_get, _wrap_sg_plotter_x_axis_enforced_set },
    { "x_axis_automated", _wrap_sg_plotter_x_axis_automated_get, _wrap_sg_plotter_x_axis_automated_set },
    { "x_axis_min", _wrap_sg_plotter_x_axis_min_get, _wrap_sg_plotter_x_axis_min_set },
    { "x_axis_max", _wrap_sg_plotter_x_axis_max_get, _wrap_sg_plotter_x_axis_max_set },
    { "x_axis_is_log", _wrap_sg_plotter_x_axis_is_log_get, _wrap_sg_plotter_x_axis_is_log_set },
    { "y_axis_enforced", _wrap_sg_plotter_y_axis_enforced_get, _wrap_sg_plotter_y_axis_enforced_set },
    { "y_axis_automated", _wrap_sg_plotter_y_axis_automated_get, _wrap_sg_plotter_y_axis_automated_set },
    { "y_axis_min", _wrap_sg_plotter_y_axis_min_get, _wrap_sg_plotter_y_axis_min_set },
    { "y_axis_max", _wrap_sg_plotter_y_axis_max_get, _wrap_sg_plotter_y_axis_max_set },
    { "y_axis_is_log", _wrap_sg_plotter_y_axis_is_log_get, _wrap_sg_plotter_y_axis_is_log_set },
    { "z_axis_enforced", _wrap_sg_plotter_z_axis_enforced_get, _wrap_sg_plotter_z_axis_enforced_set },
    { "z_axis_automated", _wrap_sg_plotter_z_axis_automated_get, _wrap_sg_plotter_z_axis_automated_set },
    { "z_axis_min", _wrap_sg_plotter_z_axis_min_get, _wrap_sg_plotter_z_axis_min_set },
    { "z_axis_max", _wrap_sg_plotter_z_axis_max_get, _wrap_sg_plotter_z_axis_max_set },
    { "z_axis_is_log", _wrap_sg_plotter_z_axis_is_log_get, _wrap_sg_plotter_z_axis_is_log_set },
    { "value_top_margin", _wrap_sg_plotter_value_top_margin_get, _wrap_sg_plotter_value_top_margin_set },
    { "infos_width", _wrap_sg_plotter_infos_width_get, _wrap_sg_plotter_infos_width_set },
    { "infos_x_margin", _wrap_sg_plotter_infos_x_margin_get, _wrap_sg_plotter_infos_x_margin_set },
    { "infos_y_margin", _wrap_sg_plotter_infos_y_margin_get, _wrap_sg_plotter_infos_y_margin_set },
    { "infos_what", _wrap_sg_plotter_infos_what_get, _wrap_sg_plotter_infos_what_set },
    { "func2D_borders_visible", _wrap_sg_plotter_func2D_borders_visible_get, _wrap_sg_plotter_func2D_borders_visible_set },
    { "theta", _wrap_sg_plotter_theta_get, _wrap_sg_plotter_theta_set },
    { "phi", _wrap_sg_plotter_phi_get, _wrap_sg_plotter_phi_set },
    { "tau", _wrap_sg_plotter_tau_get, _wrap_sg_plotter_tau_set },
    { "legends_automated", _wrap_sg_plotter_legends_automated_get, _wrap_sg_plotter_legends_automated_set },
    { "legends_origin", _wrap_sg_plotter_legends_origin_get, _wrap_sg_plotter_legends_origin_set },
    { "legends_origin_unit", _wrap_sg_plotter_legends_origin_unit_get, _wrap_sg_plotter_legends_origin_unit_set },
    { "legends_size", _wrap_sg_plotter_legends_size_get, _wrap_sg_plotter_legends_size_set },
    { "legends_string", _wrap_sg_plotter_legends_string_get, _wrap_sg_plotter_legends_string_set },
    { "shape_automated", _wrap_sg_plotter_shape_automated_get, _wrap_sg_plotter_shape_automated_set },
    { "shape", _wrap_sg_plotter_shape_get, _wrap_sg_plotter_shape_set },
    { "xy_depth", _wrap_sg_plotter_xy_depth_get, _wrap_sg_plotter_xy_depth_set },
    { "curve_number_of_points", _wrap_sg_plotter_curve_number_of_points_get, _wrap_sg_plotter_curve_number_of_points_set },
    { "data_light_on_automated", _wrap_sg_plotter_data_light_on_automated_get, _wrap_sg_plotter_data_light_on_automated_set },
    { "primitives_enforced", _wrap_sg_plotter_primitives_enforced_get, _wrap_sg_plotter_primitives_enforced_set },
    { "inner_frame_enforced", _wrap_sg_plotter_inner_frame_enforced_get, _wrap_sg_plotter_inner_frame_enforced_set },
    { "top_axis_visible", _wrap_sg_plotter_top_axis_visible_get, _wrap_sg_plotter_top_axis_visible_set },
    { "right_axis_visible", _wrap_sg_plotter_right_axis_visible_get, _wrap_sg_plotter_right_axis_visible_set },
    { "superpose_bins", _wrap_sg_plotter_superpose_bins_get, _wrap_sg_plotter_superpose_bins_set },
    { "number_of_levels", _wrap_sg_plotter_number_of_levels_get, _wrap_sg_plotter_number_of_levels_set },
    { "levels", _wrap_sg_plotter_levels_get, _wrap_sg_plotter_levels_set },
    {0,0,0}
};
static swig_lua_method swig_sg_plotter_methods[]= {
    { "copy", _wrap_sg_plotter_copy},
    { "add_plottable", _wrap_sg_plotter_add_plottable},
    { "bins_style", _wrap_sg_plotter_bins_style},
    { "points_style", _wrap_sg_plotter_points_style},
    { "func_style", _wrap_sg_plotter_func_style},
    { "errors_style", _wrap_sg_plotter_errors_style},
    { "left_hatch_style", _wrap_sg_plotter_left_hatch_style},
    { "right_hatch_style", _wrap_sg_plotter_right_hatch_style},
    { "legend_style", _wrap_sg_plotter_legend_style},
    { "infos_style", _wrap_sg_plotter_infos_style},
    { "clear", _wrap_sg_plotter_clear},
    { "etc_sep", _wrap_sg_plotter_etc_sep},
    { "plot", _wrap_sg_plotter_plot},
    { "plot_cp", _wrap_sg_plotter_plot_cp},
    {0,0}
};
static swig_lua_method swig_sg_plotter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_plotter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_plotter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("cells", inlib::sg::plotter::cells)},
    {SWIG_LUA_CONSTTAB_INT("min_max", inlib::sg::plotter::min_max)},
    {SWIG_LUA_CONSTTAB_INT("unit_percent", inlib::sg::plotter::unit_percent)},
    {SWIG_LUA_CONSTTAB_INT("unit_axis", inlib::sg::plotter::unit_axis)},
    {SWIG_LUA_CONSTTAB_INT("xy", inlib::sg::plotter::xy)},
    {SWIG_LUA_CONSTTAB_INT("xyz", inlib::sg::plotter::xyz)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_plotter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_plotter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_plotter_Sf_SwigStatic = {
    "sg_plotter",
    swig_sg_plotter_Sf_SwigStatic_methods,
    swig_sg_plotter_Sf_SwigStatic_attributes,
    swig_sg_plotter_Sf_SwigStatic_constants,
    swig_sg_plotter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_plotter_bases[] = {0,0};
static const char *swig_sg_plotter_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_plotter = { "sg_plotter", "sg_plotter", &SWIGTYPE_p_inlib__sg__plotter,_proxy__wrap_new_sg_plotter, swig_delete_sg_plotter, swig_sg_plotter_methods, swig_sg_plotter_attributes, &swig_sg_plotter_Sf_SwigStatic, swig_sg_plotter_meta, swig_sg_plotter_bases, swig_sg_plotter_base_names };

static int _wrap_sg_plots_copy(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::node *result = 0 ; SWIG_check_num_args("inlib::sg::plots::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::copy",1,"inlib::sg::plots const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_copy",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::node *)((inlib::sg::plots const *)arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__node,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plots_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::width",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_width_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::width",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_width_get",1,SWIGTYPE_p_inlib__sg__plots); }  result = (inlib::sg::sf< float > *)& ((arg1)->width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_height_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::height",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_height_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_height_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::height",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_height_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_cols_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ; SWIG_check_num_args("inlib::sg::plots::cols",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::cols",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::cols",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_cols_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_plots_cols_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->cols = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_cols_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::cols",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::cols",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_cols_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->cols);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_rows_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< unsigned int > *arg2 = (inlib::sg::sf< unsigned int > *) 0 ; SWIG_check_num_args("inlib::sg::plots::rows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::rows",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::rows",2,"inlib::sg::sf< unsigned int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_rows_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0))){
    SWIG_fail_ptr("sg_plots_rows_set",2,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t); }  if (arg1) (arg1)->rows = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_rows_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< unsigned int > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::rows",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_rows_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< unsigned int > *)& ((arg1)->rows);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_view_border_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::plots::view_border",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::view_border",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::view_border",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_view_border_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plots_view_border_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); }  if (arg1) (arg1)->view_border = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_view_border_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::view_border",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::view_border",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_view_border_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->view_border);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_plotter_scale_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::plotter_scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::plotter_scale",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::plotter_scale",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_plotter_scale_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_plotter_scale_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->plotter_scale = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_plotter_scale_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::plotter_scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::plotter_scale",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_plotter_scale_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->plotter_scale);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_visible_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< bool > *arg2 = (inlib::sg::sf< bool > *) 0 ; SWIG_check_num_args("inlib::sg::plots::border_visible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_visible",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::border_visible",2,"inlib::sg::sf< bool > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_visible_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_bool_t,0))){
    SWIG_fail_ptr("sg_plots_border_visible_set",2,SWIGTYPE_p_inlib__sg__sfT_bool_t); } 
  if (arg1) (arg1)->border_visible = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_visible_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< bool > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::border_visible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_visible",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_visible_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< bool > *)& ((arg1)->border_visible);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_bool_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_width_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::border_width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_width",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::border_width",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_width_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_border_width_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->border_width = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_width_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::border_width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_width",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_width_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->border_width);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_height_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::border_height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_height",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::border_height",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_height_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_border_height_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->border_height = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_height_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::border_height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_height",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_height_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->border_height);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_color_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *arg2 = (inlib::sg::sf_vec< inlib::colorf,float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plots::border_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_color",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::border_color",2,"inlib::sg::sf_vec< inlib::colorf,float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_color_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0))){
    SWIG_fail_ptr("sg_plots_border_color_set",2,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t); } 
  if (arg1) (arg1)->border_color = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_border_color_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf_vec< inlib::colorf,float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::border_color",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::border_color",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_border_color_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf_vec< inlib::colorf,float > *)& ((arg1)->border_color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sf_vecT_inlib__colorf_float_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_left_margin_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::left_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::left_margin",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::left_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_left_margin_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_left_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->left_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_left_margin_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::left_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::left_margin",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_left_margin_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->left_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_right_margin_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::right_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::right_margin",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::right_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_right_margin_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_right_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->right_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_right_margin_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::right_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::right_margin",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_right_margin_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->right_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_top_margin_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::top_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::top_margin",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::top_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_top_margin_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_top_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->top_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_top_margin_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::top_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::top_margin",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_top_margin_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->top_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_bottom_margin_set(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ; SWIG_check_num_args("inlib::sg::plots::bottom_margin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::bottom_margin",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::bottom_margin",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_bottom_margin_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_bottom_margin_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); }  if (arg1) (arg1)->bottom_margin = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_bottom_margin_get(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::sf< float > *result = 0 ; SWIG_check_num_args("inlib::sg::plots::bottom_margin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::bottom_margin",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_bottom_margin_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->bottom_margin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_horizontal_spacing_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plots::horizontal_spacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::horizontal_spacing",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::horizontal_spacing",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_horizontal_spacing_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_horizontal_spacing_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->horizontal_spacing = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_horizontal_spacing_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plots::horizontal_spacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::horizontal_spacing",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_horizontal_spacing_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->horizontal_spacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_vertical_spacing_set(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; inlib::sg::sf< float > *arg2 = (inlib::sg::sf< float > *) 0 ;
  SWIG_check_num_args("inlib::sg::plots::vertical_spacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::vertical_spacing",1,"inlib::sg::plots *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::plots::vertical_spacing",2,"inlib::sg::sf< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_vertical_spacing_set",1,SWIGTYPE_p_inlib__sg__plots); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__sfT_float_t,0))){
    SWIG_fail_ptr("sg_plots_vertical_spacing_set",2,SWIGTYPE_p_inlib__sg__sfT_float_t); } 
  if (arg1) (arg1)->vertical_spacing = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_vertical_spacing_get(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; inlib::sg::sf< float > *result = 0 ;
  SWIG_check_num_args("inlib::sg::plots::vertical_spacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::vertical_spacing",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_vertical_spacing_get",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::sf< float > *)& ((arg1)->vertical_spacing);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__sfT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_plots__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::base_freetype *arg1 = 0 ;
  inlib::sg::plots *result = 0 ; SWIG_check_num_args("inlib::sg::plots::plots",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::plots::plots",1,"inlib::sg::base_freetype const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__base_freetype,0))){
    SWIG_fail_ptr("new_sg_plots",1,SWIGTYPE_p_inlib__sg__base_freetype); } 
  result = (inlib::sg::plots *)new inlib::sg::plots((inlib::sg::base_freetype const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plots,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_plots__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = 0 ;
  inlib::sg::plots *result = 0 ; SWIG_check_num_args("inlib::sg::plots::plots",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::plots::plots",1,"inlib::sg::plots const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("new_sg_plots",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::plots *)new inlib::sg::plots((inlib::sg::plots const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plots,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_sg_plots(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__base_freetype, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_plots__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plots, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_plots__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_plots'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::plots::plots(inlib::sg::base_freetype const &)\n" "    inlib::sg::plots::plots(inlib::sg::plots const &)\n");
  lua_error(L);return 0; }
static int _wrap_sg_plots_current_plotter(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  inlib::sg::plotter *result = 0 ; SWIG_check_num_args("inlib::sg::plots::current_plotter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::current_plotter",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_current_plotter",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (inlib::sg::plotter *) &(arg1)->current_plotter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plotter,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_number(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::sg::plots::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::number",1,"inlib::sg::plots const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_number",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (unsigned int)((inlib::sg::plots const *)arg1)->number(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_current_index(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::sg::plots::current_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::current_index",1,"inlib::sg::plots const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_current_index",1,SWIGTYPE_p_inlib__sg__plots); } 
  result = (unsigned int)((inlib::sg::plots const *)arg1)->current_index(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_set_regions__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; unsigned int arg2 ; unsigned int arg3 ; bool arg4 ;
  SWIG_check_num_args("inlib::sg::plots::set_regions",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::set_regions",1,"inlib::sg::plots *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plots::set_regions",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::plots::set_regions",3,"unsigned int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("inlib::sg::plots::set_regions",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_set_regions",1,SWIGTYPE_p_inlib__sg__plots); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0); (arg1)->set_regions(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_plots_set_regions__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; unsigned int arg2 ; unsigned int arg3 ;
  SWIG_check_num_args("inlib::sg::plots::set_regions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::set_regions",1,"inlib::sg::plots *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plots::set_regions",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::plots::set_regions",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_set_regions",1,SWIGTYPE_p_inlib__sg__plots); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->set_regions(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_set_regions__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; unsigned int arg2 ; SWIG_check_num_args("inlib::sg::plots::set_regions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::set_regions",1,"inlib::sg::plots *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plots::set_regions",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_set_regions",1,SWIGTYPE_p_inlib__sg__plots); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->set_regions(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_set_regions__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; SWIG_check_num_args("inlib::sg::plots::set_regions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::set_regions",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_set_regions",1,SWIGTYPE_p_inlib__sg__plots); }  (arg1)->set_regions(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_set_regions(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plots, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_sg_plots_set_regions__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plots, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_sg_plots_set_regions__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plots, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_sg_plots_set_regions__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__plots, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_sg_plots_set_regions__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_plots_set_regions'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::plots::set_regions(unsigned int,unsigned int,bool)\n"
  "    inlib::sg::plots::set_regions(unsigned int,unsigned int)\n" "    inlib::sg::plots::set_regions(unsigned int)\n"
  "    inlib::sg::plots::set_regions()\n"); lua_error(L);return 0; }
static int _wrap_sg_plots_next(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  SWIG_check_num_args("inlib::sg::plots::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::next",1,"inlib::sg::plots *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_next",1,SWIGTYPE_p_inlib__sg__plots); }  (arg1)->next(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_set_current_plotter(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ; unsigned int arg2 ; bool result;
  SWIG_check_num_args("inlib::sg::plots::set_current_plotter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::set_current_plotter",1,"inlib::sg::plots *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plots::set_current_plotter",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_set_current_plotter",1,SWIGTYPE_p_inlib__sg__plots); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->set_current_plotter(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_plots_adjust_size(lua_State* L) { int SWIG_arg = 0; inlib::sg::plots *arg1 = (inlib::sg::plots *) 0 ;
  unsigned int arg2 ; unsigned int arg3 ; SWIG_check_num_args("inlib::sg::plots::adjust_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::plots::adjust_size",1,"inlib::sg::plots *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::plots::adjust_size",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::plots::adjust_size",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plots,0))){
    SWIG_fail_ptr("sg_plots_adjust_size",1,SWIGTYPE_p_inlib__sg__plots); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->adjust_size(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_plots(void *obj) {
inlib::sg::plots *arg1 = (inlib::sg::plots *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_plots(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_plots);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_plots_attributes[] = {
    { "width", _wrap_sg_plots_width_get, _wrap_sg_plots_width_set },
    { "height", _wrap_sg_plots_height_get, _wrap_sg_plots_height_set },
    { "cols", _wrap_sg_plots_cols_get, _wrap_sg_plots_cols_set },
    { "rows", _wrap_sg_plots_rows_get, _wrap_sg_plots_rows_set },
    { "view_border", _wrap_sg_plots_view_border_get, _wrap_sg_plots_view_border_set },
    { "plotter_scale", _wrap_sg_plots_plotter_scale_get, _wrap_sg_plots_plotter_scale_set },
    { "border_visible", _wrap_sg_plots_border_visible_get, _wrap_sg_plots_border_visible_set },
    { "border_width", _wrap_sg_plots_border_width_get, _wrap_sg_plots_border_width_set },
    { "border_height", _wrap_sg_plots_border_height_get, _wrap_sg_plots_border_height_set },
    { "border_color", _wrap_sg_plots_border_color_get, _wrap_sg_plots_border_color_set },
    { "left_margin", _wrap_sg_plots_left_margin_get, _wrap_sg_plots_left_margin_set },
    { "right_margin", _wrap_sg_plots_right_margin_get, _wrap_sg_plots_right_margin_set },
    { "top_margin", _wrap_sg_plots_top_margin_get, _wrap_sg_plots_top_margin_set },
    { "bottom_margin", _wrap_sg_plots_bottom_margin_get, _wrap_sg_plots_bottom_margin_set },
    { "horizontal_spacing", _wrap_sg_plots_horizontal_spacing_get, _wrap_sg_plots_horizontal_spacing_set },
    { "vertical_spacing", _wrap_sg_plots_vertical_spacing_get, _wrap_sg_plots_vertical_spacing_set },
    {0,0,0}
};
static swig_lua_method swig_sg_plots_methods[]= {
    { "copy", _wrap_sg_plots_copy},
    { "current_plotter", _wrap_sg_plots_current_plotter},
    { "number", _wrap_sg_plots_number},
    { "current_index", _wrap_sg_plots_current_index},
    { "set_regions", _wrap_sg_plots_set_regions},
    { "next", _wrap_sg_plots_next},
    { "set_current_plotter", _wrap_sg_plots_set_current_plotter},
    { "adjust_size", _wrap_sg_plots_adjust_size},
    {0,0}
};
static swig_lua_method swig_sg_plots_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_plots_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_plots_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_plots_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_plots_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_plots_Sf_SwigStatic = {
    "sg_plots",
    swig_sg_plots_Sf_SwigStatic_methods,
    swig_sg_plots_Sf_SwigStatic_attributes,
    swig_sg_plots_Sf_SwigStatic_constants,
    swig_sg_plots_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_plots_bases[] = {0,0};
static const char *swig_sg_plots_base_names[] = {"inlib::sg::node *",0};
static swig_lua_class _wrap_class_sg_plots = { "sg_plots", "sg_plots", &SWIGTYPE_p_inlib__sg__plots,_proxy__wrap_new_sg_plots, swig_delete_sg_plots, swig_sg_plots_methods, swig_sg_plots_attributes, &swig_sg_plots_Sf_SwigStatic, swig_sg_plots_meta, swig_sg_plots_bases, swig_sg_plots_base_names };

static int _wrap_sg_set_plotter_camera(lua_State* L) { int SWIG_arg = 0; inlib::sg::plotter *arg1 = 0 ;
  inlib::sg::ortho *arg2 = 0 ; unsigned int arg3 ; unsigned int arg4 ; SWIG_check_num_args("inlib::sg::set_plotter_camera",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::set_plotter_camera",1,"inlib::sg::plotter &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::set_plotter_camera",2,"inlib::sg::ortho &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::set_plotter_camera",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::set_plotter_camera",4,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_set_plotter_camera",1,SWIGTYPE_p_inlib__sg__plotter); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__ortho,0))){
    SWIG_fail_ptr("sg_set_plotter_camera",2,SWIGTYPE_p_inlib__sg__ortho); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  inlib::sg::set_plotter_camera(*arg1,*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_viewer__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; unsigned int arg2 ;
  unsigned int arg3 ; inlib::sg::viewer *result = 0 ; SWIG_check_num_args("inlib::sg::viewer::viewer",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::viewer::viewer",1,"std::ostream &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::viewer::viewer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::viewer::viewer",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_viewer",1,SWIGTYPE_p_std__ostream); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (inlib::sg::viewer *)new inlib::sg::viewer(*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__viewer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_viewer__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = 0 ;
  inlib::sg::viewer *result = 0 ; SWIG_check_num_args("inlib::sg::viewer::viewer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::viewer::viewer",1,"inlib::sg::viewer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("new_viewer",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (inlib::sg::viewer *)new inlib::sg::viewer((inlib::sg::viewer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__viewer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_viewer(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__viewer, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_viewer__SWIG_1(L);}  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_new_viewer__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_viewer'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::viewer::viewer(std::ostream &,unsigned int,unsigned int)\n"
  "    inlib::sg::viewer::viewer(inlib::sg::viewer const &)\n"); lua_error(L);return 0; }
static int _wrap_viewer_out(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = (inlib::sg::viewer *) 0 ;
  std::ostream *result = 0 ; SWIG_check_num_args("inlib::sg::viewer::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::viewer::out",1,"inlib::sg::viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("viewer_out",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (std::ostream *) &((inlib::sg::viewer const *)arg1)->out();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__ostream,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_viewer_width(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = (inlib::sg::viewer *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::sg::viewer::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::viewer::width",1,"inlib::sg::viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("viewer_width",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (unsigned int)((inlib::sg::viewer const *)arg1)->width(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewer_height(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = (inlib::sg::viewer *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::sg::viewer::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::viewer::height",1,"inlib::sg::viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("viewer_height",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (unsigned int)((inlib::sg::viewer const *)arg1)->height(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewer_sg__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = (inlib::sg::viewer *) 0 ;
  inlib::sg::group *result = 0 ; SWIG_check_num_args("inlib::sg::viewer::sg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::viewer::sg",1,"inlib::sg::viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("viewer_sg",1,SWIGTYPE_p_inlib__sg__viewer); }  result = (inlib::sg::group *) &(arg1)->sg();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__group,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_viewer_sg__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = (inlib::sg::viewer *) 0 ;
  inlib::sg::group *result = 0 ; SWIG_check_num_args("inlib::sg::viewer::sg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::viewer::sg",1,"inlib::sg::viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("viewer_sg",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (inlib::sg::group *) &((inlib::sg::viewer const *)arg1)->sg();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__group,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_viewer_sg(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_viewer_sg__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_viewer_sg__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'viewer_sg'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::viewer::sg()\n" "    inlib::sg::viewer::sg() const\n"); lua_error(L);return 0; }
static void swig_delete_viewer(void *obj) {
inlib::sg::viewer *arg1 = (inlib::sg::viewer *) obj;
delete arg1;
}
static int _proxy__wrap_new_viewer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_viewer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_viewer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_viewer_methods[]= {
    { "out", _wrap_viewer_out},
    { "width", _wrap_viewer_width},
    { "height", _wrap_viewer_height},
    { "sg", _wrap_viewer_sg},
    {0,0}
};
static swig_lua_method swig_viewer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_viewer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_viewer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_viewer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_viewer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_viewer_Sf_SwigStatic = {
    "viewer",
    swig_viewer_Sf_SwigStatic_methods,
    swig_viewer_Sf_SwigStatic_attributes,
    swig_viewer_Sf_SwigStatic_constants,
    swig_viewer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_viewer_bases[] = {0};
static const char *swig_viewer_base_names[] = {0};
static swig_lua_class _wrap_class_viewer = { "viewer", "viewer", &SWIGTYPE_p_inlib__sg__viewer,_proxy__wrap_new_viewer, swig_delete_viewer, swig_viewer_methods, swig_viewer_attributes, &swig_viewer_Sf_SwigStatic, swig_viewer_meta, swig_viewer_bases, swig_viewer_base_names };

static int _wrap_cast_viewer(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  inlib::sg::viewer *result = 0 ; SWIG_check_num_args("inlib::sg::cast_viewer",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("inlib::sg::cast_viewer",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (inlib::sg::viewer *)inlib::sg::cast_viewer((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__viewer,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static swig_lua_attribute swig_render_manager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_render_manager_methods[]= {
    {0,0}
};
static swig_lua_method swig_render_manager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_render_manager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_render_manager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_render_manager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_render_manager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_render_manager_Sf_SwigStatic = {
    "render_manager",
    swig_render_manager_Sf_SwigStatic_methods,
    swig_render_manager_Sf_SwigStatic_attributes,
    swig_render_manager_Sf_SwigStatic_constants,
    swig_render_manager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_render_manager_bases[] = {0};
static const char *swig_render_manager_base_names[] = {0};
static swig_lua_class _wrap_class_render_manager = { "render_manager", "render_manager", &SWIGTYPE_p_inlib__sg__render_manager,0,0, swig_render_manager_methods, swig_render_manager_attributes, &swig_render_manager_Sf_SwigStatic, swig_render_manager_meta, swig_render_manager_bases, swig_render_manager_base_names };

static int _wrap_new_wps(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::wps *result = 0 ;
  SWIG_check_num_args("inlib::wps::wps",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::wps::wps",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_wps",1,SWIGTYPE_p_std__ostream); }  result = (inlib::wps *)new inlib::wps(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__wps,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_wps_open_file__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  std::string *arg2 = 0 ; bool arg3 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::wps::open_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::open_file",1,"inlib::wps *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::wps::open_file",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("inlib::wps::open_file",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_open_file",1,SWIGTYPE_p_inlib__wps); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->open_file((std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_open_file__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::wps::open_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::open_file",1,"inlib::wps *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::wps::open_file",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_open_file",1,SWIGTYPE_p_inlib__wps); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->open_file((std::string const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_open_file(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__wps, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_wps_open_file__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__wps, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_wps_open_file__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'wps_open_file'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::wps::open_file(std::string const &,bool)\n" "    inlib::wps::open_file(std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_wps_close_file(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; bool result;
  SWIG_check_num_args("inlib::wps::close_file",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::close_file",1,"inlib::wps *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_close_file",1,SWIGTYPE_p_inlib__wps); }  result = (bool)(arg1)->close_file();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_PAGE_SCALE__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; float arg2 ;
  float arg3 ; bool arg4 ; SWIG_check_num_args("inlib::wps::PS_PAGE_SCALE",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",1,"inlib::wps *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",3,"float");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_PAGE_SCALE",1,SWIGTYPE_p_inlib__wps); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); (arg1)->PS_PAGE_SCALE(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_PAGE_SCALE__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("inlib::wps::PS_PAGE_SCALE",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",1,"inlib::wps *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::wps::PS_PAGE_SCALE",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_PAGE_SCALE",1,SWIGTYPE_p_inlib__wps); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->PS_PAGE_SCALE(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_wps_PS_PAGE_SCALE(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__wps, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_wps_PS_PAGE_SCALE__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__wps, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_wps_PS_PAGE_SCALE__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'wps_PS_PAGE_SCALE'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::wps::PS_PAGE_SCALE(float,float,bool)\n" "    inlib::wps::PS_PAGE_SCALE(float,float)\n"); lua_error(L);return 0; }
static int _wrap_wps_PS_SCALE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("inlib::wps::PS_SCALE",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_SCALE",1,"inlib::wps *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::wps::PS_SCALE",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::wps::PS_SCALE",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_SCALE",1,SWIGTYPE_p_inlib__wps); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->PS_SCALE(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_wps_PS_TRANSLATE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("inlib::wps::PS_TRANSLATE",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_TRANSLATE",1,"inlib::wps *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::wps::PS_TRANSLATE",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::wps::PS_TRANSLATE",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_TRANSLATE",1,SWIGTYPE_p_inlib__wps); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->PS_TRANSLATE(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_wps_PS_ROTATE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::wps::PS_ROTATE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_ROTATE",1,"inlib::wps *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::wps::PS_ROTATE",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_ROTATE",1,SWIGTYPE_p_inlib__wps); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->PS_ROTATE(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_SAVE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  SWIG_check_num_args("inlib::wps::PS_SAVE",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_SAVE",1,"inlib::wps *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_SAVE",1,SWIGTYPE_p_inlib__wps); }  (arg1)->PS_SAVE(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_RESTORE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  SWIG_check_num_args("inlib::wps::PS_RESTORE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_RESTORE",1,"inlib::wps *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_RESTORE",1,SWIGTYPE_p_inlib__wps); }  (arg1)->PS_RESTORE(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_BEGIN_PAGE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  SWIG_check_num_args("inlib::wps::PS_BEGIN_PAGE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_BEGIN_PAGE",1,"inlib::wps *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_BEGIN_PAGE",1,SWIGTYPE_p_inlib__wps); }  (arg1)->PS_BEGIN_PAGE(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_END_PAGE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  SWIG_check_num_args("inlib::wps::PS_END_PAGE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_END_PAGE",1,"inlib::wps *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_END_PAGE",1,SWIGTYPE_p_inlib__wps); }  (arg1)->PS_END_PAGE(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_wps_PS_IMAGE(lua_State* L) { int SWIG_arg = 0; inlib::wps *arg1 = (inlib::wps *) 0 ;
  inlib::sg::zb_action *arg2 = 0 ; SWIG_check_num_args("inlib::wps::PS_IMAGE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::wps::PS_IMAGE",1,"inlib::wps *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::wps::PS_IMAGE",2,"inlib::sg::zb_action const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__wps,0))){
    SWIG_fail_ptr("wps_PS_IMAGE",1,SWIGTYPE_p_inlib__wps); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("wps_PS_IMAGE",2,SWIGTYPE_p_inlib__sg__zb_action); } 
  inlib_wps_PS_IMAGE(arg1,(inlib::sg::zb_action const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_wps(void *obj) {
inlib::wps *arg1 = (inlib::wps *) obj;
delete arg1;
}
static int _proxy__wrap_new_wps(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_wps);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_wps_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_wps_methods[]= {
    { "open_file", _wrap_wps_open_file},
    { "close_file", _wrap_wps_close_file},
    { "PS_PAGE_SCALE", _wrap_wps_PS_PAGE_SCALE},
    { "PS_SCALE", _wrap_wps_PS_SCALE},
    { "PS_TRANSLATE", _wrap_wps_PS_TRANSLATE},
    { "PS_ROTATE", _wrap_wps_PS_ROTATE},
    { "PS_SAVE", _wrap_wps_PS_SAVE},
    { "PS_RESTORE", _wrap_wps_PS_RESTORE},
    { "PS_BEGIN_PAGE", _wrap_wps_PS_BEGIN_PAGE},
    { "PS_END_PAGE", _wrap_wps_PS_END_PAGE},
    { "PS_IMAGE", _wrap_wps_PS_IMAGE},
    {0,0}
};
static swig_lua_method swig_wps_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_wps_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_wps_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_wps_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_wps_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_wps_Sf_SwigStatic = {
    "wps",
    swig_wps_Sf_SwigStatic_methods,
    swig_wps_Sf_SwigStatic_attributes,
    swig_wps_Sf_SwigStatic_constants,
    swig_wps_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_wps_bases[] = {0};
static const char *swig_wps_base_names[] = {0};
static swig_lua_class _wrap_class_wps = { "wps", "wps", &SWIGTYPE_p_inlib__wps,_proxy__wrap_new_wps, swig_delete_wps, swig_wps_methods, swig_wps_attributes, &swig_wps_Sf_SwigStatic, swig_wps_meta, swig_wps_bases, swig_wps_base_names };

static int _wrap_new_zb_buffer(lua_State* L) { int SWIG_arg = 0; inlib::zb::buffer *result = 0 ;
  SWIG_check_num_args("inlib::zb::buffer::buffer",0,0) result = (inlib::zb::buffer *)new inlib::zb::buffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__zb__buffer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_zb_buffer_clear_color_buffer(lua_State* L) { int SWIG_arg = 0;
  inlib::zb::buffer *arg1 = (inlib::zb::buffer *) 0 ; inlib::zb::buffer::ZPixel arg2 ;
  SWIG_check_num_args("inlib::zb::buffer::clear_color_buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::zb::buffer::clear_color_buffer",1,"inlib::zb::buffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::zb::buffer::clear_color_buffer",2,"inlib::zb::buffer::ZPixel");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__zb__buffer,0))){
    SWIG_fail_ptr("zb_buffer_clear_color_buffer",1,SWIGTYPE_p_inlib__zb__buffer); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (inlib::zb::buffer::ZPixel)lua_tonumber(L, 2); (arg1)->clear_color_buffer(arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_zb_buffer_clear_depth_buffer(lua_State* L) { int SWIG_arg = 0;
  inlib::zb::buffer *arg1 = (inlib::zb::buffer *) 0 ; SWIG_check_num_args("inlib::zb::buffer::clear_depth_buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::zb::buffer::clear_depth_buffer",1,"inlib::zb::buffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__zb__buffer,0))){
    SWIG_fail_ptr("zb_buffer_clear_depth_buffer",1,SWIGTYPE_p_inlib__zb__buffer); }  (arg1)->clear_depth_buffer();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_zb_buffer(void *obj) {
inlib::zb::buffer *arg1 = (inlib::zb::buffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_zb_buffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_zb_buffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_zb_buffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_zb_buffer_methods[]= {
    { "clear_color_buffer", _wrap_zb_buffer_clear_color_buffer},
    { "clear_depth_buffer", _wrap_zb_buffer_clear_depth_buffer},
    {0,0}
};
static swig_lua_method swig_zb_buffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_zb_buffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_zb_buffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_zb_buffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_zb_buffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_zb_buffer_Sf_SwigStatic = {
    "zb_buffer",
    swig_zb_buffer_Sf_SwigStatic_methods,
    swig_zb_buffer_Sf_SwigStatic_attributes,
    swig_zb_buffer_Sf_SwigStatic_constants,
    swig_zb_buffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_zb_buffer_bases[] = {0};
static const char *swig_zb_buffer_base_names[] = {0};
static swig_lua_class _wrap_class_zb_buffer = { "zb_buffer", "zb_buffer", &SWIGTYPE_p_inlib__zb__buffer,_proxy__wrap_new_zb_buffer, swig_delete_zb_buffer, swig_zb_buffer_methods, swig_zb_buffer_attributes, &swig_zb_buffer_Sf_SwigStatic, swig_zb_buffer_meta, swig_zb_buffer_bases, swig_zb_buffer_base_names };

static int _wrap_new_sg_zb_manager__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::sg::zb_manager *result = 0 ;
  SWIG_check_num_args("inlib::sg::zb_manager::zb_manager",0,0) result = (inlib::sg::zb_manager *)new inlib::sg::zb_manager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__zb_manager,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_zb_manager__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::zb_manager *arg1 = 0 ;
  inlib::sg::zb_manager *result = 0 ; SWIG_check_num_args("inlib::sg::zb_manager::zb_manager",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::zb_manager::zb_manager",1,"inlib::sg::zb_manager const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_manager,0))){
    SWIG_fail_ptr("new_sg_zb_manager",1,SWIGTYPE_p_inlib__sg__zb_manager); } 
  result = (inlib::sg::zb_manager *)new inlib::sg::zb_manager((inlib::sg::zb_manager const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__zb_manager,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_zb_manager(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_sg_zb_manager__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__zb_manager, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_sg_zb_manager__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sg_zb_manager'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::zb_manager::zb_manager()\n" "    inlib::sg::zb_manager::zb_manager(inlib::sg::zb_manager const &)\n");
  lua_error(L);return 0; }
static void swig_delete_sg_zb_manager(void *obj) {
inlib::sg::zb_manager *arg1 = (inlib::sg::zb_manager *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_zb_manager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_zb_manager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_zb_manager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_zb_manager_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_zb_manager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_zb_manager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_zb_manager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_zb_manager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_zb_manager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_zb_manager_Sf_SwigStatic = {
    "sg_zb_manager",
    swig_sg_zb_manager_Sf_SwigStatic_methods,
    swig_sg_zb_manager_Sf_SwigStatic_attributes,
    swig_sg_zb_manager_Sf_SwigStatic_constants,
    swig_sg_zb_manager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_zb_manager_bases[] = {0,0};
static const char *swig_sg_zb_manager_base_names[] = {"inlib::sg::render_manager *",0};
static swig_lua_class _wrap_class_sg_zb_manager = { "sg_zb_manager", "sg_zb_manager", &SWIGTYPE_p_inlib__sg__zb_manager,_proxy__wrap_new_sg_zb_manager, swig_delete_sg_zb_manager, swig_sg_zb_manager_methods, swig_sg_zb_manager_attributes, &swig_sg_zb_manager_Sf_SwigStatic, swig_sg_zb_manager_meta, swig_sg_zb_manager_bases, swig_sg_zb_manager_base_names };

static int _wrap_new_sg_zb_action(lua_State* L) { int SWIG_arg = 0; inlib::sg::zb_manager *arg1 = 0 ; std::ostream *arg2 = 0 ;
  unsigned int arg3 ; unsigned int arg4 ; inlib::sg::zb_action *result = 0 ;
  SWIG_check_num_args("inlib::sg::zb_action::zb_action",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::zb_action::zb_action",1,"inlib::sg::zb_manager &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::zb_action::zb_action",2,"std::ostream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::zb_action::zb_action",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::zb_action::zb_action",4,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_manager,0))){
    SWIG_fail_ptr("new_sg_zb_action",1,SWIGTYPE_p_inlib__sg__zb_manager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_sg_zb_action",2,SWIGTYPE_p_std__ostream); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (inlib::sg::zb_action *)new inlib::sg::zb_action(*arg1,*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__zb_action,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_reset(lua_State* L) { int SWIG_arg = 0; inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) 0 ;
  SWIG_check_num_args("inlib::sg::zb_action::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::zb_action::reset",1,"inlib::sg::zb_action *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("sg_zb_action_reset",1,SWIGTYPE_p_inlib__sg__zb_action); }  (arg1)->reset(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_zbuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) 0 ; inlib::zb::buffer *result = 0 ;
  SWIG_check_num_args("inlib::sg::zb_action::zbuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::zb_action::zbuffer",1,"inlib::sg::zb_action const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("sg_zb_action_zbuffer",1,SWIGTYPE_p_inlib__sg__zb_action); } 
  result = (inlib::zb::buffer *) &((inlib::sg::zb_action const *)arg1)->zbuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__zb__buffer,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_zbuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) 0 ; inlib::zb::buffer *result = 0 ;
  SWIG_check_num_args("inlib::sg::zb_action::zbuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::zb_action::zbuffer",1,"inlib::sg::zb_action *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("sg_zb_action_zbuffer",1,SWIGTYPE_p_inlib__sg__zb_action); } 
  result = (inlib::zb::buffer *) &(arg1)->zbuffer(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__zb__buffer,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_zbuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__zb_action, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_zb_action_zbuffer__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__zb_action, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_zb_action_zbuffer__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_zb_action_zbuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::zb_action::zbuffer() const\n" "    inlib::sg::zb_action::zbuffer()\n");
  lua_error(L);return 0; }
static int _wrap_sg_zb_action_add_color__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  inlib::zb::buffer::ZPixel result; SWIG_check_num_args("inlib::sg::zb_action::add_color",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::zb_action::add_color",1,"inlib::sg::zb_action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::zb_action::add_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::zb_action::add_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::zb_action::add_color",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::zb_action::add_color",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("sg_zb_action_add_color",1,SWIGTYPE_p_inlib__sg__zb_action); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  result = (inlib::zb::buffer::ZPixel)(arg1)->add_color(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_add_color__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  inlib::zb::buffer::ZPixel result; SWIG_check_num_args("inlib::sg::zb_action::add_color",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::zb_action::add_color",1,"inlib::sg::zb_action *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::zb_action::add_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::zb_action::add_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::zb_action::add_color",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__zb_action,0))){
    SWIG_fail_ptr("sg_zb_action_add_color",1,SWIGTYPE_p_inlib__sg__zb_action); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (inlib::zb::buffer::ZPixel)(arg1)->add_color(arg2,arg3,arg4); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_zb_action_add_color(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__zb_action, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_sg_zb_action_add_color__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__zb_action, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_sg_zb_action_add_color__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_zb_action_add_color'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::zb_action::add_color(float,float,float,float)\n"
  "    inlib::sg::zb_action::add_color(float,float,float)\n"); lua_error(L);return 0; }
static void swig_delete_sg_zb_action(void *obj) {
inlib::sg::zb_action *arg1 = (inlib::sg::zb_action *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_zb_action(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_zb_action);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_zb_action_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_zb_action_methods[]= {
    { "reset", _wrap_sg_zb_action_reset},
    { "zbuffer", _wrap_sg_zb_action_zbuffer},
    { "add_color", _wrap_sg_zb_action_add_color},
    {0,0}
};
static swig_lua_method swig_sg_zb_action_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_zb_action_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_zb_action_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_zb_action_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_zb_action_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_zb_action_Sf_SwigStatic = {
    "sg_zb_action",
    swig_sg_zb_action_Sf_SwigStatic_methods,
    swig_sg_zb_action_Sf_SwigStatic_attributes,
    swig_sg_zb_action_Sf_SwigStatic_constants,
    swig_sg_zb_action_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_zb_action_bases[] = {0,0};
static const char *swig_sg_zb_action_base_names[] = {"inlib::sg::render_action *",0};
static swig_lua_class _wrap_class_sg_zb_action = { "sg_zb_action", "sg_zb_action", &SWIGTYPE_p_inlib__sg__zb_action,_proxy__wrap_new_sg_zb_action, swig_delete_sg_zb_action, swig_sg_zb_action_methods, swig_sg_zb_action_attributes, &swig_sg_zb_action_Sf_SwigStatic, swig_sg_zb_action_meta, swig_sg_zb_action_bases, swig_sg_zb_action_base_names };

static int _wrap_new_sg_gl2ps_manager(lua_State* L) { int SWIG_arg = 0; inlib::sg::gl2ps_manager *result = 0 ;
  SWIG_check_num_args("inlib::sg::gl2ps_manager::gl2ps_manager",0,0)
  result = (inlib::sg::gl2ps_manager *)new inlib::sg::gl2ps_manager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__gl2ps_manager,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_sg_gl2ps_manager(void *obj) {
inlib::sg::gl2ps_manager *arg1 = (inlib::sg::gl2ps_manager *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_gl2ps_manager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_gl2ps_manager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_gl2ps_manager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_gl2ps_manager_methods[]= {
    {0,0}
};
static swig_lua_method swig_sg_gl2ps_manager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_gl2ps_manager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_gl2ps_manager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_gl2ps_manager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_gl2ps_manager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_gl2ps_manager_Sf_SwigStatic = {
    "sg_gl2ps_manager",
    swig_sg_gl2ps_manager_Sf_SwigStatic_methods,
    swig_sg_gl2ps_manager_Sf_SwigStatic_attributes,
    swig_sg_gl2ps_manager_Sf_SwigStatic_constants,
    swig_sg_gl2ps_manager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_gl2ps_manager_bases[] = {0};
static const char *swig_sg_gl2ps_manager_base_names[] = {0};
static swig_lua_class _wrap_class_sg_gl2ps_manager = { "sg_gl2ps_manager", "sg_gl2ps_manager", &SWIGTYPE_p_inlib__sg__gl2ps_manager,_proxy__wrap_new_sg_gl2ps_manager, swig_delete_sg_gl2ps_manager, swig_sg_gl2ps_manager_methods, swig_sg_gl2ps_manager_attributes, &swig_sg_gl2ps_manager_Sf_SwigStatic, swig_sg_gl2ps_manager_meta, swig_sg_gl2ps_manager_bases, swig_sg_gl2ps_manager_base_names };

static int _wrap_new_sg_gl2ps_action(lua_State* L) { int SWIG_arg = 0; inlib::sg::gl2ps_manager *arg1 = 0 ;
  std::ostream *arg2 = 0 ; unsigned int arg3 ; unsigned int arg4 ; inlib::sg::gl2ps_action *result = 0 ;
  SWIG_check_num_args("inlib::sg::gl2ps_action::gl2ps_action",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::gl2ps_action::gl2ps_action",1,"inlib::sg::gl2ps_manager &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::gl2ps_action::gl2ps_action",2,"std::ostream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gl2ps_action::gl2ps_action",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gl2ps_action::gl2ps_action",4,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gl2ps_manager,0))){
    SWIG_fail_ptr("new_sg_gl2ps_action",1,SWIGTYPE_p_inlib__sg__gl2ps_manager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_sg_gl2ps_action",2,SWIGTYPE_p_std__ostream); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (inlib::sg::gl2ps_action *)new inlib::sg::gl2ps_action(*arg1,*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__gl2ps_action,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_gl2ps_action_open(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gl2ps_action *arg1 = (inlib::sg::gl2ps_action *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::sg::gl2ps_action::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gl2ps_action::open",1,"inlib::sg::gl2ps_action *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::gl2ps_action::open",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gl2ps_action,0))){
    SWIG_fail_ptr("sg_gl2ps_action_open",1,SWIGTYPE_p_inlib__sg__gl2ps_action); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->open((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_gl2ps_action_close(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gl2ps_action *arg1 = (inlib::sg::gl2ps_action *) 0 ; bool result;
  SWIG_check_num_args("inlib::sg::gl2ps_action::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gl2ps_action::close",1,"inlib::sg::gl2ps_action *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gl2ps_action,0))){
    SWIG_fail_ptr("sg_gl2ps_action_close",1,SWIGTYPE_p_inlib__sg__gl2ps_action); }  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_gl2ps_action(void *obj) {
inlib::sg::gl2ps_action *arg1 = (inlib::sg::gl2ps_action *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_gl2ps_action(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_gl2ps_action);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_gl2ps_action_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_gl2ps_action_methods[]= {
    { "open", _wrap_sg_gl2ps_action_open},
    { "close", _wrap_sg_gl2ps_action_close},
    {0,0}
};
static swig_lua_method swig_sg_gl2ps_action_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_gl2ps_action_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_gl2ps_action_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_gl2ps_action_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_gl2ps_action_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_gl2ps_action_Sf_SwigStatic = {
    "sg_gl2ps_action",
    swig_sg_gl2ps_action_Sf_SwigStatic_methods,
    swig_sg_gl2ps_action_Sf_SwigStatic_attributes,
    swig_sg_gl2ps_action_Sf_SwigStatic_constants,
    swig_sg_gl2ps_action_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_gl2ps_action_bases[] = {0,0};
static const char *swig_sg_gl2ps_action_base_names[] = {"inlib::sg::render_action *",0};
static swig_lua_class _wrap_class_sg_gl2ps_action = { "sg_gl2ps_action", "sg_gl2ps_action", &SWIGTYPE_p_inlib__sg__gl2ps_action,_proxy__wrap_new_sg_gl2ps_action, swig_delete_sg_gl2ps_action, swig_sg_gl2ps_action_methods, swig_sg_gl2ps_action_attributes, &swig_sg_gl2ps_action_Sf_SwigStatic, swig_sg_gl2ps_action_meta, swig_sg_gl2ps_action_bases, swig_sg_gl2ps_action_base_names };

static int _wrap_sg_write_bsg_protocol(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::write_bsg *arg1 = (inlib::sg::write_bsg *) 0 ; unsigned int result;
  SWIG_check_num_args("inlib::sg::write_bsg::protocol",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::write_bsg::protocol",1,"inlib::sg::write_bsg const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__write_bsg,0))){
    SWIG_fail_ptr("sg_write_bsg_protocol",1,SWIGTYPE_p_inlib__sg__write_bsg); } 
  result = (unsigned int)((inlib::sg::write_bsg const *)arg1)->protocol(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_sg_write_bsg(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::sg::write_bsg *result = 0 ;
  SWIG_check_num_args("inlib::sg::write_bsg::write_bsg",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::write_bsg::write_bsg",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_sg_write_bsg",1,SWIGTYPE_p_std__ostream); } 
  result = (inlib::sg::write_bsg *)new inlib::sg::write_bsg(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__write_bsg,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_write_bsg_open_buffer(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::write_bsg *arg1 = (inlib::sg::write_bsg *) 0 ; bool result;
  SWIG_check_num_args("inlib::sg::write_bsg::open_buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::write_bsg::open_buffer",1,"inlib::sg::write_bsg *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__write_bsg,0))){
    SWIG_fail_ptr("sg_write_bsg_open_buffer",1,SWIGTYPE_p_inlib__sg__write_bsg); }  result = (bool)(arg1)->open_buffer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_write_bsg_close_buffer(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::write_bsg *arg1 = (inlib::sg::write_bsg *) 0 ; bool result;
  SWIG_check_num_args("inlib::sg::write_bsg::close_buffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::write_bsg::close_buffer",1,"inlib::sg::write_bsg *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__write_bsg,0))){
    SWIG_fail_ptr("sg_write_bsg_close_buffer",1,SWIGTYPE_p_inlib__sg__write_bsg); }  result = (bool)(arg1)->close_buffer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_write_bsg_write_file(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::write_bsg *arg1 = (inlib::sg::write_bsg *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::sg::write_bsg::write_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::write_bsg::write_file",1,"inlib::sg::write_bsg const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::write_bsg::write_file",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__write_bsg,0))){
    SWIG_fail_ptr("sg_write_bsg_write_file",1,SWIGTYPE_p_inlib__sg__write_bsg); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((inlib::sg::write_bsg const *)arg1)->write_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_sg_write_bsg(void *obj) {
inlib::sg::write_bsg *arg1 = (inlib::sg::write_bsg *) obj;
delete arg1;
}
static int _proxy__wrap_new_sg_write_bsg(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_sg_write_bsg);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_sg_write_bsg_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sg_write_bsg_methods[]= {
    { "protocol", _wrap_sg_write_bsg_protocol},
    { "open_buffer", _wrap_sg_write_bsg_open_buffer},
    { "close_buffer", _wrap_sg_write_bsg_close_buffer},
    { "write_file", _wrap_sg_write_bsg_write_file},
    {0,0}
};
static swig_lua_method swig_sg_write_bsg_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_sg_write_bsg_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_sg_write_bsg_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_sg_write_bsg_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_sg_write_bsg_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_sg_write_bsg_Sf_SwigStatic = {
    "sg_write_bsg",
    swig_sg_write_bsg_Sf_SwigStatic_methods,
    swig_sg_write_bsg_Sf_SwigStatic_attributes,
    swig_sg_write_bsg_Sf_SwigStatic_constants,
    swig_sg_write_bsg_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_sg_write_bsg_bases[] = {0,0};
static const char *swig_sg_write_bsg_base_names[] = {"inlib::sg::write_action *",0};
static swig_lua_class _wrap_class_sg_write_bsg = { "sg_write_bsg", "sg_write_bsg", &SWIGTYPE_p_inlib__sg__write_bsg,_proxy__wrap_new_sg_write_bsg, swig_delete_sg_write_bsg, swig_sg_write_bsg_methods, swig_sg_write_bsg_attributes, &swig_sg_write_bsg_Sf_SwigStatic, swig_sg_write_bsg_meta, swig_sg_write_bsg_bases, swig_sg_write_bsg_base_names };

static int _wrap_net_serror(lua_State* L) { int SWIG_arg = 0; std::string result; SWIG_check_num_args("inlib::net::serror",0,0)
  result = inlib::net::serror(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_disconnect(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; SWIG_check_num_args("inlib::net::base_socket::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::disconnect",1,"inlib::net::base_socket *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_disconnect",1,SWIGTYPE_p_inlib__net__base_socket); }  (arg1)->disconnect(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_verbose(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::verbose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::verbose",1,"inlib::net::base_socket const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_verbose",1,SWIGTYPE_p_inlib__net__base_socket); } 
  result = (bool)((inlib::net::base_socket const *)arg1)->verbose(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_set_verbose(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool arg2 ;
  SWIG_check_num_args("inlib::net::base_socket::set_verbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::set_verbose",1,"inlib::net::base_socket *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::net::base_socket::set_verbose",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_set_verbose",1,SWIGTYPE_p_inlib__net__base_socket); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->set_verbose(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_is_connected(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::is_connected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::is_connected",1,"inlib::net::base_socket const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_is_connected",1,SWIGTYPE_p_inlib__net__base_socket); } 
  result = (bool)((inlib::net::base_socket const *)arg1)->is_connected(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_out(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; std::ostream *result = 0 ;
  SWIG_check_num_args("inlib::net::base_socket::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::out",1,"inlib::net::base_socket const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_out",1,SWIGTYPE_p_inlib__net__base_socket); } 
  result = (std::ostream *) &((inlib::net::base_socket const *)arg1)->out();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__ostream,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_base_socket_close(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; SWIG_check_num_args("inlib::net::base_socket::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::close",1,"inlib::net::base_socket *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_close",1,SWIGTYPE_p_inlib__net__base_socket); }  (arg1)->close(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_send_uchar(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; unsigned char arg2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::send_uchar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::send_uchar",1,"inlib::net::base_socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::net::base_socket::send_uchar",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_send_uchar",1,SWIGTYPE_p_inlib__net__base_socket); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  result = (bool)(arg1)->send_uchar(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_send_bool(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool arg2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::send_bool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::send_bool",1,"inlib::net::base_socket *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::net::base_socket::send_bool",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_send_bool",1,SWIGTYPE_p_inlib__net__base_socket); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->send_bool(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_fetch_bool(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool *arg2 = 0 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::fetch_bool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::fetch_bool",1,"inlib::net::base_socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::net::base_socket::fetch_bool",2,"bool &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_fetch_bool",1,SWIGTYPE_p_inlib__net__base_socket); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("base_socket_fetch_bool",2,SWIGTYPE_p_bool); }  result = (bool)(arg1)->fetch_bool(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_send_string(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::send_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::send_string",1,"inlib::net::base_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::base_socket::send_string",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_send_string",1,SWIGTYPE_p_inlib__net__base_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->send_string((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_send_text(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; std::vector< std::string > *arg2 = 0 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::send_text",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::send_text",1,"inlib::net::base_socket *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::net::base_socket::send_text",2,"std::vector< std::string > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_send_text",1,SWIGTYPE_p_inlib__net__base_socket); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("base_socket_send_text",2,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (bool)(arg1)->send_text((std::vector< std::string > const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_send_file(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::send_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::send_file",1,"inlib::net::base_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::base_socket::send_file",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_send_file",1,SWIGTYPE_p_inlib__net__base_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->send_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_fetch_file(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::fetch_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::fetch_file",1,"inlib::net::base_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::base_socket::fetch_file",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_fetch_file",1,SWIGTYPE_p_inlib__net__base_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->fetch_file((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_is_active__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; unsigned int arg2 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::is_active",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::is_active",1,"inlib::net::base_socket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::net::base_socket::is_active",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_is_active",1,SWIGTYPE_p_inlib__net__base_socket); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (bool)(arg1)->is_active(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_is_active__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::net::base_socket *arg1 = (inlib::net::base_socket *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::base_socket::is_active",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::base_socket::is_active",1,"inlib::net::base_socket *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__base_socket,0))){
    SWIG_fail_ptr("base_socket_is_active",1,SWIGTYPE_p_inlib__net__base_socket); }  result = (bool)(arg1)->is_active();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_base_socket_is_active(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__net__base_socket, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_base_socket_is_active__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__net__base_socket, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_base_socket_is_active__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'base_socket_is_active'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::net::base_socket::is_active(unsigned int)\n"
  "    inlib::net::base_socket::is_active()\n"); lua_error(L);return 0; }
static void swig_delete_base_socket(void *obj) {
inlib::net::base_socket *arg1 = (inlib::net::base_socket *) obj;
delete arg1;
}
static swig_lua_attribute swig_base_socket_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_base_socket_methods[]= {
    { "disconnect", _wrap_base_socket_disconnect},
    { "verbose", _wrap_base_socket_verbose},
    { "set_verbose", _wrap_base_socket_set_verbose},
    { "is_connected", _wrap_base_socket_is_connected},
    { "out", _wrap_base_socket_out},
    { "close", _wrap_base_socket_close},
    { "send_uchar", _wrap_base_socket_send_uchar},
    { "send_bool", _wrap_base_socket_send_bool},
    { "fetch_bool", _wrap_base_socket_fetch_bool},
    { "send_string", _wrap_base_socket_send_string},
    { "send_text", _wrap_base_socket_send_text},
    { "send_file", _wrap_base_socket_send_file},
    { "fetch_file", _wrap_base_socket_fetch_file},
    { "is_active", _wrap_base_socket_is_active},
    {0,0}
};
static swig_lua_method swig_base_socket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_base_socket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_base_socket_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_base_socket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_base_socket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_base_socket_Sf_SwigStatic = {
    "base_socket",
    swig_base_socket_Sf_SwigStatic_methods,
    swig_base_socket_Sf_SwigStatic_attributes,
    swig_base_socket_Sf_SwigStatic_constants,
    swig_base_socket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_base_socket_bases[] = {0};
static const char *swig_base_socket_base_names[] = {0};
static swig_lua_class _wrap_class_base_socket = { "base_socket", "base_socket", &SWIGTYPE_p_inlib__net__base_socket,0, swig_delete_base_socket, swig_base_socket_methods, swig_base_socket_attributes, &swig_base_socket_Sf_SwigStatic, swig_base_socket_meta, swig_base_socket_bases, swig_base_socket_base_names };

static int _wrap_net_herror(lua_State* L) { int SWIG_arg = 0; std::string result; SWIG_check_num_args("inlib::net::herror",0,0)
  result = inlib::net::herror(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_inet_socket_disconnect(lua_State* L) { int SWIG_arg = 0;
  inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) 0 ; SWIG_check_num_args("inlib::net::inet_socket::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::inet_socket::disconnect",1,"inlib::net::inet_socket *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__inet_socket,0))){
    SWIG_fail_ptr("net_inet_socket_disconnect",1,SWIGTYPE_p_inlib__net__inet_socket); }  (arg1)->disconnect(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_net_inet_socket__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; bool arg2 ;
  inlib::net::inet_socket *result = 0 ; SWIG_check_num_args("inlib::net::inet_socket::inet_socket",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::net::inet_socket::inet_socket",1,"std::ostream &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::net::inet_socket::inet_socket",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_net_inet_socket",1,SWIGTYPE_p_std__ostream); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (inlib::net::inet_socket *)new inlib::net::inet_socket(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__net__inet_socket,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_net_inet_socket__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ;
  inlib::net::inet_socket *result = 0 ; SWIG_check_num_args("inlib::net::inet_socket::inet_socket",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::net::inet_socket::inet_socket",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_net_inet_socket",1,SWIGTYPE_p_std__ostream); } 
  result = (inlib::net::inet_socket *)new inlib::net::inet_socket(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__net__inet_socket,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_net_inet_socket(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_net_inet_socket__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_new_net_inet_socket__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_net_inet_socket'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::net::inet_socket::inet_socket(std::ostream &,bool)\n"
  "    inlib::net::inet_socket::inet_socket(std::ostream &)\n"); lua_error(L);return 0; }
static int _wrap_net_inet_socket_bind(lua_State* L) { int SWIG_arg = 0;
  inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ;
  unsigned int arg4 ; unsigned int arg5 ; bool arg6 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::inet_socket::bind",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::inet_socket::bind",1,"inlib::net::inet_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::inet_socket::bind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::net::inet_socket::bind",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::net::inet_socket::bind",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::net::inet_socket::bind",5,"unsigned int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("inlib::net::inet_socket::bind",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__inet_socket,0))){
    SWIG_fail_ptr("net_inet_socket_bind",1,SWIGTYPE_p_inlib__net__inet_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0); result = (bool)(arg1)->bind((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_inet_socket_set_dump_ECONNABORTED(lua_State* L) { int SWIG_arg = 0;
  inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) 0 ; bool arg2 ;
  SWIG_check_num_args("inlib::net::inet_socket::set_dump_ECONNABORTED",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::inet_socket::set_dump_ECONNABORTED",1,"inlib::net::inet_socket *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::net::inet_socket::set_dump_ECONNABORTED",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__inet_socket,0))){
    SWIG_fail_ptr("net_inet_socket_set_dump_ECONNABORTED",1,SWIGTYPE_p_inlib__net__inet_socket); } 
  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->set_dump_ECONNABORTED(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_net_inet_socket_bind_accept(lua_State* L) { int SWIG_arg = 0;
  inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ;
  unsigned int arg4 ; unsigned int arg5 ; bool arg6 ; bool arg7 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::inet_socket::bind_accept",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",1,"inlib::net::inet_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",5,"unsigned int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("inlib::net::inet_socket::bind_accept",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__inet_socket,0))){
    SWIG_fail_ptr("net_inet_socket_bind_accept",1,SWIGTYPE_p_inlib__net__inet_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0); arg7 = (lua_toboolean(L, 7)!=0);
  result = (bool)(arg1)->bind_accept((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_inet_socket_connect(lua_State* L) { int SWIG_arg = 0;
  inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ;
  unsigned int arg4 ; unsigned int arg5 ; unsigned int arg6 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::inet_socket::connect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::inet_socket::connect",1,"inlib::net::inet_socket *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::inet_socket::connect",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::net::inet_socket::connect",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::net::inet_socket::connect",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::net::inet_socket::connect",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("inlib::net::inet_socket::connect",6,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__inet_socket,0))){
    SWIG_fail_ptr("net_inet_socket_connect",1,SWIGTYPE_p_inlib__net__inet_socket); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative") arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (bool)(arg1)->connect((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_net_inet_socket(void *obj) {
inlib::net::inet_socket *arg1 = (inlib::net::inet_socket *) obj;
delete arg1;
}
static int _proxy__wrap_new_net_inet_socket(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_net_inet_socket);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_net_inet_socket_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_net_inet_socket_methods[]= {
    { "disconnect", _wrap_net_inet_socket_disconnect},
    { "bind", _wrap_net_inet_socket_bind},
    { "set_dump_ECONNABORTED", _wrap_net_inet_socket_set_dump_ECONNABORTED},
    { "bind_accept", _wrap_net_inet_socket_bind_accept},
    { "connect", _wrap_net_inet_socket_connect},
    {0,0}
};
static swig_lua_method swig_net_inet_socket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_net_inet_socket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_net_inet_socket_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_net_inet_socket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_net_inet_socket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_net_inet_socket_Sf_SwigStatic = {
    "net_inet_socket",
    swig_net_inet_socket_Sf_SwigStatic_methods,
    swig_net_inet_socket_Sf_SwigStatic_attributes,
    swig_net_inet_socket_Sf_SwigStatic_constants,
    swig_net_inet_socket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_net_inet_socket_bases[] = {0,0};
static const char *swig_net_inet_socket_base_names[] = {"inlib::net::base_socket *",0};
static swig_lua_class _wrap_class_net_inet_socket = { "net_inet_socket", "net_inet_socket", &SWIGTYPE_p_inlib__net__inet_socket,_proxy__wrap_new_net_inet_socket, swig_delete_net_inet_socket, swig_net_inet_socket_methods, swig_net_inet_socket_attributes, &swig_net_inet_socket_Sf_SwigStatic, swig_net_inet_socket_meta, swig_net_inet_socket_bases, swig_net_inet_socket_base_names };

static int _wrap_net_host_name(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::std_string *arg2 = 0 ;
  bool result; SWIG_check_num_args("inlib::net_host_name",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::net_host_name",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::net_host_name",2,"inlib::std_string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("net_host_name",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("net_host_name",2,SWIGTYPE_p_inlib__std_string); }  result = (bool)inlib::net_host_name(*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_inet_sip(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; std::string *arg2 = 0 ;
  inlib::std_string *arg3 = 0 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::net_inet_sip",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::net_inet_sip",1,"std::ostream &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net_inet_sip",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::net_inet_sip",3,"inlib::std_string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("net_inet_sip",1,SWIGTYPE_p_std__ostream); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("net_inet_sip",3,SWIGTYPE_p_inlib__std_string); } 
  result = (bool)inlib::net_inet_sip(*arg1,(std::string const &)*arg2,*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_net_sg_client(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; bool arg2 ; bool arg3 ;
  inlib::net::sg_client *result = 0 ; SWIG_check_num_args("inlib::net::sg_client::sg_client",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::net::sg_client::sg_client",1,"std::ostream &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::net::sg_client::sg_client",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("inlib::net::sg_client::sg_client",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_net_sg_client",1,SWIGTYPE_p_std__ostream); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); result = (inlib::net::sg_client *)new inlib::net::sg_client(*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__net__sg_client,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_is_connected(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::sg_client::is_connected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::is_connected",1,"inlib::net::sg_client const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_is_connected",1,SWIGTYPE_p_inlib__net__sg_client); } 
  result = (bool)((inlib::net::sg_client const *)arg1)->is_connected(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_socket(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; inlib::net::inet_socket *result = 0 ;
  SWIG_check_num_args("inlib::net::sg_client::socket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::socket",1,"inlib::net::sg_client *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_socket",1,SWIGTYPE_p_inlib__net__sg_client); } 
  result = (inlib::net::inet_socket *) &(arg1)->socket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__net__inet_socket,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_out(lua_State* L) { int SWIG_arg = 0; inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ;
  std::ostream *result = 0 ; SWIG_check_num_args("inlib::net::sg_client::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::out",1,"inlib::net::sg_client const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_out",1,SWIGTYPE_p_inlib__net__sg_client); } 
  result = (std::ostream *) &((inlib::net::sg_client const *)arg1)->out();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__ostream,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_net_sg_client_initialize(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ; std::string temp2 ;
  bool result; SWIG_check_num_args("inlib::net::sg_client::initialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::initialize",1,"inlib::net::sg_client *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::sg_client::initialize",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::net::sg_client::initialize",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_initialize",1,SWIGTYPE_p_inlib__net__sg_client); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->initialize((std::string const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_steer(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::sg_client::steer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::steer",1,"inlib::net::sg_client *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_steer",1,SWIGTYPE_p_inlib__net__sg_client); }  result = (bool)(arg1)->steer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_poll(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; bool result;
  SWIG_check_num_args("inlib::net::sg_client::poll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::poll",1,"inlib::net::sg_client *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_poll",1,SWIGTYPE_p_inlib__net__sg_client); }  result = (bool)(arg1)->poll();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_send_string(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; std::string *arg2 = 0 ; std::string temp2 ; bool result;
  SWIG_check_num_args("inlib::net::sg_client::send_string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::send_string",1,"inlib::net::sg_client *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::net::sg_client::send_string",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_send_string",1,SWIGTYPE_p_inlib__net__sg_client); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->send_string((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_net_sg_client_get_sg_serv_params(lua_State* L) { int SWIG_arg = 0;
  inlib::net::sg_client *arg1 = (inlib::net::sg_client *) 0 ; std::string *arg2 = 0 ; bool result;
  SWIG_check_num_args("inlib::net::sg_client::get_sg_serv_params",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::net::sg_client::get_sg_serv_params",1,"inlib::net::sg_client *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::net::sg_client::get_sg_serv_params",2,"std::string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__net__sg_client,0))){
    SWIG_fail_ptr("net_sg_client_get_sg_serv_params",1,SWIGTYPE_p_inlib__net__sg_client); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("net_sg_client_get_sg_serv_params",2,SWIGTYPE_p_std__string); } 
  result = (bool)(arg1)->get_sg_serv_params(*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_net_sg_client(void *obj) {
inlib::net::sg_client *arg1 = (inlib::net::sg_client *) obj;
delete arg1;
}
static int _proxy__wrap_new_net_sg_client(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_net_sg_client);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_net_sg_client_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_net_sg_client_methods[]= {
    { "is_connected", _wrap_net_sg_client_is_connected},
    { "socket", _wrap_net_sg_client_socket},
    { "out", _wrap_net_sg_client_out},
    { "initialize", _wrap_net_sg_client_initialize},
    { "steer", _wrap_net_sg_client_steer},
    { "poll", _wrap_net_sg_client_poll},
    { "send_string", _wrap_net_sg_client_send_string},
    { "get_sg_serv_params", _wrap_net_sg_client_get_sg_serv_params},
    {0,0}
};
static swig_lua_method swig_net_sg_client_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_net_sg_client_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_net_sg_client_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_net_sg_client_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_net_sg_client_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_net_sg_client_Sf_SwigStatic = {
    "net_sg_client",
    swig_net_sg_client_Sf_SwigStatic_methods,
    swig_net_sg_client_Sf_SwigStatic_attributes,
    swig_net_sg_client_Sf_SwigStatic_constants,
    swig_net_sg_client_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_net_sg_client_bases[] = {0};
static const char *swig_net_sg_client_base_names[] = {0};
static swig_lua_class _wrap_class_net_sg_client = { "net_sg_client", "net_sg_client", &SWIGTYPE_p_inlib__net__sg_client,_proxy__wrap_new_net_sg_client, swig_delete_net_sg_client, swig_net_sg_client_methods, swig_net_sg_client_attributes, &swig_net_sg_client_Sf_SwigStatic, swig_net_sg_client_meta, swig_net_sg_client_bases, swig_net_sg_client_base_names };

static int _wrap_sg_s_send_placement(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_send_placement",0,0) result = (std::string *) &inlib::sg::s_send_placement();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_placement_static(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_placement_static",0,0) result = (std::string *) &inlib::sg::s_placement_static();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_placement_dynamic(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_placement_dynamic",0,0) result = (std::string *) &inlib::sg::s_placement_dynamic();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_placement_screen(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_placement_screen",0,0) result = (std::string *) &inlib::sg::s_placement_screen();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_send_radius(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_send_radius",0,0) result = (std::string *) &inlib::sg::s_send_radius();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_send_scale(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_send_scale",0,0) result = (std::string *) &inlib::sg::s_send_scale();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_send_clear(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_send_clear",0,0) result = (std::string *) &inlib::sg::s_send_clear();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_start(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_start",0,0) result = (std::string *) &inlib::sg::s_protocol_start();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_disconnect(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_disconnect",0,0) result = (std::string *) &inlib::sg::s_protocol_disconnect();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_zdoc(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_zdoc",0,0) result = (std::string *) &inlib::sg::s_protocol_zdoc();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_arg_sep(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_arg_sep",0,0) result = (std::string *) &inlib::sg::s_protocol_arg_sep();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_clear_static_sg(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_clear_static_sg",0,0)
  result = (std::string *) &inlib::sg::s_protocol_clear_static_sg();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_clear_dynamic_sg(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_clear_dynamic_sg",0,0)
  result = (std::string *) &inlib::sg::s_protocol_clear_dynamic_sg();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_clear_screen_sg(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_clear_screen_sg",0,0)
  result = (std::string *) &inlib::sg::s_protocol_clear_screen_sg();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_view_all(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_view_all",0,0) result = (std::string *) &inlib::sg::s_protocol_view_all();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_set_background_black(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_set_background_black",0,0)
  result = (std::string *) &inlib::sg::s_protocol_set_background_black();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_set_background_white(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_set_background_white",0,0)
  result = (std::string *) &inlib::sg::s_protocol_set_background_white();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_disable_anim(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_disable_anim",0,0) result = (std::string *) &inlib::sg::s_protocol_disable_anim();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_s_protocol_reset_camera(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::s_protocol_reset_camera",0,0) result = (std::string *) &inlib::sg::s_protocol_reset_camera();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_res_dir(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::res_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::res_dir",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_res_dir",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (std::string *) &((inlib::sg::gui_viewer const *)arg1)->res_dir();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_doc_dir(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::doc_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::doc_dir",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_doc_dir",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (std::string *) &((inlib::sg::gui_viewer const *)arg1)->doc_dir();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_tmp_dir(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::tmp_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::tmp_dir",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_tmp_dir",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (std::string *) &((inlib::sg::gui_viewer const *)arg1)->tmp_dir();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_out_dir(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::out_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::out_dir",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_out_dir",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (std::string *) &((inlib::sg::gui_viewer const *)arg1)->out_dir();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_start_dir(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::start_dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::start_dir",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_start_dir",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (std::string *) &((inlib::sg::gui_viewer const *)arg1)->start_dir();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_opener(lua_State* L) { int SWIG_arg = 0; inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ;
  inlib::opener *result = 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::opener",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::opener",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_opener",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  result = (inlib::opener *) &(arg1)->opener();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__opener,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_show_console(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::show_console",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::show_console",1,"inlib::sg::gui_viewer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::show_console",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_show_console",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->show_console((std::string const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_hide_console(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::hide_console",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::hide_console",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_hide_console",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->hide_console(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_console_size__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_console_size",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_console_size",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set_console_size(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_console_size__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_console_size",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_console_size",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set_console_size(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_set_console_size__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_console_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_console_size",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set_console_size(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_console_size__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::set_console_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_console_size",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_console_size",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->set_console_size();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_console_size(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_set_console_size__SWIG_3(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_gui_viewer_set_console_size__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_gui_viewer_set_console_size__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_gui_viewer_set_console_size__SWIG_0(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'gui_viewer_set_console_size'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::gui_viewer::set_console_size(float,float,float)\n"
  "    inlib::sg::gui_viewer::set_console_size(float,float)\n" "    inlib::sg::gui_viewer::set_console_size(float)\n"
  "    inlib::sg::gui_viewer::set_console_size()\n"); lua_error(L);return 0; }
static int _wrap_gui_viewer_hide_main_menu(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::hide_main_menu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::hide_main_menu",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_hide_main_menu",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->hide_main_menu(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_show_main_menu(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::show_main_menu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::show_main_menu",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_show_main_menu",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->show_main_menu(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_hide_camera_menu(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::hide_camera_menu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::hide_camera_menu",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_hide_camera_menu",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->hide_camera_menu();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_show_camera_menu(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::show_camera_menu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::show_camera_menu",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_show_camera_menu",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->show_camera_menu();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_adapt_camera_to_scene(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; bool result;
  SWIG_check_num_args("inlib::sg::gui_viewer::adapt_camera_to_scene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::adapt_camera_to_scene",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_adapt_camera_to_scene",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (bool)(arg1)->adapt_camera_to_scene(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_view_all(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::view_all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::view_all",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_view_all",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->view_all(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_light_on(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; bool arg2 ; bool result;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_light_on",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_light_on",1,"inlib::sg::gui_viewer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_light_on",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_light_on",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->set_scene_light_on(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_blend_on(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; bool arg2 ; bool result;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_blend_on",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_blend_on",1,"inlib::sg::gui_viewer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_blend_on",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_blend_on",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->set_scene_blend_on(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_toggle_light(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::toggle_light",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::toggle_light",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_toggle_light",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->toggle_light(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_plane_viewer(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; bool arg2 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_plane_viewer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_plane_viewer",1,"inlib::sg::gui_viewer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_plane_viewer",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_plane_viewer",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->set_plane_viewer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_hide_meta_zone(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::hide_meta_zone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::hide_meta_zone",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_hide_meta_zone",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->hide_meta_zone(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_clear_color__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::colorf *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_clear_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",2,"inlib::colorf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_clear_color",2,SWIGTYPE_p_inlib__colorf); } 
  (arg1)->set_scene_clear_color((inlib::colorf const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_clear_color__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_clear_color",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set_scene_clear_color(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_clear_color__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_clear_color",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_clear_color",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set_scene_clear_color(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_clear_color(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__colorf, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_set_scene_clear_color__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_gui_viewer_set_scene_clear_color__SWIG_2(L);}  }  }
       }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_gui_viewer_set_scene_clear_color__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'gui_viewer_set_scene_clear_color'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::gui_viewer::set_scene_clear_color(inlib::colorf const &)\n"
  "    inlib::sg::gui_viewer::set_scene_clear_color(float,float,float,float)\n"
  "    inlib::sg::gui_viewer::set_scene_clear_color(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_gui_viewer_set_gui_clear_color__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::colorf *arg2 = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_gui_clear_color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",2,"inlib::colorf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_gui_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__colorf,0))){
    SWIG_fail_ptr("gui_viewer_set_gui_clear_color",2,SWIGTYPE_p_inlib__colorf); } 
  (arg1)->set_gui_clear_color((inlib::colorf const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_set_gui_clear_color__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_gui_clear_color",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_gui_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set_gui_clear_color(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_gui_clear_color__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_gui_clear_color",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",1,"inlib::sg::gui_viewer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("inlib::sg::gui_viewer::set_gui_clear_color",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_gui_clear_color",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set_gui_clear_color(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_gui_clear_color(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__colorf, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_set_gui_clear_color__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_gui_viewer_set_gui_clear_color__SWIG_2(L);}  }  }  }
     }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_gui_viewer_set_gui_clear_color__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'gui_viewer_set_gui_clear_color'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::sg::gui_viewer::set_gui_clear_color(inlib::colorf const &)\n"
  "    inlib::sg::gui_viewer::set_gui_clear_color(float,float,float,float)\n"
  "    inlib::sg::gui_viewer::set_gui_clear_color(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_gui_viewer_reset_camera(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; SWIG_check_num_args("inlib::sg::gui_viewer::reset_camera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::reset_camera",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_reset_camera",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  (arg1)->reset_camera(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_scene__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::sg::selection *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::scene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::scene",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_scene",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (inlib::sg::selection *) &((inlib::sg::gui_viewer const *)arg1)->scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__selection,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_scene__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::sg::selection *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::scene",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::scene",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_scene",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  result = (inlib::sg::selection *) &(arg1)->scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__selection,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_scene(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_scene__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_scene__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'gui_viewer_scene'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::gui_viewer::scene() const\n" "    inlib::sg::gui_viewer::scene()\n"); lua_error(L);return 0; }
static int _wrap_gui_viewer_styles__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::xml::styles *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::styles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::styles",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_styles",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (inlib::xml::styles *) &((inlib::sg::gui_viewer const *)arg1)->styles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__xml__styles,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_styles__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::xml::styles *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::styles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::styles",1,"inlib::sg::gui_viewer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_styles",1,SWIGTYPE_p_inlib__sg__gui_viewer); }  result = (inlib::xml::styles *) &(arg1)->styles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__xml__styles,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_styles(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_styles__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_gui_viewer_styles__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'gui_viewer_styles'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::gui_viewer::styles() const\n" "    inlib::sg::gui_viewer::styles()\n"); lua_error(L);return 0; }
static int _wrap_gui_viewer_set_scene_camera(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::sg::base_camera *arg2 = (inlib::sg::base_camera *) 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_camera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_camera",1,"inlib::sg::gui_viewer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_camera",2,"inlib::sg::base_camera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_camera",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__base_camera,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_camera",2,SWIGTYPE_p_inlib__sg__base_camera); }  (arg1)->set_scene_camera(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_scene_camera(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::sg::base_camera *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::scene_camera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::scene_camera",1,"inlib::sg::gui_viewer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_scene_camera",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (inlib::sg::base_camera *)((inlib::sg::gui_viewer const *)arg1)->scene_camera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__base_camera,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_set_scene_light(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; inlib::sg::torche *arg2 = (inlib::sg::torche *) 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::set_scene_light",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_light",1,"inlib::sg::gui_viewer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::set_scene_light",2,"inlib::sg::torche *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_light",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__sg__torche,0))){
    SWIG_fail_ptr("gui_viewer_set_scene_light",2,SWIGTYPE_p_inlib__sg__torche); }  (arg1)->set_scene_light(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_gui_viewer_s_default(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("inlib::sg::gui_viewer::s_default",0,0) result = (std::string *) &inlib::sg::gui_viewer::s_default();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_gui_viewer_find_file(lua_State* L) { int SWIG_arg = 0;
  inlib::sg::gui_viewer *arg1 = (inlib::sg::gui_viewer *) 0 ; std::string *arg2 = 0 ; inlib::std_string *arg3 = 0 ;
  std::string temp2 ; bool result; SWIG_check_num_args("inlib::sg::gui_viewer::find_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::sg::gui_viewer::find_file",1,"inlib::sg::gui_viewer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::gui_viewer::find_file",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::sg::gui_viewer::find_file",3,"inlib::std_string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("gui_viewer_find_file",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__std_string,0))){
    SWIG_fail_ptr("gui_viewer_find_file",3,SWIGTYPE_p_inlib__std_string); } 
  result = (bool)inlib_sg_gui_viewer_find_file(arg1,(std::string const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static swig_lua_attribute swig_gui_viewer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gui_viewer_methods[]= {
    { "res_dir", _wrap_gui_viewer_res_dir},
    { "doc_dir", _wrap_gui_viewer_doc_dir},
    { "tmp_dir", _wrap_gui_viewer_tmp_dir},
    { "out_dir", _wrap_gui_viewer_out_dir},
    { "start_dir", _wrap_gui_viewer_start_dir},
    { "opener", _wrap_gui_viewer_opener},
    { "show_console", _wrap_gui_viewer_show_console},
    { "hide_console", _wrap_gui_viewer_hide_console},
    { "set_console_size", _wrap_gui_viewer_set_console_size},
    { "hide_main_menu", _wrap_gui_viewer_hide_main_menu},
    { "show_main_menu", _wrap_gui_viewer_show_main_menu},
    { "hide_camera_menu", _wrap_gui_viewer_hide_camera_menu},
    { "show_camera_menu", _wrap_gui_viewer_show_camera_menu},
    { "adapt_camera_to_scene", _wrap_gui_viewer_adapt_camera_to_scene},
    { "view_all", _wrap_gui_viewer_view_all},
    { "set_scene_light_on", _wrap_gui_viewer_set_scene_light_on},
    { "set_scene_blend_on", _wrap_gui_viewer_set_scene_blend_on},
    { "toggle_light", _wrap_gui_viewer_toggle_light},
    { "set_plane_viewer", _wrap_gui_viewer_set_plane_viewer},
    { "hide_meta_zone", _wrap_gui_viewer_hide_meta_zone},
    { "set_scene_clear_color", _wrap_gui_viewer_set_scene_clear_color},
    { "set_gui_clear_color", _wrap_gui_viewer_set_gui_clear_color},
    { "reset_camera", _wrap_gui_viewer_reset_camera},
    { "scene", _wrap_gui_viewer_scene},
    { "styles", _wrap_gui_viewer_styles},
    { "set_scene_camera", _wrap_gui_viewer_set_scene_camera},
    { "scene_camera", _wrap_gui_viewer_scene_camera},
    { "set_scene_light", _wrap_gui_viewer_set_scene_light},
    { "find_file", _wrap_gui_viewer_find_file},
    {0,0}
};
static swig_lua_method swig_gui_viewer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gui_viewer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gui_viewer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gui_viewer_Sf_SwigStatic_methods[]= {
    { "s_default", _wrap_gui_viewer_s_default},
    {0,0}
};
static swig_lua_class* swig_gui_viewer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gui_viewer_Sf_SwigStatic = {
    "gui_viewer",
    swig_gui_viewer_Sf_SwigStatic_methods,
    swig_gui_viewer_Sf_SwigStatic_attributes,
    swig_gui_viewer_Sf_SwigStatic_constants,
    swig_gui_viewer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gui_viewer_bases[] = {0,0};
static const char *swig_gui_viewer_base_names[] = {"inlib::sg::viewer *",0};
static swig_lua_class _wrap_class_gui_viewer = { "gui_viewer", "gui_viewer", &SWIGTYPE_p_inlib__sg__gui_viewer,0,0, swig_gui_viewer_methods, swig_gui_viewer_attributes, &swig_gui_viewer_Sf_SwigStatic, swig_gui_viewer_meta, swig_gui_viewer_bases, swig_gui_viewer_base_names };

static int _wrap_cast_gui_viewer(lua_State* L) { int SWIG_arg = 0; inlib::sg::viewer *arg1 = 0 ;
  inlib::sg::gui_viewer *result = 0 ; SWIG_check_num_args("inlib::sg::cast_gui_viewer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::cast_gui_viewer",1,"inlib::sg::viewer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__viewer,0))){
    SWIG_fail_ptr("cast_gui_viewer",1,SWIGTYPE_p_inlib__sg__viewer); } 
  result = (inlib::sg::gui_viewer *)inlib::sg::cast_gui_viewer(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__gui_viewer,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_sg_style_from_res__SWIG_0(lua_State* L) { int SWIG_arg = 0; inlib::xml::styles *arg1 = 0 ;
  std::string *arg2 = 0 ; inlib::sg::plotter *arg3 = 0 ; bool arg4 ; std::string temp2 ;
  SWIG_check_num_args("inlib::sg::style_from_res",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::style_from_res",1,"inlib::xml::styles const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::style_from_res",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::sg::style_from_res",3,"inlib::sg::plotter &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("inlib::sg::style_from_res",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__xml__styles,0))){
    SWIG_fail_ptr("sg_style_from_res",1,SWIGTYPE_p_inlib__xml__styles); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_style_from_res",3,SWIGTYPE_p_inlib__sg__plotter); }  arg4 = (lua_toboolean(L, 4)!=0);
  inlib::sg::style_from_res((inlib::xml::styles const &)*arg1,(std::string const &)*arg2,*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_get_sg_plots(lua_State* L) { int SWIG_arg = 0; inlib::sg::gui_viewer *arg1 = 0 ; inlib::sg::plots *result = 0 ;
  SWIG_check_num_args("inlib::sg::get_sg_plots",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::get_sg_plots",1,"inlib::sg::gui_viewer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("get_sg_plots",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  result = (inlib::sg::plots *)inlib::sg::get_sg_plots(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__sg__plots,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_sg_style_from_res__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::sg::gui_viewer *arg1 = 0 ;
  std::string *arg2 = 0 ; inlib::sg::plotter *arg3 = 0 ; std::string temp2 ;
  SWIG_check_num_args("inlib::sg::style_from_res",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::sg::style_from_res",1,"inlib::sg::gui_viewer const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::sg::style_from_res",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::sg::style_from_res",3,"inlib::sg::plotter &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__sg__gui_viewer,0))){
    SWIG_fail_ptr("sg_style_from_res",1,SWIGTYPE_p_inlib__sg__gui_viewer); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__sg__plotter,0))){
    SWIG_fail_ptr("sg_style_from_res",3,SWIGTYPE_p_inlib__sg__plotter); } 
  inlib::sg::style_from_res((inlib::sg::gui_viewer const &)*arg1,(std::string const &)*arg2,*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sg_style_from_res(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__sg__gui_viewer, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_sg_style_from_res__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__xml__styles, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_inlib__sg__plotter, SWIG_POINTER_NO_NULL)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) {
            return _wrap_sg_style_from_res__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sg_style_from_res'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::sg::style_from_res(inlib::xml::styles const &,std::string const &,inlib::sg::plotter &,bool)\n"
  "    inlib::sg::style_from_res(inlib::sg::gui_viewer const &,std::string const &,inlib::sg::plotter &)\n");
  lua_error(L);return 0; }
static int _wrap_new_waxml_file(lua_State* L) { int SWIG_arg = 0; inlib::waxml::file *result = 0 ;
  SWIG_check_num_args("inlib::waxml::file::file",0,0) result = (inlib::waxml::file *)new inlib::waxml::file();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__waxml__file,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_open(lua_State* L) { int SWIG_arg = 0; inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; bool result; SWIG_check_num_args("inlib::waxml::file::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::open",1,"inlib::waxml::file *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::waxml::file::open",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_open",1,SWIGTYPE_p_inlib__waxml__file); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->open((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_close(lua_State* L) { int SWIG_arg = 0; inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ;
  bool result; SWIG_check_num_args("inlib::waxml::file::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::close",1,"inlib::waxml::file *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_close",1,SWIGTYPE_p_inlib__waxml__file); }  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ; inlib::histo::h1d *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp3 ; std::string temp4 ; bool result;
  SWIG_check_num_args("inlib::waxml::file::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::write",1,"inlib::waxml::file *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::waxml::file::write",2,"inlib::histo::h1d const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::waxml::file::write",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("inlib::waxml::file::write",4,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_write",1,SWIGTYPE_p_inlib__waxml__file); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h1d,0))){
    SWIG_fail_ptr("waxml_file_write",2,SWIGTYPE_p_inlib__histo__h1d); } 
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (bool)(arg1)->write((inlib::histo::h1d const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ; inlib::histo::h2d *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp3 ; std::string temp4 ; bool result;
  SWIG_check_num_args("inlib::waxml::file::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::write",1,"inlib::waxml::file *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::waxml::file::write",2,"inlib::histo::h2d const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::waxml::file::write",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("inlib::waxml::file::write",4,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_write",1,SWIGTYPE_p_inlib__waxml__file); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h2d,0))){
    SWIG_fail_ptr("waxml_file_write",2,SWIGTYPE_p_inlib__histo__h2d); } 
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (bool)(arg1)->write((inlib::histo::h2d const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ; inlib::histo::h3d *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp3 ; std::string temp4 ; bool result;
  SWIG_check_num_args("inlib::waxml::file::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::write",1,"inlib::waxml::file *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::waxml::file::write",2,"inlib::histo::h3d const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::waxml::file::write",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("inlib::waxml::file::write",4,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_write",1,SWIGTYPE_p_inlib__waxml__file); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__h3d,0))){
    SWIG_fail_ptr("waxml_file_write",2,SWIGTYPE_p_inlib__histo__h3d); } 
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (bool)(arg1)->write((inlib::histo::h3d const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ; inlib::histo::p1d *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp3 ; std::string temp4 ; bool result;
  SWIG_check_num_args("inlib::waxml::file::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::write",1,"inlib::waxml::file *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::waxml::file::write",2,"inlib::histo::p1d const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::waxml::file::write",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("inlib::waxml::file::write",4,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_write",1,SWIGTYPE_p_inlib__waxml__file); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__p1d,0))){
    SWIG_fail_ptr("waxml_file_write",2,SWIGTYPE_p_inlib__histo__p1d); } 
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (bool)(arg1)->write((inlib::histo::p1d const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  inlib::waxml::file *arg1 = (inlib::waxml::file *) 0 ; inlib::histo::p2d *arg2 = 0 ; std::string *arg3 = 0 ;
  std::string *arg4 = 0 ; std::string temp3 ; std::string temp4 ; bool result;
  SWIG_check_num_args("inlib::waxml::file::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::waxml::file::write",1,"inlib::waxml::file *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::waxml::file::write",2,"inlib::histo::p2d const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("inlib::waxml::file::write",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("inlib::waxml::file::write",4,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__waxml__file,0))){
    SWIG_fail_ptr("waxml_file_write",1,SWIGTYPE_p_inlib__waxml__file); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__histo__p2d,0))){
    SWIG_fail_ptr("waxml_file_write",2,SWIGTYPE_p_inlib__histo__p2d); } 
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (bool)(arg1)->write((inlib::histo::p2d const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_waxml_file_write(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__waxml__file, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_waxml_file_write__SWIG_0(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__waxml__file, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_waxml_file_write__SWIG_1(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__waxml__file, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__h3d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_waxml_file_write__SWIG_2(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__waxml__file, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__p1d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_waxml_file_write__SWIG_3(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__waxml__file, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__histo__p2d, SWIG_POINTER_NO_NULL)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_waxml_file_write__SWIG_4(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'waxml_file_write'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::waxml::file::write(inlib::histo::h1d const &,std::string const &,std::string const &)\n"
  "    inlib::waxml::file::write(inlib::histo::h2d const &,std::string const &,std::string const &)\n"
  "    inlib::waxml::file::write(inlib::histo::h3d const &,std::string const &,std::string const &)\n"
  "    inlib::waxml::file::write(inlib::histo::p1d const &,std::string const &,std::string const &)\n"
  "    inlib::waxml::file::write(inlib::histo::p2d const &,std::string const &,std::string const &)\n"); lua_error(L);return 0; }
static void swig_delete_waxml_file(void *obj) {
inlib::waxml::file *arg1 = (inlib::waxml::file *) obj;
delete arg1;
}
static int _proxy__wrap_new_waxml_file(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_waxml_file);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_waxml_file_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_waxml_file_methods[]= {
    { "open", _wrap_waxml_file_open},
    { "close", _wrap_waxml_file_close},
    { "write", _wrap_waxml_file_write},
    {0,0}
};
static swig_lua_method swig_waxml_file_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_waxml_file_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_waxml_file_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_waxml_file_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_waxml_file_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_waxml_file_Sf_SwigStatic = {
    "waxml_file",
    swig_waxml_file_Sf_SwigStatic_methods,
    swig_waxml_file_Sf_SwigStatic_attributes,
    swig_waxml_file_Sf_SwigStatic_constants,
    swig_waxml_file_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_waxml_file_bases[] = {0};
static const char *swig_waxml_file_base_names[] = {0};
static swig_lua_class _wrap_class_waxml_file = { "waxml_file", "waxml_file", &SWIGTYPE_p_inlib__waxml__file,_proxy__wrap_new_waxml_file, swig_delete_waxml_file, swig_waxml_file_methods, swig_waxml_file_attributes, &swig_waxml_file_Sf_SwigStatic, swig_waxml_file_meta, swig_waxml_file_bases, swig_waxml_file_base_names };

static swig_lua_attribute swig_ifile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ifile_methods[]= {
    {0,0}
};
static swig_lua_method swig_ifile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ifile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ifile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ifile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ifile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ifile_Sf_SwigStatic = {
    "ifile",
    swig_ifile_Sf_SwigStatic_methods,
    swig_ifile_Sf_SwigStatic_attributes,
    swig_ifile_Sf_SwigStatic_constants,
    swig_ifile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ifile_bases[] = {0};
static const char *swig_ifile_base_names[] = {0};
static swig_lua_class _wrap_class_ifile = { "ifile", "ifile", &SWIGTYPE_p_inlib__rroot__ifile,0,0, swig_ifile_methods, swig_ifile_attributes, &swig_ifile_Sf_SwigStatic, swig_ifile_meta, swig_ifile_bases, swig_ifile_base_names };

static int _wrap_new_key(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::key *result = 0 ;
  SWIG_check_num_args("inlib::rroot::key::key",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::key::key",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_key",1,SWIGTYPE_p_std__ostream); }  result = (inlib::rroot::key *)new inlib::rroot::key(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__key,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_key(void *obj) {
inlib::rroot::key *arg1 = (inlib::rroot::key *) obj;
delete arg1;
}
static int _proxy__wrap_new_key(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_key);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_key_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_key_methods[]= {
    {0,0}
};
static swig_lua_method swig_key_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_key_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_key_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_key_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_key_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_key_Sf_SwigStatic = {
    "key",
    swig_key_Sf_SwigStatic_methods,
    swig_key_Sf_SwigStatic_attributes,
    swig_key_Sf_SwigStatic_constants,
    swig_key_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_key_bases[] = {0};
static const char *swig_key_base_names[] = {0};
static swig_lua_class _wrap_class_key = { "key", "key", &SWIGTYPE_p_inlib__rroot__key,_proxy__wrap_new_key, swig_delete_key, swig_key_methods, swig_key_attributes, &swig_key_Sf_SwigStatic, swig_key_meta, swig_key_bases, swig_key_base_names };

static swig_lua_attribute swig_ifac_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ifac_methods[]= {
    {0,0}
};
static swig_lua_method swig_ifac_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ifac_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ifac_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ifac_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ifac_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ifac_Sf_SwigStatic = {
    "ifac",
    swig_ifac_Sf_SwigStatic_methods,
    swig_ifac_Sf_SwigStatic_attributes,
    swig_ifac_Sf_SwigStatic_constants,
    swig_ifac_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ifac_bases[] = {0};
static const char *swig_ifac_base_names[] = {0};
static swig_lua_class _wrap_class_ifac = { "ifac", "ifac", &SWIGTYPE_p_inlib__rroot__ifac,0,0, swig_ifac_methods, swig_ifac_attributes, &swig_ifac_Sf_SwigStatic, swig_ifac_meta, swig_ifac_bases, swig_ifac_base_names };

static int _wrap_new_rroot_fac__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ;
  inlib::rroot::fac *result = 0 ; SWIG_check_num_args("inlib::rroot::fac::fac",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::fac::fac",1,"std::ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_rroot_fac",1,SWIGTYPE_p_std__ostream); }  result = (inlib::rroot::fac *)new inlib::rroot::fac(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__fac,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_rroot_fac__SWIG_1(lua_State* L) { int SWIG_arg = 0; inlib::rroot::fac *arg1 = 0 ;
  inlib::rroot::fac *result = 0 ; SWIG_check_num_args("inlib::rroot::fac::fac",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::fac::fac",1,"inlib::rroot::fac const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__fac,0))){
    SWIG_fail_ptr("new_rroot_fac",1,SWIGTYPE_p_inlib__rroot__fac); } 
  result = (inlib::rroot::fac *)new inlib::rroot::fac((inlib::rroot::fac const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__fac,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_rroot_fac(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rroot_fac__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__fac, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_rroot_fac__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rroot_fac'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rroot::fac::fac(std::ostream &)\n" "    inlib::rroot::fac::fac(inlib::rroot::fac const &)\n");
  lua_error(L);return 0; }
static void swig_delete_rroot_fac(void *obj) {
inlib::rroot::fac *arg1 = (inlib::rroot::fac *) obj;
delete arg1;
}
static int _proxy__wrap_new_rroot_fac(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rroot_fac);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_fac_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_fac_methods[]= {
    {0,0}
};
static swig_lua_method swig_rroot_fac_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_fac_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_fac_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_fac_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_fac_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_fac_Sf_SwigStatic = {
    "rroot_fac",
    swig_rroot_fac_Sf_SwigStatic_methods,
    swig_rroot_fac_Sf_SwigStatic_attributes,
    swig_rroot_fac_Sf_SwigStatic_constants,
    swig_rroot_fac_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_fac_bases[] = {0,0};
static const char *swig_rroot_fac_base_names[] = {"inlib::rroot::ifac *",0};
static swig_lua_class _wrap_class_rroot_fac = { "rroot_fac", "rroot_fac", &SWIGTYPE_p_inlib__rroot__fac,_proxy__wrap_new_rroot_fac, swig_delete_rroot_fac, swig_rroot_fac_methods, swig_rroot_fac_attributes, &swig_rroot_fac_Sf_SwigStatic, swig_rroot_fac_meta, swig_rroot_fac_bases, swig_rroot_fac_base_names };

static int _wrap_new_std_vector_keys__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< inlib::rroot::key * > *result = 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::vector",0,0)
  result = (std::vector< inlib::rroot::key * > *)new std::vector< inlib::rroot::key * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_keys__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< inlib::rroot::key * > *result = 0 ; SWIG_check_num_args("std::vector< inlib::rroot::key * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< inlib::rroot::key * > *)new std::vector< inlib::rroot::key * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_keys__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< inlib::rroot::key * > *arg1 = 0 ;
  std::vector< inlib::rroot::key * > *result = 0 ; SWIG_check_num_args("std::vector< inlib::rroot::key * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::vector",1,"std::vector< inlib::rroot::key * > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("new_std_vector_keys",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (std::vector< inlib::rroot::key * > *)new std::vector< inlib::rroot::key * >((std::vector< inlib::rroot::key * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_keys__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  inlib::rroot::key *arg2 = (inlib::rroot::key *) 0 ; std::vector< inlib::rroot::key * > *result = 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::vector",2,"inlib::rroot::key *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__key,0))){
    SWIG_fail_ptr("new_std_vector_keys",2,SWIGTYPE_p_inlib__rroot__key); } 
  result = (std::vector< inlib::rroot::key * > *)new std::vector< inlib::rroot::key * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_std_vector_keys(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_std_vector_keys__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t, SWIG_POINTER_NO_NULL)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_keys__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_std_vector_keys__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_inlib__rroot__key, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_std_vector_keys__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_std_vector_keys'\n"
  "  Possible C/C++ prototypes are:\n" "    std::vector< inlib::rroot::key * >::vector()\n"
  "    std::vector< inlib::rroot::key * >::vector(unsigned int)\n"
  "    std::vector< inlib::rroot::key * >::vector(std::vector< inlib::rroot::key * > const &)\n"
  "    std::vector< inlib::rroot::key * >::vector(unsigned int,inlib::rroot::key *)\n"); lua_error(L);return 0; }
static int _wrap_std_vector_keys_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::size",1,"std::vector< inlib::rroot::key * > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_size",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (unsigned int)((std::vector< inlib::rroot::key * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::max_size",1,"std::vector< inlib::rroot::key * > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_max_size",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (unsigned int)((std::vector< inlib::rroot::key * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; bool result;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::empty",1,"std::vector< inlib::rroot::key * > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_empty",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (bool)((std::vector< inlib::rroot::key * > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::clear",1,"std::vector< inlib::rroot::key * > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_clear",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ;
  inlib::rroot::key *arg2 = (inlib::rroot::key *) 0 ; SWIG_check_num_args("std::vector< inlib::rroot::key * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::push_back",1,"std::vector< inlib::rroot::key * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::push_back",2,"inlib::rroot::key *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_push_back",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__key,0))){
    SWIG_fail_ptr("std_vector_keys_push_back",2,SWIGTYPE_p_inlib__rroot__key); }  (arg1)->push_back(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::pop_back",1,"std::vector< inlib::rroot::key * > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_pop_back",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); }  (arg1)->pop_back();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; inlib::rroot::key *result = 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::front",1,"std::vector< inlib::rroot::key * > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_front",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (inlib::rroot::key *)((std::vector< inlib::rroot::key * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__key,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; inlib::rroot::key *result = 0 ;
  SWIG_check_num_args("std::vector< inlib::rroot::key * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::back",1,"std::vector< inlib::rroot::key * > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys_back",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  result = (inlib::rroot::key *)((std::vector< inlib::rroot::key * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__key,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; unsigned int arg2 ;
  inlib::rroot::key *result = 0 ; SWIG_check_num_args("std::vector< inlib::rroot::key * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::__getitem__",1,"std::vector< inlib::rroot::key * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys___getitem",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (inlib::rroot::key *)std_vector_Sl_inlib_rroot_key_Sm__Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__key,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_std_vector_keys___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) 0 ; unsigned int arg2 ;
  inlib::rroot::key *arg3 = (inlib::rroot::key *) 0 ; SWIG_check_num_args("std::vector< inlib::rroot::key * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::__setitem__",1,"std::vector< inlib::rroot::key * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< inlib::rroot::key * >::__setitem__",3,"inlib::rroot::key *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("std_vector_keys___setitem",1,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__rroot__key,0))){
    SWIG_fail_ptr("std_vector_keys___setitem",3,SWIGTYPE_p_inlib__rroot__key); }  try {
    std_vector_Sl_inlib_rroot_key_Sm__Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_std_vector_keys(void *obj) {
std::vector< inlib::rroot::key * > *arg1 = (std::vector< inlib::rroot::key * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_std_vector_keys(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_std_vector_keys);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_std_vector_keys_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_keys_methods[]= {
    { "size", _wrap_std_vector_keys_size},
    { "max_size", _wrap_std_vector_keys_max_size},
    { "empty", _wrap_std_vector_keys_empty},
    { "clear", _wrap_std_vector_keys_clear},
    { "push_back", _wrap_std_vector_keys_push_back},
    { "pop_back", _wrap_std_vector_keys_pop_back},
    { "front", _wrap_std_vector_keys_front},
    { "back", _wrap_std_vector_keys_back},
    { "__getitem", _wrap_std_vector_keys___getitem},
    { "__setitem", _wrap_std_vector_keys___setitem},
    {0,0}
};
static swig_lua_method swig_std_vector_keys_meta[] = {
    { "__getitem", _wrap_std_vector_keys___getitem},
    { "__setitem", _wrap_std_vector_keys___setitem},
    {0,0}
};

static swig_lua_attribute swig_std_vector_keys_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_std_vector_keys_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_std_vector_keys_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_std_vector_keys_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_std_vector_keys_Sf_SwigStatic = {
    "std_vector_keys",
    swig_std_vector_keys_Sf_SwigStatic_methods,
    swig_std_vector_keys_Sf_SwigStatic_attributes,
    swig_std_vector_keys_Sf_SwigStatic_constants,
    swig_std_vector_keys_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_std_vector_keys_bases[] = {0};
static const char *swig_std_vector_keys_base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_keys = { "std_vector_keys", "std_vector_keys", &SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,_proxy__wrap_new_std_vector_keys, swig_delete_std_vector_keys, swig_std_vector_keys_methods, swig_std_vector_keys_attributes, &swig_std_vector_keys_Sf_SwigStatic, swig_std_vector_keys_meta, swig_std_vector_keys_bases, swig_std_vector_keys_base_names };

static int _wrap_new_directory(lua_State* L) { int SWIG_arg = 0; inlib::rroot::ifile *arg1 = 0 ;
  inlib::rroot::directory *result = 0 ; SWIG_check_num_args("inlib::rroot::directory::directory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::directory::directory",1,"inlib::rroot::ifile &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("new_directory",1,SWIGTYPE_p_inlib__rroot__ifile); } 
  result = (inlib::rroot::directory *)new inlib::rroot::directory(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__directory,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_directory_find_key(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::directory *arg1 = (inlib::rroot::directory *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  inlib::rroot::key *result = 0 ; SWIG_check_num_args("inlib::rroot::directory::find_key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::directory::find_key",1,"inlib::rroot::directory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::directory::find_key",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__directory,0))){
    SWIG_fail_ptr("directory_find_key",1,SWIGTYPE_p_inlib__rroot__directory); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (inlib::rroot::key *)(arg1)->find_key((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__key,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_directory_keys__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::directory *arg1 = (inlib::rroot::directory *) 0 ; std::vector< inlib::rroot::key * > *result = 0 ;
  SWIG_check_num_args("inlib::rroot::directory::keys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::directory::keys",1,"inlib::rroot::directory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__directory,0))){
    SWIG_fail_ptr("directory_keys",1,SWIGTYPE_p_inlib__rroot__directory); } 
  result = (std::vector< inlib::rroot::key * > *) &((inlib::rroot::directory const *)arg1)->keys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_directory_keys__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::directory *arg1 = (inlib::rroot::directory *) 0 ; std::vector< inlib::rroot::key * > *result = 0 ;
  SWIG_check_num_args("inlib::rroot::directory::keys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::directory::keys",1,"inlib::rroot::directory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__directory,0))){
    SWIG_fail_ptr("directory_keys",1,SWIGTYPE_p_inlib__rroot__directory); } 
  result = (std::vector< inlib::rroot::key * > *) &(arg1)->keys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_directory_keys(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__directory, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_directory_keys__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__directory, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_directory_keys__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'directory_keys'\n" "  Possible C/C++ prototypes are:\n"
  "    inlib::rroot::directory::keys() const\n" "    inlib::rroot::directory::keys()\n"); lua_error(L);return 0; }
static void swig_delete_directory(void *obj) {
inlib::rroot::directory *arg1 = (inlib::rroot::directory *) obj;
delete arg1;
}
static int _proxy__wrap_new_directory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_directory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_directory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_directory_methods[]= {
    { "find_key", _wrap_directory_find_key},
    { "keys", _wrap_directory_keys},
    {0,0}
};
static swig_lua_method swig_directory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_directory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_directory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_directory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_directory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_directory_Sf_SwigStatic = {
    "directory",
    swig_directory_Sf_SwigStatic_methods,
    swig_directory_Sf_SwigStatic_attributes,
    swig_directory_Sf_SwigStatic_constants,
    swig_directory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_directory_bases[] = {0};
static const char *swig_directory_base_names[] = {0};
static swig_lua_class _wrap_class_directory = { "directory", "directory", &SWIGTYPE_p_inlib__rroot__directory,_proxy__wrap_new_directory, swig_delete_directory, swig_directory_methods, swig_directory_attributes, &swig_directory_Sf_SwigStatic, swig_directory_meta, swig_directory_bases, swig_directory_base_names };

static int _wrap_new_rroot_file(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; std::string *arg2 = 0 ; bool arg3 ;
  std::string temp2 ; inlib::rroot::file *result = 0 ; SWIG_check_num_args("inlib::rroot::file::file",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::file::file",1,"std::ostream &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::file::file",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("inlib::rroot::file::file",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_rroot_file",1,SWIGTYPE_p_std__ostream); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0); result = (inlib::rroot::file *)new inlib::rroot::file(*arg1,(std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__file,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_file_is_open(lua_State* L) { int SWIG_arg = 0; inlib::rroot::file *arg1 = (inlib::rroot::file *) 0 ;
  bool result; SWIG_check_num_args("inlib::rroot::file::is_open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::file::is_open",1,"inlib::rroot::file const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__file,0))){
    SWIG_fail_ptr("rroot_file_is_open",1,SWIGTYPE_p_inlib__rroot__file); } 
  result = (bool)((inlib::rroot::file const *)arg1)->is_open(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rroot_file_close(lua_State* L) { int SWIG_arg = 0; inlib::rroot::file *arg1 = (inlib::rroot::file *) 0 ;
  SWIG_check_num_args("inlib::rroot::file::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::file::close",1,"inlib::rroot::file *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__file,0))){
    SWIG_fail_ptr("rroot_file_close",1,SWIGTYPE_p_inlib__rroot__file); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_rroot_file_dir(lua_State* L) { int SWIG_arg = 0; inlib::rroot::file *arg1 = (inlib::rroot::file *) 0 ;
  inlib::rroot::directory *result = 0 ; SWIG_check_num_args("inlib::rroot::file::dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::file::dir",1,"inlib::rroot::file *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__file,0))){
    SWIG_fail_ptr("rroot_file_dir",1,SWIGTYPE_p_inlib__rroot__file); }  result = (inlib::rroot::directory *) &(arg1)->dir();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__directory,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_file(void *obj) {
inlib::rroot::file *arg1 = (inlib::rroot::file *) obj;
delete arg1;
}
static int _proxy__wrap_new_rroot_file(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rroot_file);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_file_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_file_methods[]= {
    { "is_open", _wrap_rroot_file_is_open},
    { "close", _wrap_rroot_file_close},
    { "dir", _wrap_rroot_file_dir},
    {0,0}
};
static swig_lua_method swig_rroot_file_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_file_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_file_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_file_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_file_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_file_Sf_SwigStatic = {
    "rroot_file",
    swig_rroot_file_Sf_SwigStatic_methods,
    swig_rroot_file_Sf_SwigStatic_attributes,
    swig_rroot_file_Sf_SwigStatic_constants,
    swig_rroot_file_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_file_bases[] = {0,0};
static const char *swig_rroot_file_base_names[] = {"inlib::rroot::ifile *",0};
static swig_lua_class _wrap_class_rroot_file = { "rroot_file", "rroot_file", &SWIGTYPE_p_inlib__rroot__file,_proxy__wrap_new_rroot_file, swig_delete_rroot_file, swig_rroot_file_methods, swig_rroot_file_attributes, &swig_rroot_file_Sf_SwigStatic, swig_rroot_file_meta, swig_rroot_file_bases, swig_rroot_file_base_names };

static int _wrap_new_TDirectory(lua_State* L) { int SWIG_arg = 0; inlib::rroot::ifile *arg1 = 0 ;
  inlib::rroot::TDirectory *result = 0 ; SWIG_check_num_args("inlib::rroot::TDirectory::TDirectory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::TDirectory::TDirectory",1,"inlib::rroot::ifile &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("new_TDirectory",1,SWIGTYPE_p_inlib__rroot__ifile); } 
  result = (inlib::rroot::TDirectory *)new inlib::rroot::TDirectory(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__TDirectory,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_TDirectory(void *obj) {
inlib::rroot::TDirectory *arg1 = (inlib::rroot::TDirectory *) obj;
delete arg1;
}
static int _proxy__wrap_new_TDirectory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TDirectory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TDirectory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TDirectory_methods[]= {
    {0,0}
};
static swig_lua_method swig_TDirectory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TDirectory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TDirectory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TDirectory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TDirectory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TDirectory_Sf_SwigStatic = {
    "TDirectory",
    swig_TDirectory_Sf_SwigStatic_methods,
    swig_TDirectory_Sf_SwigStatic_attributes,
    swig_TDirectory_Sf_SwigStatic_constants,
    swig_TDirectory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TDirectory_bases[] = {0,0};
static const char *swig_TDirectory_base_names[] = {"inlib::rroot::directory *",0};
static swig_lua_class _wrap_class_TDirectory = { "TDirectory", "TDirectory", &SWIGTYPE_p_inlib__rroot__TDirectory,_proxy__wrap_new_TDirectory, swig_delete_TDirectory, swig_TDirectory_methods, swig_TDirectory_attributes, &swig_TDirectory_Sf_SwigStatic, swig_TDirectory_meta, swig_TDirectory_bases, swig_TDirectory_base_names };

static int _wrap_rroot_find_dir(lua_State* L) { int SWIG_arg = 0; inlib::rroot::directory *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; inlib::rroot::TDirectory *result = 0 ; SWIG_check_num_args("inlib::rroot::find_dir",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::find_dir",1,"inlib::rroot::directory &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::find_dir",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__directory,0))){
    SWIG_fail_ptr("rroot_find_dir",1,SWIGTYPE_p_inlib__rroot__directory); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (inlib::rroot::TDirectory *)inlib::rroot::find_dir(*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__TDirectory,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_key_to_h1d(lua_State* L) { int SWIG_arg = 0; inlib::rroot::ifile *arg1 = 0 ;
  inlib::rroot::key *arg2 = 0 ; inlib::histo::h1d *result = 0 ; SWIG_check_num_args("inlib::rroot::key_to_h1d",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::key_to_h1d",1,"inlib::rroot::ifile &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::key_to_h1d",2,"inlib::rroot::key &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("rroot_key_to_h1d",1,SWIGTYPE_p_inlib__rroot__ifile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__key,0))){
    SWIG_fail_ptr("rroot_key_to_h1d",2,SWIGTYPE_p_inlib__rroot__key); } 
  result = (inlib::histo::h1d *)inlib::rroot::key_to_h1d(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__histo__h1d,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_read(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::ifile *arg2 = 0 ;
  std::vector< inlib::rroot::key * > *arg3 = 0 ; bool arg4 ; bool arg5 ; bool arg6 ; unsigned int arg7 ;
  SWIG_check_num_args("inlib::rroot::read",7,7) if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::read",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::read",2,"inlib::rroot::ifile &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::rroot::read",3,"std::vector< inlib::rroot::key * > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("inlib::rroot::read",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("inlib::rroot::read",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("inlib::rroot::read",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("inlib::rroot::read",7,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("rroot_read",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("rroot_read",2,SWIGTYPE_p_inlib__rroot__ifile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t,0))){
    SWIG_fail_ptr("rroot_read",3,SWIGTYPE_p_std__vectorT_inlib__rroot__key_p_t); }  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0); arg6 = (lua_toboolean(L, 6)!=0);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative") arg7 = (unsigned int)lua_tonumber(L, 7);
  inlib::rroot::read(*arg1,*arg2,(std::vector< inlib::rroot::key * > const &)*arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_rroot_branch(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::ifac *arg2 = 0 ;
  inlib::rroot::branch *result = 0 ; SWIG_check_num_args("inlib::rroot::branch::branch",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::branch::branch",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::branch::branch",2,"inlib::rroot::ifac &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_rroot_branch",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("new_rroot_branch",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  result = (inlib::rroot::branch *)new inlib::rroot::branch(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__branch,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_branch_find_entry(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::branch *arg1 = (inlib::rroot::branch *) 0 ; inlib::rroot::ifile *arg2 = 0 ; unsigned int arg3 ; bool result;
  SWIG_check_num_args("inlib::rroot::branch::find_entry",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::branch::find_entry",1,"inlib::rroot::branch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::branch::find_entry",2,"inlib::rroot::ifile &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::rroot::branch::find_entry",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__branch,0))){
    SWIG_fail_ptr("rroot_branch_find_entry",1,SWIGTYPE_p_inlib__rroot__branch); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("rroot_branch_find_entry",2,SWIGTYPE_p_inlib__rroot__ifile); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)inlib_rroot_branch_find_entry(arg1,*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_branch(void *obj) {
inlib::rroot::branch *arg1 = (inlib::rroot::branch *) obj;
delete arg1;
}
static int _proxy__wrap_new_rroot_branch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rroot_branch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_branch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_branch_methods[]= {
    { "find_entry", _wrap_rroot_branch_find_entry},
    {0,0}
};
static swig_lua_method swig_rroot_branch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_branch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_branch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_branch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_branch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_branch_Sf_SwigStatic = {
    "rroot_branch",
    swig_rroot_branch_Sf_SwigStatic_methods,
    swig_rroot_branch_Sf_SwigStatic_attributes,
    swig_rroot_branch_Sf_SwigStatic_constants,
    swig_rroot_branch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_branch_bases[] = {0};
static const char *swig_rroot_branch_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_branch = { "rroot_branch", "rroot_branch", &SWIGTYPE_p_inlib__rroot__branch,_proxy__wrap_new_rroot_branch, swig_delete_rroot_branch, swig_rroot_branch_methods, swig_rroot_branch_attributes, &swig_rroot_branch_Sf_SwigStatic, swig_rroot_branch_meta, swig_rroot_branch_bases, swig_rroot_branch_base_names };

static int _wrap_new_leaf_int(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::ifac *arg2 = 0 ;
  inlib::rroot::leaf< int > *result = 0 ; SWIG_check_num_args("inlib::rroot::leaf< int >::leaf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::leaf< int >::leaf",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::leaf< int >::leaf",2,"inlib::rroot::ifac &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_leaf_int",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("new_leaf_int",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  result = (inlib::rroot::leaf< int > *)new inlib::rroot::leaf< int >(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_leaf_int_value(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::leaf< int > *arg1 = (inlib::rroot::leaf< int > *) 0 ; unsigned int arg2 ; int result;
  SWIG_check_num_args("inlib::rroot::leaf< int >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::leaf< int >::value",1,"inlib::rroot::leaf< int > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rroot::leaf< int >::value",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__leafT_int_t,0))){
    SWIG_fail_ptr("rroot_leaf_int_value",1,SWIGTYPE_p_inlib__rroot__leafT_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)inlib_rroot_leaf_Sl_int_Sg__value((inlib::rroot::leaf< int > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_leaf_int(void *obj) {
inlib::rroot::leaf< int > *arg1 = (inlib::rroot::leaf< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_leaf_int(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_leaf_int);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_leaf_int_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_leaf_int_methods[]= {
    { "value", _wrap_rroot_leaf_int_value},
    {0,0}
};
static swig_lua_method swig_rroot_leaf_int_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_leaf_int_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_leaf_int_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_leaf_int_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_leaf_int_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_leaf_int_Sf_SwigStatic = {
    "rroot_leaf_int",
    swig_rroot_leaf_int_Sf_SwigStatic_methods,
    swig_rroot_leaf_int_Sf_SwigStatic_attributes,
    swig_rroot_leaf_int_Sf_SwigStatic_constants,
    swig_rroot_leaf_int_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_leaf_int_bases[] = {0};
static const char *swig_rroot_leaf_int_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_leaf_int = { "rroot_leaf_int", "rroot_leaf_int", &SWIGTYPE_p_inlib__rroot__leafT_int_t,_proxy__wrap_new_leaf_int, swig_delete_rroot_leaf_int, swig_rroot_leaf_int_methods, swig_rroot_leaf_int_attributes, &swig_rroot_leaf_int_Sf_SwigStatic, swig_rroot_leaf_int_meta, swig_rroot_leaf_int_bases, swig_rroot_leaf_int_base_names };

static int _wrap_new_leaf_float(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::ifac *arg2 = 0 ;
  inlib::rroot::leaf< float > *result = 0 ; SWIG_check_num_args("inlib::rroot::leaf< float >::leaf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::leaf< float >::leaf",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::leaf< float >::leaf",2,"inlib::rroot::ifac &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_leaf_float",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("new_leaf_float",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  result = (inlib::rroot::leaf< float > *)new inlib::rroot::leaf< float >(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_leaf_float_value(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::leaf< float > *arg1 = (inlib::rroot::leaf< float > *) 0 ; unsigned int arg2 ; float result;
  SWIG_check_num_args("inlib::rroot::leaf< float >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::leaf< float >::value",1,"inlib::rroot::leaf< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rroot::leaf< float >::value",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__leafT_float_t,0))){
    SWIG_fail_ptr("rroot_leaf_float_value",1,SWIGTYPE_p_inlib__rroot__leafT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)inlib_rroot_leaf_Sl_float_Sg__value((inlib::rroot::leaf< float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_leaf_float(void *obj) {
inlib::rroot::leaf< float > *arg1 = (inlib::rroot::leaf< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_leaf_float(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_leaf_float);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_leaf_float_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_leaf_float_methods[]= {
    { "value", _wrap_rroot_leaf_float_value},
    {0,0}
};
static swig_lua_method swig_rroot_leaf_float_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_leaf_float_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_leaf_float_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_leaf_float_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_leaf_float_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_leaf_float_Sf_SwigStatic = {
    "rroot_leaf_float",
    swig_rroot_leaf_float_Sf_SwigStatic_methods,
    swig_rroot_leaf_float_Sf_SwigStatic_attributes,
    swig_rroot_leaf_float_Sf_SwigStatic_constants,
    swig_rroot_leaf_float_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_leaf_float_bases[] = {0};
static const char *swig_rroot_leaf_float_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_leaf_float = { "rroot_leaf_float", "rroot_leaf_float", &SWIGTYPE_p_inlib__rroot__leafT_float_t,_proxy__wrap_new_leaf_float, swig_delete_rroot_leaf_float, swig_rroot_leaf_float_methods, swig_rroot_leaf_float_attributes, &swig_rroot_leaf_float_Sf_SwigStatic, swig_rroot_leaf_float_meta, swig_rroot_leaf_float_bases, swig_rroot_leaf_float_base_names };

static int _wrap_new_leaf_double(lua_State* L) { int SWIG_arg = 0; std::ostream *arg1 = 0 ; inlib::rroot::ifac *arg2 = 0 ;
  inlib::rroot::leaf< double > *result = 0 ; SWIG_check_num_args("inlib::rroot::leaf< double >::leaf",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::leaf< double >::leaf",1,"std::ostream &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::leaf< double >::leaf",2,"inlib::rroot::ifac &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("new_leaf_double",1,SWIGTYPE_p_std__ostream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("new_leaf_double",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  result = (inlib::rroot::leaf< double > *)new inlib::rroot::leaf< double >(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_double_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_leaf_double_value(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::leaf< double > *arg1 = (inlib::rroot::leaf< double > *) 0 ; unsigned int arg2 ; double result;
  SWIG_check_num_args("inlib::rroot::leaf< double >::value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::leaf< double >::value",1,"inlib::rroot::leaf< double > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inlib::rroot::leaf< double >::value",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__leafT_double_t,0))){
    SWIG_fail_ptr("rroot_leaf_double_value",1,SWIGTYPE_p_inlib__rroot__leafT_double_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)inlib_rroot_leaf_Sl_double_Sg__value((inlib::rroot::leaf< double > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_leaf_double(void *obj) {
inlib::rroot::leaf< double > *arg1 = (inlib::rroot::leaf< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_leaf_double(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_leaf_double);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_leaf_double_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_leaf_double_methods[]= {
    { "value", _wrap_rroot_leaf_double_value},
    {0,0}
};
static swig_lua_method swig_rroot_leaf_double_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_leaf_double_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_leaf_double_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_leaf_double_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_leaf_double_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_leaf_double_Sf_SwigStatic = {
    "rroot_leaf_double",
    swig_rroot_leaf_double_Sf_SwigStatic_methods,
    swig_rroot_leaf_double_Sf_SwigStatic_attributes,
    swig_rroot_leaf_double_Sf_SwigStatic_constants,
    swig_rroot_leaf_double_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_leaf_double_bases[] = {0};
static const char *swig_rroot_leaf_double_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_leaf_double = { "rroot_leaf_double", "rroot_leaf_double", &SWIGTYPE_p_inlib__rroot__leafT_double_t,_proxy__wrap_new_leaf_double, swig_delete_rroot_leaf_double, swig_rroot_leaf_double_methods, swig_rroot_leaf_double_attributes, &swig_rroot_leaf_double_Sf_SwigStatic, swig_rroot_leaf_double_meta, swig_rroot_leaf_double_bases, swig_rroot_leaf_double_base_names };

static int _wrap_rroot_base_leaf_s_cls(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::base_leaf *arg1 = (inlib::rroot::base_leaf *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("inlib::rroot::base_leaf::s_cls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::base_leaf::s_cls",1,"inlib::rroot::base_leaf const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__base_leaf,0))){
    SWIG_fail_ptr("rroot_base_leaf_s_cls",1,SWIGTYPE_p_inlib__rroot__base_leaf); } 
  result = (std::string *) &((inlib::rroot::base_leaf const *)arg1)->s_cls();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static swig_lua_attribute swig_rroot_base_leaf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_base_leaf_methods[]= {
    { "s_cls", _wrap_rroot_base_leaf_s_cls},
    {0,0}
};
static swig_lua_method swig_rroot_base_leaf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_base_leaf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_base_leaf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_base_leaf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_base_leaf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_base_leaf_Sf_SwigStatic = {
    "rroot_base_leaf",
    swig_rroot_base_leaf_Sf_SwigStatic_methods,
    swig_rroot_base_leaf_Sf_SwigStatic_attributes,
    swig_rroot_base_leaf_Sf_SwigStatic_constants,
    swig_rroot_base_leaf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_base_leaf_bases[] = {0};
static const char *swig_rroot_base_leaf_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_base_leaf = { "rroot_base_leaf", "rroot_base_leaf", &SWIGTYPE_p_inlib__rroot__base_leaf,0,0, swig_rroot_base_leaf_methods, swig_rroot_base_leaf_attributes, &swig_rroot_base_leaf_Sf_SwigStatic, swig_rroot_base_leaf_meta, swig_rroot_base_leaf_bases, swig_rroot_base_leaf_base_names };

static int _wrap_rroot_cast_leaf_int(lua_State* L) { int SWIG_arg = 0; inlib::rroot::base_leaf *arg1 = 0 ;
  inlib::rroot::leaf< int > *result = 0 ; SWIG_check_num_args("inlib::rroot::cast_leaf_int",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::cast_leaf_int",1,"inlib::rroot::base_leaf &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__base_leaf,0))){
    SWIG_fail_ptr("rroot_cast_leaf_int",1,SWIGTYPE_p_inlib__rroot__base_leaf); } 
  result = (inlib::rroot::leaf< int > *)inlib::rroot::cast_leaf_int(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_cast_leaf_float(lua_State* L) { int SWIG_arg = 0; inlib::rroot::base_leaf *arg1 = 0 ;
  inlib::rroot::leaf< float > *result = 0 ; SWIG_check_num_args("inlib::rroot::cast_leaf_float",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::cast_leaf_float",1,"inlib::rroot::base_leaf &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__base_leaf,0))){
    SWIG_fail_ptr("rroot_cast_leaf_float",1,SWIGTYPE_p_inlib__rroot__base_leaf); } 
  result = (inlib::rroot::leaf< float > *)inlib::rroot::cast_leaf_float(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_cast_leaf_double(lua_State* L) { int SWIG_arg = 0; inlib::rroot::base_leaf *arg1 = 0 ;
  inlib::rroot::leaf< double > *result = 0 ; SWIG_check_num_args("inlib::rroot::cast_leaf_double",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::cast_leaf_double",1,"inlib::rroot::base_leaf &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__base_leaf,0))){
    SWIG_fail_ptr("rroot_cast_leaf_double",1,SWIGTYPE_p_inlib__rroot__base_leaf); } 
  result = (inlib::rroot::leaf< double > *)inlib::rroot::cast_leaf_double(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__leafT_double_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_rroot_tree(lua_State* L) { int SWIG_arg = 0; inlib::rroot::ifile *arg1 = 0 ; inlib::rroot::ifac *arg2 = 0 ;
  inlib::rroot::tree *result = 0 ; SWIG_check_num_args("inlib::rroot::tree::tree",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::tree::tree",1,"inlib::rroot::ifile &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::tree::tree",2,"inlib::rroot::ifac &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("new_rroot_tree",1,SWIGTYPE_p_inlib__rroot__ifile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("new_rroot_tree",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  result = (inlib::rroot::tree *)new inlib::rroot::tree(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__tree,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_show(lua_State* L) { int SWIG_arg = 0; inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ;
  std::ostream *arg2 = 0 ; unsigned int arg3 ; bool result; SWIG_check_num_args("inlib::rroot::tree::show",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::show",1,"inlib::rroot::tree *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::tree::show",2,"std::ostream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inlib::rroot::tree::show",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_show",1,SWIGTYPE_p_inlib__rroot__tree); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("rroot_tree_show",2,SWIGTYPE_p_std__ostream); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)(arg1)->show(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_find_branch__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ; std::string *arg2 = 0 ; bool arg3 ; std::string temp2 ;
  inlib::rroot::branch *result = 0 ; SWIG_check_num_args("inlib::rroot::tree::find_branch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::find_branch",1,"inlib::rroot::tree const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::tree::find_branch",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("inlib::rroot::tree::find_branch",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_find_branch",1,SWIGTYPE_p_inlib__rroot__tree); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  result = (inlib::rroot::branch *)((inlib::rroot::tree const *)arg1)->find_branch((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__branch,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_find_branch__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  inlib::rroot::branch *result = 0 ; SWIG_check_num_args("inlib::rroot::tree::find_branch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::find_branch",1,"inlib::rroot::tree const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::tree::find_branch",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_find_branch",1,SWIGTYPE_p_inlib__rroot__tree); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (inlib::rroot::branch *)((inlib::rroot::tree const *)arg1)->find_branch((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__branch,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_find_branch(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__tree, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_rroot_tree_find_branch__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__tree, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_rroot_tree_find_branch__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rroot_tree_find_branch'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::rroot::tree::find_branch(std::string const &,bool) const\n"
  "    inlib::rroot::tree::find_branch(std::string const &) const\n"); lua_error(L);return 0; }
static int _wrap_rroot_tree_find_leaf__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ; std::string *arg2 = 0 ; bool arg3 ; std::string temp2 ;
  inlib::rroot::base_leaf *result = 0 ; SWIG_check_num_args("inlib::rroot::tree::find_leaf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::find_leaf",1,"inlib::rroot::tree const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::tree::find_leaf",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("inlib::rroot::tree::find_leaf",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_find_leaf",1,SWIGTYPE_p_inlib__rroot__tree); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  result = (inlib::rroot::base_leaf *)((inlib::rroot::tree const *)arg1)->find_leaf((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__base_leaf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_find_leaf__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  inlib::rroot::base_leaf *result = 0 ; SWIG_check_num_args("inlib::rroot::tree::find_leaf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::find_leaf",1,"inlib::rroot::tree const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("inlib::rroot::tree::find_leaf",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_find_leaf",1,SWIGTYPE_p_inlib__rroot__tree); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (inlib::rroot::base_leaf *)((inlib::rroot::tree const *)arg1)->find_leaf((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__base_leaf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_find_leaf(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__tree, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_rroot_tree_find_leaf__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_inlib__rroot__tree, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_rroot_tree_find_leaf__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rroot_tree_find_leaf'\n"
  "  Possible C/C++ prototypes are:\n" "    inlib::rroot::tree::find_leaf(std::string const &,bool) const\n"
  "    inlib::rroot::tree::find_leaf(std::string const &) const\n"); lua_error(L);return 0; }
static int _wrap_rroot_tree_find_leaf_branch(lua_State* L) { int SWIG_arg = 0;
  inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ; inlib::rroot::base_leaf *arg2 = 0 ; inlib::rroot::branch *result = 0 ;
  SWIG_check_num_args("inlib::rroot::tree::find_leaf_branch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::find_leaf_branch",1,"inlib::rroot::tree const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::tree::find_leaf_branch",2,"inlib::rroot::base_leaf const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_find_leaf_branch",1,SWIGTYPE_p_inlib__rroot__tree); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__base_leaf,0))){
    SWIG_fail_ptr("rroot_tree_find_leaf_branch",2,SWIGTYPE_p_inlib__rroot__base_leaf); } 
  result = (inlib::rroot::branch *)((inlib::rroot::tree const *)arg1)->find_leaf_branch((inlib::rroot::base_leaf const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__branch,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rroot_tree_entries(lua_State* L) { int SWIG_arg = 0; inlib::rroot::tree *arg1 = (inlib::rroot::tree *) 0 ;
  unsigned int result; SWIG_check_num_args("inlib::rroot::tree::entries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inlib::rroot::tree::entries",1,"inlib::rroot::tree const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__tree,0))){
    SWIG_fail_ptr("rroot_tree_entries",1,SWIGTYPE_p_inlib__rroot__tree); } 
  result = (unsigned int)inlib_rroot_tree_entries((inlib::rroot::tree const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_rroot_tree(void *obj) {
inlib::rroot::tree *arg1 = (inlib::rroot::tree *) obj;
delete arg1;
}
static int _proxy__wrap_new_rroot_tree(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rroot_tree);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rroot_tree_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rroot_tree_methods[]= {
    { "show", _wrap_rroot_tree_show},
    { "find_branch", _wrap_rroot_tree_find_branch},
    { "find_leaf", _wrap_rroot_tree_find_leaf},
    { "find_leaf_branch", _wrap_rroot_tree_find_leaf_branch},
    { "entries", _wrap_rroot_tree_entries},
    {0,0}
};
static swig_lua_method swig_rroot_tree_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rroot_tree_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rroot_tree_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rroot_tree_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rroot_tree_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rroot_tree_Sf_SwigStatic = {
    "rroot_tree",
    swig_rroot_tree_Sf_SwigStatic_methods,
    swig_rroot_tree_Sf_SwigStatic_attributes,
    swig_rroot_tree_Sf_SwigStatic_constants,
    swig_rroot_tree_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rroot_tree_bases[] = {0};
static const char *swig_rroot_tree_base_names[] = {0};
static swig_lua_class _wrap_class_rroot_tree = { "rroot_tree", "rroot_tree", &SWIGTYPE_p_inlib__rroot__tree,_proxy__wrap_new_rroot_tree, swig_delete_rroot_tree, swig_rroot_tree_methods, swig_rroot_tree_attributes, &swig_rroot_tree_Sf_SwigStatic, swig_rroot_tree_meta, swig_rroot_tree_bases, swig_rroot_tree_base_names };

static int _wrap_rroot_key_to_tree(lua_State* L) { int SWIG_arg = 0; inlib::rroot::ifile *arg1 = 0 ;
  inlib::rroot::ifac *arg2 = 0 ; inlib::rroot::key *arg3 = 0 ; inlib::rroot::tree *result = 0 ;
  SWIG_check_num_args("inlib::rroot::key_to_tree",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::rroot::key_to_tree",1,"inlib::rroot::ifile &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::rroot::key_to_tree",2,"inlib::rroot::ifac &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::rroot::key_to_tree",3,"inlib::rroot::key &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inlib__rroot__ifile,0))){
    SWIG_fail_ptr("rroot_key_to_tree",1,SWIGTYPE_p_inlib__rroot__ifile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_inlib__rroot__ifac,0))){
    SWIG_fail_ptr("rroot_key_to_tree",2,SWIGTYPE_p_inlib__rroot__ifac); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_inlib__rroot__key,0))){
    SWIG_fail_ptr("rroot_key_to_tree",3,SWIGTYPE_p_inlib__rroot__key); } 
  result = (inlib::rroot::tree *)inlib::rroot::key_to_tree(*arg1,*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inlib__rroot__tree,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_spark_greet(lua_State* L) { int SWIG_arg = 0; char *result = 0 ; SWIG_check_num_args("inlib::spark::greet",0,0)
  result = (char *)inlib::spark::greet(); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_spark_get_xyzs(lua_State* L) { int SWIG_arg = 0; std::vector< double > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ; std::vector< double > *arg3 = 0 ; SWIG_check_num_args("inlib::spark::get_xyzs",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("inlib::spark::get_xyzs",1,"std::vector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("inlib::spark::get_xyzs",2,"std::vector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("inlib::spark::get_xyzs",3,"std::vector< double > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("spark_get_xyzs",1,SWIGTYPE_p_std__vectorT_double_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("spark_get_xyzs",2,SWIGTYPE_p_std__vectorT_double_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("spark_get_xyzs",3,SWIGTYPE_p_std__vectorT_double_t); } 
  inlib::spark::get_xyzs((std::vector< double > const &)*arg1,(std::vector< double > const &)*arg2,(std::vector< double > const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("line_solid", inlib::sg::line_solid)},
    {SWIG_LUA_CONSTTAB_INT("line_dashed", inlib::sg::line_dashed)},
    {SWIG_LUA_CONSTTAB_INT("line_dotted", inlib::sg::line_dotted)},
    {SWIG_LUA_CONSTTAB_INT("line_dash_dotted", inlib::sg::line_dash_dotted)},
    {SWIG_LUA_CONSTTAB_INT("marker_dot", inlib::sg::marker_dot)},
    {SWIG_LUA_CONSTTAB_INT("marker_plus", inlib::sg::marker_plus)},
    {SWIG_LUA_CONSTTAB_INT("marker_asterisk", inlib::sg::marker_asterisk)},
    {SWIG_LUA_CONSTTAB_INT("marker_cross", inlib::sg::marker_cross)},
    {SWIG_LUA_CONSTTAB_INT("marker_star", inlib::sg::marker_star)},
    {SWIG_LUA_CONSTTAB_INT("marker_circle_line", inlib::sg::marker_circle_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_circle_filled", inlib::sg::marker_circle_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_triangle_up_line", inlib::sg::marker_triangle_up_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_triangle_up_filled", inlib::sg::marker_triangle_up_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_triangle_down_line", inlib::sg::marker_triangle_down_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_triangle_down_filled", inlib::sg::marker_triangle_down_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_david_star_line", inlib::sg::marker_david_star_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_david_star_filled", inlib::sg::marker_david_star_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_swiss_cross_line", inlib::sg::marker_swiss_cross_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_swiss_cross_filled", inlib::sg::marker_swiss_cross_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_diamond_line", inlib::sg::marker_diamond_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_diamond_filled", inlib::sg::marker_diamond_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_square_line", inlib::sg::marker_square_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_square_filled", inlib::sg::marker_square_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_penta_star_line", inlib::sg::marker_penta_star_line)},
    {SWIG_LUA_CONSTTAB_INT("marker_penta_star_filled", inlib::sg::marker_penta_star_filled)},
    {SWIG_LUA_CONSTTAB_INT("marker_minus", inlib::sg::marker_minus)},
    {SWIG_LUA_CONSTTAB_INT("area_solid", inlib::sg::area_solid)},
    {SWIG_LUA_CONSTTAB_INT("area_hatched", inlib::sg::area_hatched)},
    {SWIG_LUA_CONSTTAB_INT("area_checker", inlib::sg::area_checker)},
    {SWIG_LUA_CONSTTAB_INT("area_edged", inlib::sg::area_edged)},
    {SWIG_LUA_CONSTTAB_INT("projection_none", inlib::sg::projection_none)},
    {SWIG_LUA_CONSTTAB_INT("projection_rz", inlib::sg::projection_rz)},
    {SWIG_LUA_CONSTTAB_INT("projection_phiz", inlib::sg::projection_phiz)},
    {SWIG_LUA_CONSTTAB_INT("projection_zr", inlib::sg::projection_zr)},
    {SWIG_LUA_CONSTTAB_INT("projection_zphi", inlib::sg::projection_zphi)},
    {SWIG_LUA_CONSTTAB_INT("painting_uniform", inlib::sg::painting_uniform)},
    {SWIG_LUA_CONSTTAB_INT("painting_by_value", inlib::sg::painting_by_value)},
    {SWIG_LUA_CONSTTAB_INT("painting_by_level", inlib::sg::painting_by_level)},
    {SWIG_LUA_CONSTTAB_INT("painting_grey_scale", inlib::sg::painting_grey_scale)},
    {SWIG_LUA_CONSTTAB_INT("painting_violet_to_red", inlib::sg::painting_violet_to_red)},
    {SWIG_LUA_CONSTTAB_INT("painting_grey_scale_inverse", inlib::sg::painting_grey_scale_inverse)},
    {SWIG_LUA_CONSTTAB_INT("hatching_none", inlib::sg::hatching_none)},
    {SWIG_LUA_CONSTTAB_INT("hatching_right", inlib::sg::hatching_right)},
    {SWIG_LUA_CONSTTAB_INT("hatching_left", inlib::sg::hatching_left)},
    {SWIG_LUA_CONSTTAB_INT("hatching_left_and_right", inlib::sg::hatching_left_and_right)},
    {SWIG_LUA_CONSTTAB_INT("left", inlib::sg::left)},
    {SWIG_LUA_CONSTTAB_INT("center", inlib::sg::center)},
    {SWIG_LUA_CONSTTAB_INT("right", inlib::sg::right)},
    {SWIG_LUA_CONSTTAB_INT("bottom", inlib::sg::bottom)},
    {SWIG_LUA_CONSTTAB_INT("middle", inlib::sg::middle)},
    {SWIG_LUA_CONSTTAB_INT("top", inlib::sg::top)},
    {SWIG_LUA_CONSTTAB_INT("latin", inlib::sg::latin)},
    {SWIG_LUA_CONSTTAB_INT("greek", inlib::sg::greek)},
    {SWIG_LUA_CONSTTAB_INT("special", inlib::sg::special)},
    {SWIG_LUA_CONSTTAB_INT("font_outline", inlib::sg::font_outline)},
    {SWIG_LUA_CONSTTAB_INT("font_filled", inlib::sg::font_filled)},
    {SWIG_LUA_CONSTTAB_INT("font_pixmap", inlib::sg::font_pixmap)},
    {SWIG_LUA_CONSTTAB_INT("arrow_up", inlib::sg::arrow_up)},
    {SWIG_LUA_CONSTTAB_INT("arrow_down", inlib::sg::arrow_down)},
    {SWIG_LUA_CONSTTAB_INT("arrow_left", inlib::sg::arrow_left)},
    {SWIG_LUA_CONSTTAB_INT("arrow_right", inlib::sg::arrow_right)},
    {SWIG_LUA_CONSTTAB_INT("winding_ccw", inlib::sg::winding_ccw)},
    {SWIG_LUA_CONSTTAB_INT("winding_cw", inlib::sg::winding_cw)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_right", inlib::sg::move_rotate_right)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_left", inlib::sg::move_rotate_left)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_up", inlib::sg::move_rotate_up)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_down", inlib::sg::move_rotate_down)},
    {SWIG_LUA_CONSTTAB_INT("move_roll_plus", inlib::sg::move_roll_plus)},
    {SWIG_LUA_CONSTTAB_INT("move_roll_minus", inlib::sg::move_roll_minus)},
    {SWIG_LUA_CONSTTAB_INT("move_translate_right", inlib::sg::move_translate_right)},
    {SWIG_LUA_CONSTTAB_INT("move_translate_left", inlib::sg::move_translate_left)},
    {SWIG_LUA_CONSTTAB_INT("move_up", inlib::sg::move_up)},
    {SWIG_LUA_CONSTTAB_INT("move_down", inlib::sg::move_down)},
    {SWIG_LUA_CONSTTAB_INT("move_forward", inlib::sg::move_forward)},
    {SWIG_LUA_CONSTTAB_INT("move_backward", inlib::sg::move_backward)},
    {SWIG_LUA_CONSTTAB_INT("move_zoom_in", inlib::sg::move_zoom_in)},
    {SWIG_LUA_CONSTTAB_INT("move_zoom_out", inlib::sg::move_zoom_out)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_around_focal_right", inlib::sg::move_rotate_around_focal_right)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_around_focal_left", inlib::sg::move_rotate_around_focal_left)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_around_focal_up", inlib::sg::move_rotate_around_focal_up)},
    {SWIG_LUA_CONSTTAB_INT("move_rotate_around_focal_down", inlib::sg::move_rotate_around_focal_down)},
    {SWIG_LUA_CONSTTAB_INT("move_roll_around_focal_plus", inlib::sg::move_roll_around_focal_plus)},
    {SWIG_LUA_CONSTTAB_INT("move_roll_around_focal_minus", inlib::sg::move_roll_around_focal_minus)},
    {SWIG_LUA_CONSTTAB_INT("move_zoom_in_out", inlib::sg::move_zoom_in_out)},
    {SWIG_LUA_CONSTTAB_INT("move_zoom_in_out_rot", inlib::sg::move_zoom_in_out_rot)},
    {SWIG_LUA_CONSTTAB_INT("move_curve", inlib::sg::move_curve)},
    {SWIG_LUA_CONSTTAB_INT("anim_left", inlib::sg::anim_left)},
    {SWIG_LUA_CONSTTAB_INT("anim_right", inlib::sg::anim_right)},
    {SWIG_LUA_CONSTTAB_INT("anim_up", inlib::sg::anim_up)},
    {SWIG_LUA_CONSTTAB_INT("anim_down", inlib::sg::anim_down)},
    {SWIG_LUA_CONSTTAB_INT("anim_mode_0", inlib::sg::anim_mode_0)},
    {SWIG_LUA_CONSTTAB_INT("anim_mode_1", inlib::sg::anim_mode_1)},
    {SWIG_LUA_CONSTTAB_INT("anim_mode_2", inlib::sg::anim_mode_2)},
    {SWIG_LUA_CONSTTAB_INT("anim_mode_3", inlib::sg::anim_mode_3)},
    {SWIG_LUA_CONSTTAB_INT("anim_mode_4", inlib::sg::anim_mode_4)},
    {SWIG_LUA_CONSTTAB_INT("key_left", inlib::sg::key_left)},
    {SWIG_LUA_CONSTTAB_INT("key_right", inlib::sg::key_right)},
    {SWIG_LUA_CONSTTAB_INT("key_up", inlib::sg::key_up)},
    {SWIG_LUA_CONSTTAB_INT("key_down", inlib::sg::key_down)},
    {SWIG_LUA_CONSTTAB_INT("number_uint", inlib::sg::number_uint)},
    {SWIG_LUA_CONSTTAB_INT("number_int", inlib::sg::number_int)},
    {SWIG_LUA_CONSTTAB_INT("number_real", inlib::sg::number_real)},
    {SWIG_LUA_CONSTTAB_INT("number_ip", inlib::sg::number_ip)},
    {SWIG_LUA_CONSTTAB_INT("number_radec", inlib::sg::number_radec)},
    {SWIG_LUA_CONSTTAB_INT("camera_ortho", inlib::sg::camera_ortho)},
    {SWIG_LUA_CONSTTAB_INT("camera_perspective", inlib::sg::camera_perspective)},
    {SWIG_LUA_CONSTTAB_INT("gsto_memory", inlib::sg::gsto_memory)},
    {SWIG_LUA_CONSTTAB_INT("gsto_gl_vbo", inlib::sg::gsto_gl_vbo)},
    {SWIG_LUA_CONSTTAB_INT("gsto_gl_list", inlib::sg::gsto_gl_list)},
    {SWIG_LUA_CONSTTAB_INT("layout_text_under_image", inlib::sg::layout_text_under_image)},
    {SWIG_LUA_CONSTTAB_INT("layout_text_at_left_of_image", inlib::sg::layout_text_at_left_of_image)},
    {SWIG_LUA_CONSTTAB_INT("auto_lut_none", inlib::sg::auto_lut_none)},
    {SWIG_LUA_CONSTTAB_INT("auto_lut_min_max", inlib::sg::auto_lut_min_max)},
    {SWIG_LUA_CONSTTAB_INT("auto_lut_mean_rms", inlib::sg::auto_lut_mean_rms)},
    {SWIG_LUA_CONSTTAB_INT("draw_points", inlib::sg::draw_points)},
    {SWIG_LUA_CONSTTAB_INT("draw_lines", inlib::sg::draw_lines)},
    {SWIG_LUA_CONSTTAB_INT("draw_filled", inlib::sg::draw_filled)},
    {SWIG_LUA_CONSTTAB_INT("shade_flat", inlib::sg::shade_flat)},
    {SWIG_LUA_CONSTTAB_INT("shade_smooth", inlib::sg::shade_smooth)},
    {SWIG_LUA_CONSTTAB_INT("solid_none", inlib::sg::solid_none)},
    {SWIG_LUA_CONSTTAB_INT("solid_union", inlib::sg::solid_union)},
    {SWIG_LUA_CONSTTAB_INT("solid_intersection", inlib::sg::solid_intersection)},
    {SWIG_LUA_CONSTTAB_INT("solid_subtraction", inlib::sg::solid_subtraction)},
    {SWIG_LUA_CONSTTAB_INT("text_as_is", inlib::sg::text_as_is)},
    {SWIG_LUA_CONSTTAB_INT("text_enforce_width", inlib::sg::text_enforce_width)},
    {SWIG_LUA_CONSTTAB_INT("text_enforce_height", inlib::sg::text_enforce_height)},
    {SWIG_LUA_CONSTTAB_INT("sg_base_tex_intersect_down", inlib::sg::base_tex::intersect_down)},
    {SWIG_LUA_CONSTTAB_INT("sg_base_tex_intersect_move", inlib::sg::base_tex::intersect_move)},
    {SWIG_LUA_CONSTTAB_INT("sg_base_tex_intersect_up", inlib::sg::base_tex::intersect_up)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_cells", inlib::sg::plotter::cells)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_min_max", inlib::sg::plotter::min_max)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_unit_percent", inlib::sg::plotter::unit_percent)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_unit_axis", inlib::sg::plotter::unit_axis)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_xy", inlib::sg::plotter::xy)},
    {SWIG_LUA_CONSTTAB_INT("sg_plotter_xyz", inlib::sg::plotter::xyz)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "get_cout", _wrap_get_cout},
    { "env_append_path", _wrap_env_append_path},
    { "sep", _wrap_sep},
    { "file_exists", _wrap_file_exists},
    { "file_write", _wrap_file_write},
    { "file_paper_format_extension", _wrap_file_paper_format_extension},
    { "SOPI_cmap_black", _wrap_SOPI_cmap_black},
    { "fpi", _wrap_fpi},
    { "ftwo_pi", _wrap_ftwo_pi},
    { "fhalf_pi", _wrap_fhalf_pi},
    { "fdeg2rad", _wrap_fdeg2rad},
    { "frad2deg", _wrap_frad2deg},
    { "fround", _wrap_fround},
    { "fstep", _wrap_fstep},
    { "fcos", _wrap_fcos},
    { "fsin", _wrap_fsin},
    { "facos", _wrap_facos},
    { "fasin", _wrap_fasin},
    { "ftan", _wrap_ftan},
    { "fatan", _wrap_fatan},
    { "fatan2", _wrap_fatan2},
    { "fsqrt", _wrap_fsqrt},
    { "fpow", _wrap_fpow},
    { "fexp", _wrap_fexp},
    { "flog", _wrap_flog},
    { "flog10", _wrap_flog10},
    { "ffloor", _wrap_ffloor},
    { "fceil", _wrap_fceil},
    { "fcosh", _wrap_fcosh},
    { "fsinh", _wrap_fsinh},
    { "ffabs", _wrap_ffabs},
    { "pi", _wrap_pi},
    { "two_pi", _wrap_two_pi},
    { "half_pi", _wrap_half_pi},
    { "deg2rad", _wrap_deg2rad},
    { "rad2deg", _wrap_rad2deg},
    { "colorf_aquamarine", _wrap_colorf_aquamarine},
    { "colorf_mediumaquamarine", _wrap_colorf_mediumaquamarine},
    { "colorf_black", _wrap_colorf_black},
    { "colorf_blue", _wrap_colorf_blue},
    { "colorf_cadetblue", _wrap_colorf_cadetblue},
    { "colorf_cornflowerblue", _wrap_colorf_cornflowerblue},
    { "colorf_darkslateblue", _wrap_colorf_darkslateblue},
    { "colorf_lightblue", _wrap_colorf_lightblue},
    { "colorf_lightsteelblue", _wrap_colorf_lightsteelblue},
    { "colorf_mediumblue", _wrap_colorf_mediumblue},
    { "colorf_mediumslateblue", _wrap_colorf_mediumslateblue},
    { "colorf_midnightblue", _wrap_colorf_midnightblue},
    { "colorf_navyblue", _wrap_colorf_navyblue},
    { "colorf_navy", _wrap_colorf_navy},
    { "colorf_skyblue", _wrap_colorf_skyblue},
    { "colorf_slateblue", _wrap_colorf_slateblue},
    { "colorf_steelblue", _wrap_colorf_steelblue},
    { "colorf_coral", _wrap_colorf_coral},
    { "colorf_cyan", _wrap_colorf_cyan},
    { "colorf_firebrick", _wrap_colorf_firebrick},
    { "colorf_brown", _wrap_colorf_brown},
    { "colorf_gold", _wrap_colorf_gold},
    { "colorf_goldenrod", _wrap_colorf_goldenrod},
    { "colorf_green", _wrap_colorf_green},
    { "colorf_darkgreen", _wrap_colorf_darkgreen},
    { "colorf_darkolivegreen", _wrap_colorf_darkolivegreen},
    { "colorf_forestgreen", _wrap_colorf_forestgreen},
    { "colorf_limegreen", _wrap_colorf_limegreen},
    { "colorf_mediumseagreen", _wrap_colorf_mediumseagreen},
    { "colorf_mediumspringgreen", _wrap_colorf_mediumspringgreen},
    { "colorf_palegreen", _wrap_colorf_palegreen},
    { "colorf_seagreen", _wrap_colorf_seagreen},
    { "colorf_springgreen", _wrap_colorf_springgreen},
    { "colorf_yellowgreen", _wrap_colorf_yellowgreen},
    { "colorf_darkslategrey", _wrap_colorf_darkslategrey},
    { "colorf_dimgrey", _wrap_colorf_dimgrey},
    { "colorf_lightgrey", _wrap_colorf_lightgrey},
    { "colorf_grey", _wrap_colorf_grey},
    { "colorf_khaki", _wrap_colorf_khaki},
    { "colorf_magenta", _wrap_colorf_magenta},
    { "colorf_maroon", _wrap_colorf_maroon},
    { "colorf_orange", _wrap_colorf_orange},
    { "colorf_orchid", _wrap_colorf_orchid},
    { "colorf_darkorchid", _wrap_colorf_darkorchid},
    { "colorf_mediumorchid", _wrap_colorf_mediumorchid},
    { "colorf_pink", _wrap_colorf_pink},
    { "colorf_plum", _wrap_colorf_plum},
    { "colorf_red", _wrap_colorf_red},
    { "colorf_indianred", _wrap_colorf_indianred},
    { "colorf_mediumvioletred", _wrap_colorf_mediumvioletred},
    { "colorf_orangered", _wrap_colorf_orangered},
    { "colorf_violetred", _wrap_colorf_violetred},
    { "colorf_salmon", _wrap_colorf_salmon},
    { "colorf_sienna", _wrap_colorf_sienna},
    { "colorf_tan", _wrap_colorf_tan},
    { "colorf_thistle", _wrap_colorf_thistle},
    { "colorf_turquoise", _wrap_colorf_turquoise},
    { "colorf_darkturquoise", _wrap_colorf_darkturquoise},
    { "colorf_mediumturquoise", _wrap_colorf_mediumturquoise},
    { "colorf_violet", _wrap_colorf_violet},
    { "colorf_blueviolet", _wrap_colorf_blueviolet},
    { "colorf_wheat", _wrap_colorf_wheat},
    { "colorf_white", _wrap_colorf_white},
    { "colorf_yellow", _wrap_colorf_yellow},
    { "colorf_greenyellow", _wrap_colorf_greenyellow},
    { "font_arialbd_ttf", _wrap_font_arialbd_ttf},
    { "modeling_boxes", _wrap_modeling_boxes},
    { "modeling_wire_boxes", _wrap_modeling_wire_boxes},
    { "modeling_lines", _wrap_modeling_lines},
    { "modeling_segments", _wrap_modeling_segments},
    { "modeling_points", _wrap_modeling_points},
    { "modeling_top_lines", _wrap_modeling_top_lines},
    { "modeling_texts", _wrap_modeling_texts},
    { "modeling_curve", _wrap_modeling_curve},
    { "modeling_filled_curve", _wrap_modeling_filled_curve},
    { "modeling_bar_chart", _wrap_modeling_bar_chart},
    { "modeling_solid", _wrap_modeling_solid},
    { "modeling_wire_frame", _wrap_modeling_wire_frame},
    { "modeling_reduced_wire_frame", _wrap_modeling_reduced_wire_frame},
    { "modeling_polygon", _wrap_modeling_polygon},
    { "modeling_none", _wrap_modeling_none},
    { "modeling_I", _wrap_modeling_I},
    { "modeling_plus", _wrap_modeling_plus},
    { "modeling_markers", _wrap_modeling_markers},
    { "sg_cast_ortho", _wrap_sg_cast_ortho},
    { "sg_cast_perspective", _wrap_sg_cast_perspective},
    { "sg_cast_frustum", _wrap_sg_cast_frustum},
    { "sg_cast_lrbt", _wrap_sg_cast_lrbt},
    { "points", _wrap_points},
    { "lines", _wrap_lines},
    { "line_loop", _wrap_line_loop},
    { "line_strip", _wrap_line_strip},
    { "triangles", _wrap_triangles},
    { "triangle_strip", _wrap_triangle_strip},
    { "triangle_fan", _wrap_triangle_fan},
    { "is_mode", _wrap_is_mode},
    { "is_line", _wrap_is_line},
    { "sg_set_plotter_camera", _wrap_sg_set_plotter_camera},
    { "cast_viewer", _wrap_cast_viewer},
    { "net_serror", _wrap_net_serror},
    { "net_herror", _wrap_net_herror},
    { "net_host_name", _wrap_net_host_name},
    { "net_inet_sip", _wrap_net_inet_sip},
    { "sg_s_send_placement", _wrap_sg_s_send_placement},
    { "sg_s_placement_static", _wrap_sg_s_placement_static},
    { "sg_s_placement_dynamic", _wrap_sg_s_placement_dynamic},
    { "sg_s_placement_screen", _wrap_sg_s_placement_screen},
    { "sg_s_send_radius", _wrap_sg_s_send_radius},
    { "sg_s_send_scale", _wrap_sg_s_send_scale},
    { "sg_s_send_clear", _wrap_sg_s_send_clear},
    { "sg_s_protocol_start", _wrap_sg_s_protocol_start},
    { "sg_s_protocol_disconnect", _wrap_sg_s_protocol_disconnect},
    { "sg_s_protocol_zdoc", _wrap_sg_s_protocol_zdoc},
    { "sg_s_protocol_arg_sep", _wrap_sg_s_protocol_arg_sep},
    { "sg_s_protocol_clear_static_sg", _wrap_sg_s_protocol_clear_static_sg},
    { "sg_s_protocol_clear_dynamic_sg", _wrap_sg_s_protocol_clear_dynamic_sg},
    { "sg_s_protocol_clear_screen_sg", _wrap_sg_s_protocol_clear_screen_sg},
    { "sg_s_protocol_view_all", _wrap_sg_s_protocol_view_all},
    { "sg_s_protocol_set_background_black", _wrap_sg_s_protocol_set_background_black},
    { "sg_s_protocol_set_background_white", _wrap_sg_s_protocol_set_background_white},
    { "sg_s_protocol_disable_anim", _wrap_sg_s_protocol_disable_anim},
    { "sg_s_protocol_reset_camera", _wrap_sg_s_protocol_reset_camera},
    { "gui_viewer_s_default", _wrap_gui_viewer_s_default},
    { "cast_gui_viewer", _wrap_cast_gui_viewer},
    { "get_sg_plots", _wrap_get_sg_plots},
    { "sg_style_from_res", _wrap_sg_style_from_res},
    { "rroot_find_dir", _wrap_rroot_find_dir},
    { "rroot_key_to_h1d", _wrap_rroot_key_to_h1d},
    { "rroot_read", _wrap_rroot_read},
    { "rroot_cast_leaf_int", _wrap_rroot_cast_leaf_int},
    { "rroot_cast_leaf_float", _wrap_rroot_cast_leaf_float},
    { "rroot_cast_leaf_double", _wrap_rroot_cast_leaf_double},
    { "rroot_key_to_tree", _wrap_rroot_key_to_tree},
    { "spark_greet", _wrap_spark_greet},
    { "spark_get_xyzs", _wrap_spark_get_xyzs},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_std_vector_uint,
&_wrap_class_std_vector_int,
&_wrap_class_std_vector_float,
&_wrap_class_std_vector_double,
&_wrap_class_std_string,
&_wrap_class_printer,
&_wrap_class_args,
&_wrap_class_guiv,
&_wrap_class_opener,
&_wrap_class_histo_h1d,
&_wrap_class_histo_h2d,
&_wrap_class_histo_p1d,
&_wrap_class_histo_p2d,
&_wrap_class_histo_c2d,
&_wrap_class_histo_c3d,
&_wrap_class_random_flat,
&_wrap_class_random_gauss,
&_wrap_class_random_bw,
&_wrap_class_random_exp,
&_wrap_class_rtausmeui,
&_wrap_class_rtausmed,
&_wrap_class_rgaussd,
&_wrap_class_rbwd,
&_wrap_class_rexpd,
&_wrap_class_rdir2d,
&_wrap_class_rdir3d,
&_wrap_class_sg_style_colormap,
&_wrap_class_sg_style_default_colormap,
&_wrap_class_sg_style_ROOT_colormap,
&_wrap_class_xml_styles,
&_wrap_class_SOPI_color,
&_wrap_class_SOPI_cmap,
&_wrap_class_SOPI_grey32,
&_wrap_class_SOPI_greyinv32,
&_wrap_class_SOPI_grey128,
&_wrap_class_SOPI_greyinv128,
&_wrap_class_SOPI_grey256,
&_wrap_class_SOPI_col16,
&_wrap_class_SOPI_colrj32,
&_wrap_class_SOPI_colbr32,
&_wrap_class_SOPI_colrv32,
&_wrap_class_SOPI_colrj128,
&_wrap_class_SOPI_colbr128,
&_wrap_class_SOPI_red32,
&_wrap_class_SOPI_green32,
&_wrap_class_SOPI_blue32,
&_wrap_class_SOPI_yellow32,
&_wrap_class_SOPI_orange32,
&_wrap_class_SOPI_cyan32,
&_wrap_class_SOPI_violet32,
&_wrap_class_SOPI_col64,
&_wrap_class_SOPI_rgb216,
&_wrap_class_SOPI_rgb512,
&_wrap_class_SOPI_rgb4096,
&_wrap_class_SOPI_rgb32768,
&_wrap_class_SOPI_midas_pastel,
&_wrap_class_SOPI_midas_heat,
&_wrap_class_SOPI_midas_rainbow3,
&_wrap_class_SOPI_midas_bluered,
&_wrap_class_SOPI_midas_bluewhite,
&_wrap_class_SOPI_midas_stairs8,
&_wrap_class_SOPI_midas_stairs9,
&_wrap_class_SOPI_midas_staircase,
&_wrap_class_SOPI_midas_color,
&_wrap_class_SOPI_midas_manycol,
&_wrap_class_SOPI_midas_idl14,
&_wrap_class_SOPI_midas_idl15,
&_wrap_class_img_byte,
&_wrap_class_lut_float,
&_wrap_class_lut_double,
&_wrap_class_colorf,
&_wrap_class_vec2f,
&_wrap_class_vec3f,
&_wrap_class_mat4f,
&_wrap_class_rotf,
&_wrap_class_box3f,
&_wrap_class_vec3d,
&_wrap_class_rotd,
&_wrap_class_box3d,
&_wrap_class_sf_string,
&_wrap_class_sf_vec3f,
&_wrap_class_sf_mat4f,
&_wrap_class_sf_rotf,
&_wrap_class_mf_string,
&_wrap_class_sf_bool,
&_wrap_class_sf_float,
&_wrap_class_sf_vec_colorf,
&_wrap_class_sf_img_byte,
&_wrap_class_sf_enum_font_modeling,
&_wrap_class_sf_enum_winding_type,
&_wrap_class_sf_enum_marker_style,
&_wrap_class_sf_enum_area_style,
&_wrap_class_sf_enum_painting_policy,
&_wrap_class_sf_enum_hatching_policy,
&_wrap_class_sf_enum_projection_type,
&_wrap_class_sf_enum_hjust,
&_wrap_class_sf_enum_vjust,
&_wrap_class_sf_enum_draw_type,
&_wrap_class_sf_enum_shade_type,
&_wrap_class_mf_float,
&_wrap_class_mf_vec_vec2f,
&_wrap_class_mf_enum_unit_type,
&_wrap_class_style,
&_wrap_class_text_style,
&_wrap_class_render_action,
&_wrap_class_write_action,
&_wrap_class_polyhedron,
&_wrap_class_hep_polyhedron_tubs,
&_wrap_class_sf_polyhedron,
&_wrap_class_sg_node,
&_wrap_class_sg_group,
&_wrap_class_sg_separator,
&_wrap_class_sg_selection,
&_wrap_class_sg_base_camera,
&_wrap_class_sg_ortho,
&_wrap_class_sg_perspective,
&_wrap_class_sg_frustum,
&_wrap_class_sg_lrbt,
&_wrap_class_sg_rgba,
&_wrap_class_sg_base_tex,
&_wrap_class_sg_tex_rect,
&_wrap_class_sg_torche,
&_wrap_class_sg_head_light,
&_wrap_class_sg_blend,
&_wrap_class_sg_matrix,
&_wrap_class_sg_polyhedron,
&_wrap_class_sg_cone_hat,
&_wrap_class_sg_cube,
&_wrap_class_sg_sphere,
&_wrap_class_sg_draw_style,
&_wrap_class_sg_shade_model,
&_wrap_class_sf_mode_t,
&_wrap_class_sg_vertices,
&_wrap_class_sg_atb_vertices,
&_wrap_class_sg_colored_sized_points,
&_wrap_class_base_freetype,
&_wrap_class_plottable,
&_wrap_class_h1d2plot,
&_wrap_class_h1d2plot_cp,
&_wrap_class_sf_enum_shape_type,
&_wrap_class_sf_enum_colormap_axis_labeling_type,
&_wrap_class_sg_plotter,
&_wrap_class_sg_plots,
&_wrap_class_viewer,
&_wrap_class_render_manager,
&_wrap_class_wps,
&_wrap_class_zb_buffer,
&_wrap_class_sg_zb_manager,
&_wrap_class_sg_zb_action,
&_wrap_class_sg_gl2ps_manager,
&_wrap_class_sg_gl2ps_action,
&_wrap_class_sg_write_bsg,
&_wrap_class_base_socket,
&_wrap_class_net_inet_socket,
&_wrap_class_net_sg_client,
&_wrap_class_gui_viewer,
&_wrap_class_waxml_file,
&_wrap_class_ifile,
&_wrap_class_key,
&_wrap_class_ifac,
&_wrap_class_rroot_fac,
&_wrap_class_std_vector_keys,
&_wrap_class_directory,
&_wrap_class_rroot_file,
&_wrap_class_TDirectory,
&_wrap_class_rroot_branch,
&_wrap_class_rroot_leaf_int,
&_wrap_class_rroot_leaf_float,
&_wrap_class_rroot_leaf_double,
&_wrap_class_rroot_base_leaf,
&_wrap_class_rroot_tree,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "inlib",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_inlib__sg__tex_rectTo_p_inlib__sg__base_tex(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::base_tex *)  ((inlib::sg::tex_rect *) x));
}
static void *_p_inlib__sg__colored_sized_pointsTo_p_inlib__sg__vertices(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::vertices *)  ((inlib::sg::colored_sized_points *) x));
}
static void *_p_inlib__sg__atb_verticesTo_p_inlib__sg__vertices(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::vertices *)  ((inlib::sg::atb_vertices *) x));
}
static void *_p_inlib__sg__separatorTo_p_inlib__sg__group(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::group *)  ((inlib::sg::separator *) x));
}
static void *_p_inlib__sg__selectionTo_p_inlib__sg__group(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::group *) (inlib::sg::separator *) ((inlib::sg::selection *) x));
}
static void *_p_inlib__net__inet_socketTo_p_inlib__net__base_socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::net::base_socket *)  ((inlib::net::inet_socket *) x));
}
static void *_p_inlib__rroot__TDirectoryTo_p_inlib__rroot__directory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::rroot::directory *)  ((inlib::rroot::TDirectory *) x));
}
static void *_p_inlib__sg__selectionTo_p_inlib__sg__separator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::separator *)  ((inlib::sg::selection *) x));
}
static void *_p_inlib__sg__h1d2plot_cpTo_p_inlib__sg__plottable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::plottable *)  ((inlib::sg::h1d2plot_cp *) x));
}
static void *_p_inlib__sg__h1d2plotTo_p_inlib__sg__plottable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::plottable *)  ((inlib::sg::h1d2plot *) x));
}
static void *_p_inlib__SOPI__midas_blueredTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_bluered *) x));
}
static void *_p_inlib__SOPI__rgb4096To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::rgb4096 *) x));
}
static void *_p_inlib__SOPI__rgb32768To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::rgb32768 *) x));
}
static void *_p_inlib__SOPI__midas_idl14To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_idl14 *) x));
}
static void *_p_inlib__SOPI__violet32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::violet32 *) x));
}
static void *_p_inlib__SOPI__midas_idl15To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_idl15 *) x));
}
static void *_p_inlib__SOPI__grey256To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::grey256 *) x));
}
static void *_p_inlib__SOPI__blue32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::blue32 *) x));
}
static void *_p_inlib__SOPI__midas_rainbow3To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_rainbow3 *) x));
}
static void *_p_inlib__SOPI__greyinv128To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::greyinv128 *) x));
}
static void *_p_inlib__SOPI__midas_pastelTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_pastel *) x));
}
static void *_p_inlib__SOPI__rgb512To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::rgb512 *) x));
}
static void *_p_inlib__SOPI__colrj32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::colrj32 *) x));
}
static void *_p_inlib__SOPI__green32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::green32 *) x));
}
static void *_p_inlib__SOPI__rgb216To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::rgb216 *) x));
}
static void *_p_inlib__SOPI__col16To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::col16 *) x));
}
static void *_p_inlib__SOPI__midas_bluewhiteTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_bluewhite *) x));
}
static void *_p_inlib__SOPI__colrv32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::colrv32 *) x));
}
static void *_p_inlib__SOPI__midas_stairs8To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_stairs8 *) x));
}
static void *_p_inlib__SOPI__colbr128To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::colbr128 *) x));
}
static void *_p_inlib__SOPI__midas_stairs9To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_stairs9 *) x));
}
static void *_p_inlib__SOPI__yellow32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::yellow32 *) x));
}
static void *_p_inlib__SOPI__orange32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::orange32 *) x));
}
static void *_p_inlib__SOPI__midas_manycolTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_manycol *) x));
}
static void *_p_inlib__SOPI__col64To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::col64 *) x));
}
static void *_p_inlib__SOPI__greyinv32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::greyinv32 *) x));
}
static void *_p_inlib__SOPI__grey32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::grey32 *) x));
}
static void *_p_inlib__SOPI__midas_colorTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_color *) x));
}
static void *_p_inlib__SOPI__midas_staircaseTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_staircase *) x));
}
static void *_p_inlib__SOPI__red32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::red32 *) x));
}
static void *_p_inlib__SOPI__colbr32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::colbr32 *) x));
}
static void *_p_inlib__SOPI__grey128To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::grey128 *) x));
}
static void *_p_inlib__SOPI__midas_heatTo_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::midas_heat *) x));
}
static void *_p_inlib__SOPI__colrj128To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::colrj128 *) x));
}
static void *_p_inlib__SOPI__cyan32To_p_inlib__SOPI__cmap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::SOPI::cmap *)  ((inlib::SOPI::cyan32 *) x));
}
static void *_p_inlib__sg__head_lightTo_p_inlib__sg__torche(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::torche *)  ((inlib::sg::head_light *) x));
}
static void *_p_inlib__rroot__fileTo_p_inlib__rroot__ifile(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::rroot::ifile *)  ((inlib::rroot::file *) x));
}
static void *_p_inlib__sg__style_default_colormapTo_p_inlib__sg__style_colormap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::style_colormap *)  ((inlib::sg::style_default_colormap *) x));
}
static void *_p_inlib__sg__style_ROOT_colormapTo_p_inlib__sg__style_colormap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::style_colormap *)  ((inlib::sg::style_ROOT_colormap *) x));
}
static void *_p_inlib__sg__zb_managerTo_p_inlib__sg__render_manager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::render_manager *)  ((inlib::sg::zb_manager *) x));
}
static void *_p_inlib__sg__gui_viewerTo_p_inlib__sg__viewer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::viewer *)  ((inlib::sg::gui_viewer *) x));
}
static void *_p_inlib__sg__frustumTo_p_inlib__sg__base_camera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::base_camera *)  ((inlib::sg::frustum *) x));
}
static void *_p_inlib__sg__lrbtTo_p_inlib__sg__base_camera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::base_camera *)  ((inlib::sg::lrbt *) x));
}
static void *_p_inlib__sg__perspectiveTo_p_inlib__sg__base_camera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::base_camera *)  ((inlib::sg::perspective *) x));
}
static void *_p_inlib__sg__orthoTo_p_inlib__sg__base_camera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::base_camera *)  ((inlib::sg::ortho *) x));
}
static void *_p_inlib__rroot__facTo_p_inlib__rroot__ifac(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::rroot::ifac *)  ((inlib::rroot::fac *) x));
}
static void *_p_inlib__sg__write_bsgTo_p_inlib__sg__write_action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::write_action *)  ((inlib::sg::write_bsg *) x));
}
static void *_p_inlib__sg__zb_actionTo_p_inlib__sg__render_action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::render_action *)  ((inlib::sg::zb_action *) x));
}
static void *_p_inlib__sg__gl2ps_actionTo_p_inlib__sg__render_action(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::render_action *)  ((inlib::sg::gl2ps_action *) x));
}
static void *_p_inlib__hep__polyhedron_tubsTo_p_inlib__hep__polyhedron(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::hep::polyhedron *)  ((inlib::hep::polyhedron_tubs *) x));
}
static void *_p_inlib__sg__cubeTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::cube *) x));
}
static void *_p_inlib__sg__selectionTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::group *)(inlib::sg::separator *) ((inlib::sg::selection *) x));
}
static void *_p_inlib__sg__groupTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::group *) x));
}
static void *_p_inlib__sg__verticesTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::vertices *) x));
}
static void *_p_inlib__sg__atb_verticesTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::vertices *) ((inlib::sg::atb_vertices *) x));
}
static void *_p_inlib__sg__polyhedronTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::polyhedron *) x));
}
static void *_p_inlib__sg__plotterTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::plotter *) x));
}
static void *_p_inlib__sg__orthoTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::base_camera *) ((inlib::sg::ortho *) x));
}
static void *_p_inlib__sg__draw_styleTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::draw_style *) x));
}
static void *_p_inlib__sg__shade_modelTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::shade_model *) x));
}
static void *_p_inlib__sg__base_cameraTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::base_camera *) x));
}
static void *_p_inlib__sg__rgbaTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::rgba *) x));
}
static void *_p_inlib__sg__separatorTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::group *) ((inlib::sg::separator *) x));
}
static void *_p_inlib__sg__matrixTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::matrix *) x));
}
static void *_p_inlib__sg__tex_rectTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::tex_rect *) x));
}
static void *_p_inlib__sg__plotsTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::plots *) x));
}
static void *_p_inlib__sg__perspectiveTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::base_camera *) ((inlib::sg::perspective *) x));
}
static void *_p_inlib__sg__head_lightTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::torche *) ((inlib::sg::head_light *) x));
}
static void *_p_inlib__sg__sphereTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::sphere *) x));
}
static void *_p_inlib__sg__frustumTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::base_camera *) ((inlib::sg::frustum *) x));
}
static void *_p_inlib__sg__cone_hatTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::cone_hat *) x));
}
static void *_p_inlib__sg__torcheTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::torche *) x));
}
static void *_p_inlib__sg__lrbtTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::base_camera *) ((inlib::sg::lrbt *) x));
}
static void *_p_inlib__sg__blendTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *)  ((inlib::sg::blend *) x));
}
static void *_p_inlib__sg__colored_sized_pointsTo_p_inlib__sg__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((inlib::sg::node *) (inlib::sg::vertices *) ((inlib::sg::colored_sized_points *) x));
}
static swig_type_info _swigt__p_ZPixel = {"_p_ZPixel", "ZPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__SOPI__blue32 = {"_p_inlib__SOPI__blue32", "inlib::SOPI::blue32 *", 0, 0, (void*)&_wrap_class_SOPI_blue32, 0};
static swig_type_info _swigt__p_inlib__SOPI__cmap = {"_p_inlib__SOPI__cmap", "inlib::SOPI::cmap *", 0, 0, (void*)&_wrap_class_SOPI_cmap, 0};
static swig_type_info _swigt__p_inlib__SOPI__col16 = {"_p_inlib__SOPI__col16", "inlib::SOPI::col16 *", 0, 0, (void*)&_wrap_class_SOPI_col16, 0};
static swig_type_info _swigt__p_inlib__SOPI__col64 = {"_p_inlib__SOPI__col64", "inlib::SOPI::col64 *", 0, 0, (void*)&_wrap_class_SOPI_col64, 0};
static swig_type_info _swigt__p_inlib__SOPI__colbr128 = {"_p_inlib__SOPI__colbr128", "inlib::SOPI::colbr128 *", 0, 0, (void*)&_wrap_class_SOPI_colbr128, 0};
static swig_type_info _swigt__p_inlib__SOPI__colbr32 = {"_p_inlib__SOPI__colbr32", "inlib::SOPI::colbr32 *", 0, 0, (void*)&_wrap_class_SOPI_colbr32, 0};
static swig_type_info _swigt__p_inlib__SOPI__color = {"_p_inlib__SOPI__color", "inlib::SOPI::color *", 0, 0, (void*)&_wrap_class_SOPI_color, 0};
static swig_type_info _swigt__p_inlib__SOPI__colrj128 = {"_p_inlib__SOPI__colrj128", "inlib::SOPI::colrj128 *", 0, 0, (void*)&_wrap_class_SOPI_colrj128, 0};
static swig_type_info _swigt__p_inlib__SOPI__colrj32 = {"_p_inlib__SOPI__colrj32", "inlib::SOPI::colrj32 *", 0, 0, (void*)&_wrap_class_SOPI_colrj32, 0};
static swig_type_info _swigt__p_inlib__SOPI__colrv32 = {"_p_inlib__SOPI__colrv32", "inlib::SOPI::colrv32 *", 0, 0, (void*)&_wrap_class_SOPI_colrv32, 0};
static swig_type_info _swigt__p_inlib__SOPI__cyan32 = {"_p_inlib__SOPI__cyan32", "inlib::SOPI::cyan32 *", 0, 0, (void*)&_wrap_class_SOPI_cyan32, 0};
static swig_type_info _swigt__p_inlib__SOPI__green32 = {"_p_inlib__SOPI__green32", "inlib::SOPI::green32 *", 0, 0, (void*)&_wrap_class_SOPI_green32, 0};
static swig_type_info _swigt__p_inlib__SOPI__grey128 = {"_p_inlib__SOPI__grey128", "inlib::SOPI::grey128 *", 0, 0, (void*)&_wrap_class_SOPI_grey128, 0};
static swig_type_info _swigt__p_inlib__SOPI__grey256 = {"_p_inlib__SOPI__grey256", "inlib::SOPI::grey256 *", 0, 0, (void*)&_wrap_class_SOPI_grey256, 0};
static swig_type_info _swigt__p_inlib__SOPI__grey32 = {"_p_inlib__SOPI__grey32", "inlib::SOPI::grey32 *", 0, 0, (void*)&_wrap_class_SOPI_grey32, 0};
static swig_type_info _swigt__p_inlib__SOPI__greyinv128 = {"_p_inlib__SOPI__greyinv128", "inlib::SOPI::greyinv128 *", 0, 0, (void*)&_wrap_class_SOPI_greyinv128, 0};
static swig_type_info _swigt__p_inlib__SOPI__greyinv32 = {"_p_inlib__SOPI__greyinv32", "inlib::SOPI::greyinv32 *", 0, 0, (void*)&_wrap_class_SOPI_greyinv32, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_bluered = {"_p_inlib__SOPI__midas_bluered", "inlib::SOPI::midas_bluered *", 0, 0, (void*)&_wrap_class_SOPI_midas_bluered, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_bluewhite = {"_p_inlib__SOPI__midas_bluewhite", "inlib::SOPI::midas_bluewhite *", 0, 0, (void*)&_wrap_class_SOPI_midas_bluewhite, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_color = {"_p_inlib__SOPI__midas_color", "inlib::SOPI::midas_color *", 0, 0, (void*)&_wrap_class_SOPI_midas_color, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_heat = {"_p_inlib__SOPI__midas_heat", "inlib::SOPI::midas_heat *", 0, 0, (void*)&_wrap_class_SOPI_midas_heat, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_idl14 = {"_p_inlib__SOPI__midas_idl14", "inlib::SOPI::midas_idl14 *", 0, 0, (void*)&_wrap_class_SOPI_midas_idl14, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_idl15 = {"_p_inlib__SOPI__midas_idl15", "inlib::SOPI::midas_idl15 *", 0, 0, (void*)&_wrap_class_SOPI_midas_idl15, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_manycol = {"_p_inlib__SOPI__midas_manycol", "inlib::SOPI::midas_manycol *", 0, 0, (void*)&_wrap_class_SOPI_midas_manycol, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_pastel = {"_p_inlib__SOPI__midas_pastel", "inlib::SOPI::midas_pastel *", 0, 0, (void*)&_wrap_class_SOPI_midas_pastel, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_rainbow3 = {"_p_inlib__SOPI__midas_rainbow3", "inlib::SOPI::midas_rainbow3 *", 0, 0, (void*)&_wrap_class_SOPI_midas_rainbow3, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_staircase = {"_p_inlib__SOPI__midas_staircase", "inlib::SOPI::midas_staircase *", 0, 0, (void*)&_wrap_class_SOPI_midas_staircase, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_stairs8 = {"_p_inlib__SOPI__midas_stairs8", "inlib::SOPI::midas_stairs8 *", 0, 0, (void*)&_wrap_class_SOPI_midas_stairs8, 0};
static swig_type_info _swigt__p_inlib__SOPI__midas_stairs9 = {"_p_inlib__SOPI__midas_stairs9", "inlib::SOPI::midas_stairs9 *", 0, 0, (void*)&_wrap_class_SOPI_midas_stairs9, 0};
static swig_type_info _swigt__p_inlib__SOPI__orange32 = {"_p_inlib__SOPI__orange32", "inlib::SOPI::orange32 *", 0, 0, (void*)&_wrap_class_SOPI_orange32, 0};
static swig_type_info _swigt__p_inlib__SOPI__red32 = {"_p_inlib__SOPI__red32", "inlib::SOPI::red32 *", 0, 0, (void*)&_wrap_class_SOPI_red32, 0};
static swig_type_info _swigt__p_inlib__SOPI__rgb216 = {"_p_inlib__SOPI__rgb216", "inlib::SOPI::rgb216 *", 0, 0, (void*)&_wrap_class_SOPI_rgb216, 0};
static swig_type_info _swigt__p_inlib__SOPI__rgb32768 = {"_p_inlib__SOPI__rgb32768", "inlib::SOPI::rgb32768 *", 0, 0, (void*)&_wrap_class_SOPI_rgb32768, 0};
static swig_type_info _swigt__p_inlib__SOPI__rgb4096 = {"_p_inlib__SOPI__rgb4096", "inlib::SOPI::rgb4096 *", 0, 0, (void*)&_wrap_class_SOPI_rgb4096, 0};
static swig_type_info _swigt__p_inlib__SOPI__rgb512 = {"_p_inlib__SOPI__rgb512", "inlib::SOPI::rgb512 *", 0, 0, (void*)&_wrap_class_SOPI_rgb512, 0};
static swig_type_info _swigt__p_inlib__SOPI__violet32 = {"_p_inlib__SOPI__violet32", "inlib::SOPI::violet32 *", 0, 0, (void*)&_wrap_class_SOPI_violet32, 0};
static swig_type_info _swigt__p_inlib__SOPI__yellow32 = {"_p_inlib__SOPI__yellow32", "inlib::SOPI::yellow32 *", 0, 0, (void*)&_wrap_class_SOPI_yellow32, 0};
static swig_type_info _swigt__p_inlib__args = {"_p_inlib__args", "inlib::args *", 0, 0, (void*)&_wrap_class_args, 0};
static swig_type_info _swigt__p_inlib__box3d = {"_p_inlib__box3d", "inlib::box3d *", 0, 0, (void*)&_wrap_class_box3d, 0};
static swig_type_info _swigt__p_inlib__box3f = {"_p_inlib__box3f", "inlib::box3f *", 0, 0, (void*)&_wrap_class_box3f, 0};
static swig_type_info _swigt__p_inlib__colorf = {"_p_inlib__colorf", "inlib::colorf *", 0, 0, (void*)&_wrap_class_colorf, 0};
static swig_type_info _swigt__p_inlib__hep__polyhedron = {"_p_inlib__hep__polyhedron", "inlib::hep::polyhedron *", 0, 0, (void*)&_wrap_class_polyhedron, 0};
static swig_type_info _swigt__p_inlib__hep__polyhedron_tubs = {"_p_inlib__hep__polyhedron_tubs", "inlib::hep::polyhedron_tubs *", 0, 0, (void*)&_wrap_class_hep_polyhedron_tubs, 0};
static swig_type_info _swigt__p_inlib__hep__sf_polyhedron = {"_p_inlib__hep__sf_polyhedron", "inlib::hep::sf_polyhedron *", 0, 0, (void*)&_wrap_class_sf_polyhedron, 0};
static swig_type_info _swigt__p_inlib__histo__c2d = {"_p_inlib__histo__c2d", "inlib::histo::c2d *", 0, 0, (void*)&_wrap_class_histo_c2d, 0};
static swig_type_info _swigt__p_inlib__histo__c3d = {"_p_inlib__histo__c3d", "inlib::histo::c3d *", 0, 0, (void*)&_wrap_class_histo_c3d, 0};
static swig_type_info _swigt__p_inlib__histo__h1d = {"_p_inlib__histo__h1d", "inlib::histo::h1d *", 0, 0, (void*)&_wrap_class_histo_h1d, 0};
static swig_type_info _swigt__p_inlib__histo__h2d = {"_p_inlib__histo__h2d", "inlib::histo::h2d *", 0, 0, (void*)&_wrap_class_histo_h2d, 0};
static swig_type_info _swigt__p_inlib__histo__h3d = {"_p_inlib__histo__h3d", "inlib::histo::h3d *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__histo__p1d = {"_p_inlib__histo__p1d", "inlib::histo::p1d *", 0, 0, (void*)&_wrap_class_histo_p1d, 0};
static swig_type_info _swigt__p_inlib__histo__p2d = {"_p_inlib__histo__p2d", "inlib::histo::p2d *", 0, 0, (void*)&_wrap_class_histo_p2d, 0};
static swig_type_info _swigt__p_inlib__imgT_inlib__byte_t = {"_p_inlib__imgT_inlib__byte_t", "inlib::img< inlib::byte > *", 0, 0, (void*)&_wrap_class_img_byte, 0};
static swig_type_info _swigt__p_inlib__lineT_inlib__vec3f_t = {"_p_inlib__lineT_inlib__vec3f_t", "inlib::line< inlib::vec3f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__lutT_double_t = {"_p_inlib__lutT_double_t", "inlib::lut< double > *", 0, 0, (void*)&_wrap_class_lut_double, 0};
static swig_type_info _swigt__p_inlib__lutT_float_t = {"_p_inlib__lutT_float_t", "inlib::lut< float > *", 0, 0, (void*)&_wrap_class_lut_float, 0};
static swig_type_info _swigt__p_inlib__mat4f = {"_p_inlib__mat4f", "inlib::mat4f *", 0, 0, (void*)&_wrap_class_mat4f, 0};
static swig_type_info _swigt__p_inlib__net__base_socket = {"_p_inlib__net__base_socket", "inlib::net::base_socket *", 0, 0, (void*)&_wrap_class_base_socket, 0};
static swig_type_info _swigt__p_inlib__net__inet_socket = {"_p_inlib__net__inet_socket", "inlib::net::inet_socket *", 0, 0, (void*)&_wrap_class_net_inet_socket, 0};
static swig_type_info _swigt__p_inlib__net__sg_client = {"_p_inlib__net__sg_client", "inlib::net::sg_client *", 0, 0, (void*)&_wrap_class_net_sg_client, 0};
static swig_type_info _swigt__p_inlib__opener = {"_p_inlib__opener", "inlib::opener *", 0, 0, (void*)&_wrap_class_opener, 0};
static swig_type_info _swigt__p_inlib__printer = {"_p_inlib__printer", "inlib::printer *", 0, 0, (void*)&_wrap_class_printer, 0};
static swig_type_info _swigt__p_inlib__random__bw = {"_p_inlib__random__bw", "inlib::random::bw *", 0, 0, (void*)&_wrap_class_random_bw, 0};
static swig_type_info _swigt__p_inlib__random__exp = {"_p_inlib__random__exp", "inlib::random::exp *", 0, 0, (void*)&_wrap_class_random_exp, 0};
static swig_type_info _swigt__p_inlib__random__flat = {"_p_inlib__random__flat", "inlib::random::flat *", 0, 0, (void*)&_wrap_class_random_flat, 0};
static swig_type_info _swigt__p_inlib__random__gauss = {"_p_inlib__random__gauss", "inlib::random::gauss *", 0, 0, (void*)&_wrap_class_random_gauss, 0};
static swig_type_info _swigt__p_inlib__rbwd = {"_p_inlib__rbwd", "inlib::rbwd *", 0, 0, (void*)&_wrap_class_rbwd, 0};
static swig_type_info _swigt__p_inlib__rdir2d = {"_p_inlib__rdir2d", "inlib::rdir2d *", 0, 0, (void*)&_wrap_class_rdir2d, 0};
static swig_type_info _swigt__p_inlib__rdir3d = {"_p_inlib__rdir3d", "inlib::rdir3d *", 0, 0, (void*)&_wrap_class_rdir3d, 0};
static swig_type_info _swigt__p_inlib__rexpd = {"_p_inlib__rexpd", "inlib::rexpd *", 0, 0, (void*)&_wrap_class_rexpd, 0};
static swig_type_info _swigt__p_inlib__rgaussd = {"_p_inlib__rgaussd", "inlib::rgaussd *", 0, 0, (void*)&_wrap_class_rgaussd, 0};
static swig_type_info _swigt__p_inlib__rotd = {"_p_inlib__rotd", "inlib::rotd *", 0, 0, (void*)&_wrap_class_rotd, 0};
static swig_type_info _swigt__p_inlib__rotf = {"_p_inlib__rotf", "inlib::rotf *", 0, 0, (void*)&_wrap_class_rotf, 0};
static swig_type_info _swigt__p_inlib__rroot__TDirectory = {"_p_inlib__rroot__TDirectory", "inlib::rroot::TDirectory *", 0, 0, (void*)&_wrap_class_TDirectory, 0};
static swig_type_info _swigt__p_inlib__rroot__base_leaf = {"_p_inlib__rroot__base_leaf", "inlib::rroot::base_leaf *", 0, 0, (void*)&_wrap_class_rroot_base_leaf, 0};
static swig_type_info _swigt__p_inlib__rroot__branch = {"_p_inlib__rroot__branch", "inlib::rroot::branch *", 0, 0, (void*)&_wrap_class_rroot_branch, 0};
static swig_type_info _swigt__p_inlib__rroot__directory = {"_p_inlib__rroot__directory", "inlib::rroot::directory *", 0, 0, (void*)&_wrap_class_directory, 0};
static swig_type_info _swigt__p_inlib__rroot__fac = {"_p_inlib__rroot__fac", "inlib::rroot::fac *", 0, 0, (void*)&_wrap_class_rroot_fac, 0};
static swig_type_info _swigt__p_inlib__rroot__file = {"_p_inlib__rroot__file", "inlib::rroot::file *", 0, 0, (void*)&_wrap_class_rroot_file, 0};
static swig_type_info _swigt__p_inlib__rroot__ifac = {"_p_inlib__rroot__ifac", "inlib::rroot::ifac *", 0, 0, (void*)&_wrap_class_ifac, 0};
static swig_type_info _swigt__p_inlib__rroot__ifile = {"_p_inlib__rroot__ifile", "inlib::rroot::ifile *", 0, 0, (void*)&_wrap_class_ifile, 0};
static swig_type_info _swigt__p_inlib__rroot__key = {"_p_inlib__rroot__key", "inlib::rroot::key *", 0, 0, (void*)&_wrap_class_key, 0};
static swig_type_info _swigt__p_inlib__rroot__leafT_double_t = {"_p_inlib__rroot__leafT_double_t", "inlib::rroot::leaf< double > *", 0, 0, (void*)&_wrap_class_rroot_leaf_double, 0};
static swig_type_info _swigt__p_inlib__rroot__leafT_float_t = {"_p_inlib__rroot__leafT_float_t", "inlib::rroot::leaf< float > *", 0, 0, (void*)&_wrap_class_rroot_leaf_float, 0};
static swig_type_info _swigt__p_inlib__rroot__leafT_int_t = {"_p_inlib__rroot__leafT_int_t", "inlib::rroot::leaf< int > *", 0, 0, (void*)&_wrap_class_rroot_leaf_int, 0};
static swig_type_info _swigt__p_inlib__rroot__tree = {"_p_inlib__rroot__tree", "inlib::rroot::tree *", 0, 0, (void*)&_wrap_class_rroot_tree, 0};
static swig_type_info _swigt__p_inlib__rtausmed = {"_p_inlib__rtausmed", "inlib::rtausmed *", 0, 0, (void*)&_wrap_class_rtausmed, 0};
static swig_type_info _swigt__p_inlib__rtausmeui = {"_p_inlib__rtausmeui", "inlib::rtausmeui *", 0, 0, (void*)&_wrap_class_rtausmeui, 0};
static swig_type_info _swigt__p_inlib__sg__area_style = {"_p_inlib__sg__area_style", "enum inlib::sg::area_style *|inlib::sg::area_style *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__atb_vertices = {"_p_inlib__sg__atb_vertices", "inlib::sg::atb_vertices *", 0, 0, (void*)&_wrap_class_sg_atb_vertices, 0};
static swig_type_info _swigt__p_inlib__sg__base_camera = {"_p_inlib__sg__base_camera", "inlib::sg::base_camera *", 0, 0, (void*)&_wrap_class_sg_base_camera, 0};
static swig_type_info _swigt__p_inlib__sg__base_freetype = {"_p_inlib__sg__base_freetype", "inlib::sg::base_freetype *", 0, 0, (void*)&_wrap_class_base_freetype, 0};
static swig_type_info _swigt__p_inlib__sg__base_tex = {"_p_inlib__sg__base_tex", "inlib::sg::base_tex *", 0, 0, (void*)&_wrap_class_sg_base_tex, 0};
static swig_type_info _swigt__p_inlib__sg__blend = {"_p_inlib__sg__blend", "inlib::sg::blend *", 0, 0, (void*)&_wrap_class_sg_blend, 0};
static swig_type_info _swigt__p_inlib__sg__colored_sized_points = {"_p_inlib__sg__colored_sized_points", "inlib::sg::colored_sized_points *", 0, 0, (void*)&_wrap_class_sg_colored_sized_points, 0};
static swig_type_info _swigt__p_inlib__sg__cone_hat = {"_p_inlib__sg__cone_hat", "inlib::sg::cone_hat *", 0, 0, (void*)&_wrap_class_sg_cone_hat, 0};
static swig_type_info _swigt__p_inlib__sg__cube = {"_p_inlib__sg__cube", "inlib::sg::cube *", 0, 0, (void*)&_wrap_class_sg_cube, 0};
static swig_type_info _swigt__p_inlib__sg__draw_style = {"_p_inlib__sg__draw_style", "inlib::sg::draw_style *", 0, 0, (void*)&_wrap_class_sg_draw_style, 0};
static swig_type_info _swigt__p_inlib__sg__draw_type = {"_p_inlib__sg__draw_type", "enum inlib::sg::draw_type *|inlib::sg::draw_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__font_modeling = {"_p_inlib__sg__font_modeling", "enum inlib::sg::font_modeling *|inlib::sg::font_modeling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__frustum = {"_p_inlib__sg__frustum", "inlib::sg::frustum *", 0, 0, (void*)&_wrap_class_sg_frustum, 0};
static swig_type_info _swigt__p_inlib__sg__gl2ps_action = {"_p_inlib__sg__gl2ps_action", "inlib::sg::gl2ps_action *", 0, 0, (void*)&_wrap_class_sg_gl2ps_action, 0};
static swig_type_info _swigt__p_inlib__sg__gl2ps_manager = {"_p_inlib__sg__gl2ps_manager", "inlib::sg::gl2ps_manager *", 0, 0, (void*)&_wrap_class_sg_gl2ps_manager, 0};
static swig_type_info _swigt__p_inlib__sg__group = {"_p_inlib__sg__group", "inlib::sg::group *", 0, 0, (void*)&_wrap_class_sg_group, 0};
static swig_type_info _swigt__p_inlib__sg__gui_viewer = {"_p_inlib__sg__gui_viewer", "inlib::sg::gui_viewer *", 0, 0, (void*)&_wrap_class_gui_viewer, 0};
static swig_type_info _swigt__p_inlib__sg__guiv = {"_p_inlib__sg__guiv", "inlib::sg::guiv *", 0, 0, (void*)&_wrap_class_guiv, 0};
static swig_type_info _swigt__p_inlib__sg__h1d2plot = {"_p_inlib__sg__h1d2plot", "inlib::sg::h1d2plot *", 0, 0, (void*)&_wrap_class_h1d2plot, 0};
static swig_type_info _swigt__p_inlib__sg__h1d2plot_cp = {"_p_inlib__sg__h1d2plot_cp", "inlib::sg::h1d2plot_cp *", 0, 0, (void*)&_wrap_class_h1d2plot_cp, 0};
static swig_type_info _swigt__p_inlib__sg__hatching_policy = {"_p_inlib__sg__hatching_policy", "enum inlib::sg::hatching_policy *|inlib::sg::hatching_policy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__head_light = {"_p_inlib__sg__head_light", "inlib::sg::head_light *", 0, 0, (void*)&_wrap_class_sg_head_light, 0};
static swig_type_info _swigt__p_inlib__sg__hjust = {"_p_inlib__sg__hjust", "enum inlib::sg::hjust *|inlib::sg::hjust *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__lrbt = {"_p_inlib__sg__lrbt", "inlib::sg::lrbt *", 0, 0, (void*)&_wrap_class_sg_lrbt, 0};
static swig_type_info _swigt__p_inlib__sg__marker_style = {"_p_inlib__sg__marker_style", "enum inlib::sg::marker_style *|inlib::sg::marker_style *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__matrix = {"_p_inlib__sg__matrix", "inlib::sg::matrix *", 0, 0, (void*)&_wrap_class_sg_matrix, 0};
static swig_type_info _swigt__p_inlib__sg__mfT_float_t = {"_p_inlib__sg__mfT_float_t", "inlib::sg::mf< float > *", 0, 0, (void*)&_wrap_class_mf_float, 0};
static swig_type_info _swigt__p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t = {"_p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t", "inlib::sg::mf_enum< inlib::sg::plotter::unit_type > *", 0, 0, (void*)&_wrap_class_mf_enum_unit_type, 0};
static swig_type_info _swigt__p_inlib__sg__mf_string = {"_p_inlib__sg__mf_string", "inlib::sg::mf_string *", 0, 0, (void*)&_wrap_class_mf_string, 0};
static swig_type_info _swigt__p_inlib__sg__mf_vecT_inlib__vec2f_float_t = {"_p_inlib__sg__mf_vecT_inlib__vec2f_float_t", "inlib::sg::mf_vec< inlib::vec2f,float > *", 0, 0, (void*)&_wrap_class_mf_vec_vec2f, 0};
static swig_type_info _swigt__p_inlib__sg__node = {"_p_inlib__sg__node", "inlib::sg::node *", 0, 0, (void*)&_wrap_class_sg_node, 0};
static swig_type_info _swigt__p_inlib__sg__ortho = {"_p_inlib__sg__ortho", "inlib::sg::ortho *", 0, 0, (void*)&_wrap_class_sg_ortho, 0};
static swig_type_info _swigt__p_inlib__sg__painting_policy = {"_p_inlib__sg__painting_policy", "enum inlib::sg::painting_policy *|inlib::sg::painting_policy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__perspective = {"_p_inlib__sg__perspective", "inlib::sg::perspective *", 0, 0, (void*)&_wrap_class_sg_perspective, 0};
static swig_type_info _swigt__p_inlib__sg__plots = {"_p_inlib__sg__plots", "inlib::sg::plots *", 0, 0, (void*)&_wrap_class_sg_plots, 0};
static swig_type_info _swigt__p_inlib__sg__plottable = {"_p_inlib__sg__plottable", "inlib::sg::plottable *", 0, 0, (void*)&_wrap_class_plottable, 0};
static swig_type_info _swigt__p_inlib__sg__plotter = {"_p_inlib__sg__plotter", "inlib::sg::plotter *", 0, 0, (void*)&_wrap_class_sg_plotter, 0};
static swig_type_info _swigt__p_inlib__sg__plotter__colormap_axis_labeling_type = {"_p_inlib__sg__plotter__colormap_axis_labeling_type", "enum inlib::sg::plotter::colormap_axis_labeling_type *|inlib::sg::plotter::colormap_axis_labeling_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__plotter__shape_type = {"_p_inlib__sg__plotter__shape_type", "enum inlib::sg::plotter::shape_type *|inlib::sg::plotter::shape_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__polyhedron = {"_p_inlib__sg__polyhedron", "inlib::sg::polyhedron *", 0, 0, (void*)&_wrap_class_sg_polyhedron, 0};
static swig_type_info _swigt__p_inlib__sg__projection_type = {"_p_inlib__sg__projection_type", "enum inlib::sg::projection_type *|inlib::sg::projection_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__render_action = {"_p_inlib__sg__render_action", "inlib::sg::render_action *", 0, 0, (void*)&_wrap_class_render_action, 0};
static swig_type_info _swigt__p_inlib__sg__render_manager = {"_p_inlib__sg__render_manager", "inlib::sg::render_manager *", 0, 0, (void*)&_wrap_class_render_manager, 0};
static swig_type_info _swigt__p_inlib__sg__rgba = {"_p_inlib__sg__rgba", "inlib::sg::rgba *", 0, 0, (void*)&_wrap_class_sg_rgba, 0};
static swig_type_info _swigt__p_inlib__sg__selection = {"_p_inlib__sg__selection", "inlib::sg::selection *", 0, 0, (void*)&_wrap_class_sg_selection, 0};
static swig_type_info _swigt__p_inlib__sg__separator = {"_p_inlib__sg__separator", "inlib::sg::separator *", 0, 0, (void*)&_wrap_class_sg_separator, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_bool_t = {"_p_inlib__sg__sfT_bool_t", "inlib::sg::sf< bool > *", 0, 0, (void*)&_wrap_class_sf_bool, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_float_t = {"_p_inlib__sg__sfT_float_t", "inlib::sg::sf< float > *", 0, 0, (void*)&_wrap_class_sf_float, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_int_t = {"_p_inlib__sg__sfT_int_t", "inlib::sg::sf< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_unsigned_char_t = {"_p_inlib__sg__sfT_unsigned_char_t", "inlib::sg::sf< unsigned char > *|inlib::sg::sf< inlib::gl::mode_t > *", 0, 0, (void*)&_wrap_class_sf_mode_t, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_unsigned_int_t = {"_p_inlib__sg__sfT_unsigned_int_t", "inlib::sg::sf< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__sfT_unsigned_short_t = {"_p_inlib__sg__sfT_unsigned_short_t", "inlib::sg::sf< unsigned short > *|inlib::sg::sf< inlib::sg::lpat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__area_style_t = {"_p_inlib__sg__sf_enumT_inlib__sg__area_style_t", "inlib::sg::sf_enum< inlib::sg::area_style > *", 0, 0, (void*)&_wrap_class_sf_enum_area_style, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__draw_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__draw_type_t", "inlib::sg::sf_enum< inlib::sg::draw_type > *", 0, 0, (void*)&_wrap_class_sf_enum_draw_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t = {"_p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t", "inlib::sg::sf_enum< inlib::sg::font_modeling > *", 0, 0, (void*)&_wrap_class_sf_enum_font_modeling, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t = {"_p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t", "inlib::sg::sf_enum< inlib::sg::hatching_policy > *", 0, 0, (void*)&_wrap_class_sf_enum_hatching_policy, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__hjust_t = {"_p_inlib__sg__sf_enumT_inlib__sg__hjust_t", "inlib::sg::sf_enum< inlib::sg::hjust > *", 0, 0, (void*)&_wrap_class_sf_enum_hjust, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__marker_style_t = {"_p_inlib__sg__sf_enumT_inlib__sg__marker_style_t", "inlib::sg::sf_enum< inlib::sg::marker_style > *", 0, 0, (void*)&_wrap_class_sf_enum_marker_style, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t = {"_p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t", "inlib::sg::sf_enum< inlib::sg::painting_policy > *", 0, 0, (void*)&_wrap_class_sf_enum_painting_policy, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t", "inlib::sg::sf_enum< inlib::sg::plotter::colormap_axis_labeling_type > *", 0, 0, (void*)&_wrap_class_sf_enum_colormap_axis_labeling_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t", "inlib::sg::sf_enum< inlib::sg::plotter::shape_type > *", 0, 0, (void*)&_wrap_class_sf_enum_shape_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__projection_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__projection_type_t", "inlib::sg::sf_enum< inlib::sg::projection_type > *", 0, 0, (void*)&_wrap_class_sf_enum_projection_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__shade_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__shade_type_t", "inlib::sg::sf_enum< inlib::sg::shade_type > *", 0, 0, (void*)&_wrap_class_sf_enum_shade_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__vjust_t = {"_p_inlib__sg__sf_enumT_inlib__sg__vjust_t", "inlib::sg::sf_enum< inlib::sg::vjust > *", 0, 0, (void*)&_wrap_class_sf_enum_vjust, 0};
static swig_type_info _swigt__p_inlib__sg__sf_enumT_inlib__sg__winding_type_t = {"_p_inlib__sg__sf_enumT_inlib__sg__winding_type_t", "inlib::sg::sf_enum< inlib::sg::winding_type > *", 0, 0, (void*)&_wrap_class_sf_enum_winding_type, 0};
static swig_type_info _swigt__p_inlib__sg__sf_imgT_inlib__byte_t = {"_p_inlib__sg__sf_imgT_inlib__byte_t", "inlib::sg::sf_img< inlib::byte > *", 0, 0, (void*)&_wrap_class_sf_img_byte, 0};
static swig_type_info _swigt__p_inlib__sg__sf_mat4f = {"_p_inlib__sg__sf_mat4f", "inlib::sg::sf_mat4f *", 0, 0, (void*)&_wrap_class_sf_mat4f, 0};
static swig_type_info _swigt__p_inlib__sg__sf_rotf = {"_p_inlib__sg__sf_rotf", "inlib::sg::sf_rotf *", 0, 0, (void*)&_wrap_class_sf_rotf, 0};
static swig_type_info _swigt__p_inlib__sg__sf_string = {"_p_inlib__sg__sf_string", "inlib::sg::sf_string *", 0, 0, (void*)&_wrap_class_sf_string, 0};
static swig_type_info _swigt__p_inlib__sg__sf_vec3f = {"_p_inlib__sg__sf_vec3f", "inlib::sg::sf_vec3f *", 0, 0, (void*)&_wrap_class_sf_vec3f, 0};
static swig_type_info _swigt__p_inlib__sg__sf_vecT_inlib__colorf_float_t = {"_p_inlib__sg__sf_vecT_inlib__colorf_float_t", "inlib::sg::sf_vec< inlib::colorf,float > *", 0, 0, (void*)&_wrap_class_sf_vec_colorf, 0};
static swig_type_info _swigt__p_inlib__sg__shade_model = {"_p_inlib__sg__shade_model", "inlib::sg::shade_model *", 0, 0, (void*)&_wrap_class_sg_shade_model, 0};
static swig_type_info _swigt__p_inlib__sg__shade_type = {"_p_inlib__sg__shade_type", "enum inlib::sg::shade_type *|inlib::sg::shade_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__sphere = {"_p_inlib__sg__sphere", "inlib::sg::sphere *", 0, 0, (void*)&_wrap_class_sg_sphere, 0};
static swig_type_info _swigt__p_inlib__sg__style = {"_p_inlib__sg__style", "inlib::sg::style *", 0, 0, (void*)&_wrap_class_style, 0};
static swig_type_info _swigt__p_inlib__sg__style_ROOT_colormap = {"_p_inlib__sg__style_ROOT_colormap", "inlib::sg::style_ROOT_colormap *", 0, 0, (void*)&_wrap_class_sg_style_ROOT_colormap, 0};
static swig_type_info _swigt__p_inlib__sg__style_colormap = {"_p_inlib__sg__style_colormap", "inlib::sg::style_colormap *", 0, 0, (void*)&_wrap_class_sg_style_colormap, 0};
static swig_type_info _swigt__p_inlib__sg__style_default_colormap = {"_p_inlib__sg__style_default_colormap", "inlib::sg::style_default_colormap *", 0, 0, (void*)&_wrap_class_sg_style_default_colormap, 0};
static swig_type_info _swigt__p_inlib__sg__tex_rect = {"_p_inlib__sg__tex_rect", "inlib::sg::tex_rect *", 0, 0, (void*)&_wrap_class_sg_tex_rect, 0};
static swig_type_info _swigt__p_inlib__sg__text_style = {"_p_inlib__sg__text_style", "inlib::sg::text_style *", 0, 0, (void*)&_wrap_class_text_style, 0};
static swig_type_info _swigt__p_inlib__sg__torche = {"_p_inlib__sg__torche", "inlib::sg::torche *", 0, 0, (void*)&_wrap_class_sg_torche, 0};
static swig_type_info _swigt__p_inlib__sg__vertices = {"_p_inlib__sg__vertices", "inlib::sg::vertices *", 0, 0, (void*)&_wrap_class_sg_vertices, 0};
static swig_type_info _swigt__p_inlib__sg__viewer = {"_p_inlib__sg__viewer", "inlib::sg::viewer *", 0, 0, (void*)&_wrap_class_viewer, 0};
static swig_type_info _swigt__p_inlib__sg__vjust = {"_p_inlib__sg__vjust", "enum inlib::sg::vjust *|inlib::sg::vjust *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__winding_type = {"_p_inlib__sg__winding_type", "enum inlib::sg::winding_type *|inlib::sg::winding_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__sg__write_action = {"_p_inlib__sg__write_action", "inlib::sg::write_action *", 0, 0, (void*)&_wrap_class_write_action, 0};
static swig_type_info _swigt__p_inlib__sg__write_bsg = {"_p_inlib__sg__write_bsg", "inlib::sg::write_bsg *", 0, 0, (void*)&_wrap_class_sg_write_bsg, 0};
static swig_type_info _swigt__p_inlib__sg__zb_action = {"_p_inlib__sg__zb_action", "inlib::sg::zb_action *", 0, 0, (void*)&_wrap_class_sg_zb_action, 0};
static swig_type_info _swigt__p_inlib__sg__zb_manager = {"_p_inlib__sg__zb_manager", "inlib::sg::zb_manager *", 0, 0, (void*)&_wrap_class_sg_zb_manager, 0};
static swig_type_info _swigt__p_inlib__std_string = {"_p_inlib__std_string", "inlib::std_string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_inlib__uchar = {"_p_inlib__uchar", "inlib::uchar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__ushort = {"_p_inlib__ushort", "inlib::ushort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inlib__vec2f = {"_p_inlib__vec2f", "inlib::vec2f *", 0, 0, (void*)&_wrap_class_vec2f, 0};
static swig_type_info _swigt__p_inlib__vec3d = {"_p_inlib__vec3d", "inlib::vec3d *", 0, 0, (void*)&_wrap_class_vec3d, 0};
static swig_type_info _swigt__p_inlib__vec3f = {"_p_inlib__vec3f", "inlib::vec3f *", 0, 0, (void*)&_wrap_class_vec3f, 0};
static swig_type_info _swigt__p_inlib__waxml__file = {"_p_inlib__waxml__file", "inlib::waxml::file *", 0, 0, (void*)&_wrap_class_waxml_file, 0};
static swig_type_info _swigt__p_inlib__wps = {"_p_inlib__wps", "inlib::wps *", 0, 0, (void*)&_wrap_class_wps, 0};
static swig_type_info _swigt__p_inlib__xml__styles = {"_p_inlib__xml__styles", "inlib::xml::styles *", 0, 0, (void*)&_wrap_class_xml_styles, 0};
static swig_type_info _swigt__p_inlib__zb__buffer = {"_p_inlib__zb__buffer", "inlib::zb::buffer *", 0, 0, (void*)&_wrap_class_zb_buffer, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_std_vector_double, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_std_vector_float, 0};
static swig_type_info _swigt__p_std__vectorT_inlib__rroot__key_p_t = {"_p_std__vectorT_inlib__rroot__key_p_t", "std::vector< inlib::rroot::key * > *", 0, 0, (void*)&_wrap_class_std_vector_keys, 0};
static swig_type_info _swigt__p_std__vectorT_inlib__sg__plotter__unit_type_t = {"_p_std__vectorT_inlib__sg__plotter__unit_type_t", "std::vector< enum inlib::sg::plotter::unit_type > *|std::vector< inlib::sg::plotter::unit_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_inlib__vec2f_t = {"_p_std__vectorT_inlib__vec2f_t", "std::vector< inlib::vec2f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_int, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_std_vector_uint, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|inlib::gl::mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|inlib::sg::lpat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ZPixel,
  &_swigt__p_bool,
  &_swigt__p_difference_type,
  &_swigt__p_float,
  &_swigt__p_inlib__SOPI__blue32,
  &_swigt__p_inlib__SOPI__cmap,
  &_swigt__p_inlib__SOPI__col16,
  &_swigt__p_inlib__SOPI__col64,
  &_swigt__p_inlib__SOPI__colbr128,
  &_swigt__p_inlib__SOPI__colbr32,
  &_swigt__p_inlib__SOPI__color,
  &_swigt__p_inlib__SOPI__colrj128,
  &_swigt__p_inlib__SOPI__colrj32,
  &_swigt__p_inlib__SOPI__colrv32,
  &_swigt__p_inlib__SOPI__cyan32,
  &_swigt__p_inlib__SOPI__green32,
  &_swigt__p_inlib__SOPI__grey128,
  &_swigt__p_inlib__SOPI__grey256,
  &_swigt__p_inlib__SOPI__grey32,
  &_swigt__p_inlib__SOPI__greyinv128,
  &_swigt__p_inlib__SOPI__greyinv32,
  &_swigt__p_inlib__SOPI__midas_bluered,
  &_swigt__p_inlib__SOPI__midas_bluewhite,
  &_swigt__p_inlib__SOPI__midas_color,
  &_swigt__p_inlib__SOPI__midas_heat,
  &_swigt__p_inlib__SOPI__midas_idl14,
  &_swigt__p_inlib__SOPI__midas_idl15,
  &_swigt__p_inlib__SOPI__midas_manycol,
  &_swigt__p_inlib__SOPI__midas_pastel,
  &_swigt__p_inlib__SOPI__midas_rainbow3,
  &_swigt__p_inlib__SOPI__midas_staircase,
  &_swigt__p_inlib__SOPI__midas_stairs8,
  &_swigt__p_inlib__SOPI__midas_stairs9,
  &_swigt__p_inlib__SOPI__orange32,
  &_swigt__p_inlib__SOPI__red32,
  &_swigt__p_inlib__SOPI__rgb216,
  &_swigt__p_inlib__SOPI__rgb32768,
  &_swigt__p_inlib__SOPI__rgb4096,
  &_swigt__p_inlib__SOPI__rgb512,
  &_swigt__p_inlib__SOPI__violet32,
  &_swigt__p_inlib__SOPI__yellow32,
  &_swigt__p_inlib__args,
  &_swigt__p_inlib__box3d,
  &_swigt__p_inlib__box3f,
  &_swigt__p_inlib__colorf,
  &_swigt__p_inlib__hep__polyhedron,
  &_swigt__p_inlib__hep__polyhedron_tubs,
  &_swigt__p_inlib__hep__sf_polyhedron,
  &_swigt__p_inlib__histo__c2d,
  &_swigt__p_inlib__histo__c3d,
  &_swigt__p_inlib__histo__h1d,
  &_swigt__p_inlib__histo__h2d,
  &_swigt__p_inlib__histo__h3d,
  &_swigt__p_inlib__histo__p1d,
  &_swigt__p_inlib__histo__p2d,
  &_swigt__p_inlib__imgT_inlib__byte_t,
  &_swigt__p_inlib__lineT_inlib__vec3f_t,
  &_swigt__p_inlib__lutT_double_t,
  &_swigt__p_inlib__lutT_float_t,
  &_swigt__p_inlib__mat4f,
  &_swigt__p_inlib__net__base_socket,
  &_swigt__p_inlib__net__inet_socket,
  &_swigt__p_inlib__net__sg_client,
  &_swigt__p_inlib__opener,
  &_swigt__p_inlib__printer,
  &_swigt__p_inlib__random__bw,
  &_swigt__p_inlib__random__exp,
  &_swigt__p_inlib__random__flat,
  &_swigt__p_inlib__random__gauss,
  &_swigt__p_inlib__rbwd,
  &_swigt__p_inlib__rdir2d,
  &_swigt__p_inlib__rdir3d,
  &_swigt__p_inlib__rexpd,
  &_swigt__p_inlib__rgaussd,
  &_swigt__p_inlib__rotd,
  &_swigt__p_inlib__rotf,
  &_swigt__p_inlib__rroot__TDirectory,
  &_swigt__p_inlib__rroot__base_leaf,
  &_swigt__p_inlib__rroot__branch,
  &_swigt__p_inlib__rroot__directory,
  &_swigt__p_inlib__rroot__fac,
  &_swigt__p_inlib__rroot__file,
  &_swigt__p_inlib__rroot__ifac,
  &_swigt__p_inlib__rroot__ifile,
  &_swigt__p_inlib__rroot__key,
  &_swigt__p_inlib__rroot__leafT_double_t,
  &_swigt__p_inlib__rroot__leafT_float_t,
  &_swigt__p_inlib__rroot__leafT_int_t,
  &_swigt__p_inlib__rroot__tree,
  &_swigt__p_inlib__rtausmed,
  &_swigt__p_inlib__rtausmeui,
  &_swigt__p_inlib__sg__area_style,
  &_swigt__p_inlib__sg__atb_vertices,
  &_swigt__p_inlib__sg__base_camera,
  &_swigt__p_inlib__sg__base_freetype,
  &_swigt__p_inlib__sg__base_tex,
  &_swigt__p_inlib__sg__blend,
  &_swigt__p_inlib__sg__colored_sized_points,
  &_swigt__p_inlib__sg__cone_hat,
  &_swigt__p_inlib__sg__cube,
  &_swigt__p_inlib__sg__draw_style,
  &_swigt__p_inlib__sg__draw_type,
  &_swigt__p_inlib__sg__font_modeling,
  &_swigt__p_inlib__sg__frustum,
  &_swigt__p_inlib__sg__gl2ps_action,
  &_swigt__p_inlib__sg__gl2ps_manager,
  &_swigt__p_inlib__sg__group,
  &_swigt__p_inlib__sg__gui_viewer,
  &_swigt__p_inlib__sg__guiv,
  &_swigt__p_inlib__sg__h1d2plot,
  &_swigt__p_inlib__sg__h1d2plot_cp,
  &_swigt__p_inlib__sg__hatching_policy,
  &_swigt__p_inlib__sg__head_light,
  &_swigt__p_inlib__sg__hjust,
  &_swigt__p_inlib__sg__lrbt,
  &_swigt__p_inlib__sg__marker_style,
  &_swigt__p_inlib__sg__matrix,
  &_swigt__p_inlib__sg__mfT_float_t,
  &_swigt__p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,
  &_swigt__p_inlib__sg__mf_string,
  &_swigt__p_inlib__sg__mf_vecT_inlib__vec2f_float_t,
  &_swigt__p_inlib__sg__node,
  &_swigt__p_inlib__sg__ortho,
  &_swigt__p_inlib__sg__painting_policy,
  &_swigt__p_inlib__sg__perspective,
  &_swigt__p_inlib__sg__plots,
  &_swigt__p_inlib__sg__plottable,
  &_swigt__p_inlib__sg__plotter,
  &_swigt__p_inlib__sg__plotter__colormap_axis_labeling_type,
  &_swigt__p_inlib__sg__plotter__shape_type,
  &_swigt__p_inlib__sg__polyhedron,
  &_swigt__p_inlib__sg__projection_type,
  &_swigt__p_inlib__sg__render_action,
  &_swigt__p_inlib__sg__render_manager,
  &_swigt__p_inlib__sg__rgba,
  &_swigt__p_inlib__sg__selection,
  &_swigt__p_inlib__sg__separator,
  &_swigt__p_inlib__sg__sfT_bool_t,
  &_swigt__p_inlib__sg__sfT_float_t,
  &_swigt__p_inlib__sg__sfT_int_t,
  &_swigt__p_inlib__sg__sfT_unsigned_char_t,
  &_swigt__p_inlib__sg__sfT_unsigned_int_t,
  &_swigt__p_inlib__sg__sfT_unsigned_short_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__area_style_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__hjust_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__vjust_t,
  &_swigt__p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,
  &_swigt__p_inlib__sg__sf_imgT_inlib__byte_t,
  &_swigt__p_inlib__sg__sf_mat4f,
  &_swigt__p_inlib__sg__sf_rotf,
  &_swigt__p_inlib__sg__sf_string,
  &_swigt__p_inlib__sg__sf_vec3f,
  &_swigt__p_inlib__sg__sf_vecT_inlib__colorf_float_t,
  &_swigt__p_inlib__sg__shade_model,
  &_swigt__p_inlib__sg__shade_type,
  &_swigt__p_inlib__sg__sphere,
  &_swigt__p_inlib__sg__style,
  &_swigt__p_inlib__sg__style_ROOT_colormap,
  &_swigt__p_inlib__sg__style_colormap,
  &_swigt__p_inlib__sg__style_default_colormap,
  &_swigt__p_inlib__sg__tex_rect,
  &_swigt__p_inlib__sg__text_style,
  &_swigt__p_inlib__sg__torche,
  &_swigt__p_inlib__sg__vertices,
  &_swigt__p_inlib__sg__viewer,
  &_swigt__p_inlib__sg__vjust,
  &_swigt__p_inlib__sg__winding_type,
  &_swigt__p_inlib__sg__write_action,
  &_swigt__p_inlib__sg__write_bsg,
  &_swigt__p_inlib__sg__zb_action,
  &_swigt__p_inlib__sg__zb_manager,
  &_swigt__p_inlib__std_string,
  &_swigt__p_inlib__uchar,
  &_swigt__p_inlib__ushort,
  &_swigt__p_inlib__vec2f,
  &_swigt__p_inlib__vec3d,
  &_swigt__p_inlib__vec3f,
  &_swigt__p_inlib__waxml__file,
  &_swigt__p_inlib__wps,
  &_swigt__p_inlib__xml__styles,
  &_swigt__p_inlib__zb__buffer,
  &_swigt__p_size_type,
  &_swigt__p_std__ostream,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_inlib__rroot__key_p_t,
  &_swigt__p_std__vectorT_inlib__sg__plotter__unit_type_t,
  &_swigt__p_std__vectorT_inlib__vec2f_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_ZPixel[] = {  {&_swigt__p_ZPixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__blue32[] = {  {&_swigt__p_inlib__SOPI__blue32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__cmap[] = {  {&_swigt__p_inlib__SOPI__midas_bluered, _p_inlib__SOPI__midas_blueredTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__rgb4096, _p_inlib__SOPI__rgb4096To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__rgb32768, _p_inlib__SOPI__rgb32768To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_idl14, _p_inlib__SOPI__midas_idl14To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__rgb512, _p_inlib__SOPI__rgb512To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_idl15, _p_inlib__SOPI__midas_idl15To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__violet32, _p_inlib__SOPI__violet32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__grey256, _p_inlib__SOPI__grey256To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__rgb216, _p_inlib__SOPI__rgb216To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_rainbow3, _p_inlib__SOPI__midas_rainbow3To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__greyinv128, _p_inlib__SOPI__greyinv128To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_pastel, _p_inlib__SOPI__midas_pastelTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__cmap, 0, 0, 0},  {&_swigt__p_inlib__SOPI__colrj32, _p_inlib__SOPI__colrj32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__green32, _p_inlib__SOPI__green32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__grey32, _p_inlib__SOPI__grey32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_bluewhite, _p_inlib__SOPI__midas_bluewhiteTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__colrv32, _p_inlib__SOPI__colrv32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__col16, _p_inlib__SOPI__col16To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_stairs8, _p_inlib__SOPI__midas_stairs8To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__colbr128, _p_inlib__SOPI__colbr128To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_stairs9, _p_inlib__SOPI__midas_stairs9To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__cyan32, _p_inlib__SOPI__cyan32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__yellow32, _p_inlib__SOPI__yellow32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__orange32, _p_inlib__SOPI__orange32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_manycol, _p_inlib__SOPI__midas_manycolTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__greyinv32, _p_inlib__SOPI__greyinv32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_color, _p_inlib__SOPI__midas_colorTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_staircase, _p_inlib__SOPI__midas_staircaseTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__col64, _p_inlib__SOPI__col64To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__blue32, _p_inlib__SOPI__blue32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__colbr32, _p_inlib__SOPI__colbr32To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__grey128, _p_inlib__SOPI__grey128To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__midas_heat, _p_inlib__SOPI__midas_heatTo_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__colrj128, _p_inlib__SOPI__colrj128To_p_inlib__SOPI__cmap, 0, 0},  {&_swigt__p_inlib__SOPI__red32, _p_inlib__SOPI__red32To_p_inlib__SOPI__cmap, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__col16[] = {  {&_swigt__p_inlib__SOPI__col16, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__col64[] = {  {&_swigt__p_inlib__SOPI__col64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__colbr128[] = {  {&_swigt__p_inlib__SOPI__colbr128, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__colbr32[] = {  {&_swigt__p_inlib__SOPI__colbr32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__color[] = {  {&_swigt__p_inlib__SOPI__color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__colrj128[] = {  {&_swigt__p_inlib__SOPI__colrj128, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__colrj32[] = {  {&_swigt__p_inlib__SOPI__colrj32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__colrv32[] = {  {&_swigt__p_inlib__SOPI__colrv32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__cyan32[] = {  {&_swigt__p_inlib__SOPI__cyan32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__green32[] = {  {&_swigt__p_inlib__SOPI__green32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__grey128[] = {  {&_swigt__p_inlib__SOPI__grey128, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__grey256[] = {  {&_swigt__p_inlib__SOPI__grey256, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__grey32[] = {  {&_swigt__p_inlib__SOPI__grey32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__greyinv128[] = {  {&_swigt__p_inlib__SOPI__greyinv128, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__greyinv32[] = {  {&_swigt__p_inlib__SOPI__greyinv32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_bluered[] = {  {&_swigt__p_inlib__SOPI__midas_bluered, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_bluewhite[] = {  {&_swigt__p_inlib__SOPI__midas_bluewhite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_color[] = {  {&_swigt__p_inlib__SOPI__midas_color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_heat[] = {  {&_swigt__p_inlib__SOPI__midas_heat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_idl14[] = {  {&_swigt__p_inlib__SOPI__midas_idl14, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_idl15[] = {  {&_swigt__p_inlib__SOPI__midas_idl15, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_manycol[] = {  {&_swigt__p_inlib__SOPI__midas_manycol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_pastel[] = {  {&_swigt__p_inlib__SOPI__midas_pastel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_rainbow3[] = {  {&_swigt__p_inlib__SOPI__midas_rainbow3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_staircase[] = {  {&_swigt__p_inlib__SOPI__midas_staircase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_stairs8[] = {  {&_swigt__p_inlib__SOPI__midas_stairs8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__midas_stairs9[] = {  {&_swigt__p_inlib__SOPI__midas_stairs9, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__orange32[] = {  {&_swigt__p_inlib__SOPI__orange32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__red32[] = {  {&_swigt__p_inlib__SOPI__red32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__rgb216[] = {  {&_swigt__p_inlib__SOPI__rgb216, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__rgb32768[] = {  {&_swigt__p_inlib__SOPI__rgb32768, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__rgb4096[] = {  {&_swigt__p_inlib__SOPI__rgb4096, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__rgb512[] = {  {&_swigt__p_inlib__SOPI__rgb512, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__violet32[] = {  {&_swigt__p_inlib__SOPI__violet32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__SOPI__yellow32[] = {  {&_swigt__p_inlib__SOPI__yellow32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__args[] = {  {&_swigt__p_inlib__args, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__box3d[] = {  {&_swigt__p_inlib__box3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__box3f[] = {  {&_swigt__p_inlib__box3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__colorf[] = {  {&_swigt__p_inlib__colorf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__hep__polyhedron[] = {  {&_swigt__p_inlib__hep__polyhedron, 0, 0, 0},  {&_swigt__p_inlib__hep__polyhedron_tubs, _p_inlib__hep__polyhedron_tubsTo_p_inlib__hep__polyhedron, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__hep__polyhedron_tubs[] = {  {&_swigt__p_inlib__hep__polyhedron_tubs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__hep__sf_polyhedron[] = {  {&_swigt__p_inlib__hep__sf_polyhedron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__c2d[] = {  {&_swigt__p_inlib__histo__c2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__c3d[] = {  {&_swigt__p_inlib__histo__c3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__h1d[] = {  {&_swigt__p_inlib__histo__h1d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__h2d[] = {  {&_swigt__p_inlib__histo__h2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__h3d[] = {  {&_swigt__p_inlib__histo__h3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__p1d[] = {  {&_swigt__p_inlib__histo__p1d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__histo__p2d[] = {  {&_swigt__p_inlib__histo__p2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__imgT_inlib__byte_t[] = {  {&_swigt__p_inlib__imgT_inlib__byte_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__lineT_inlib__vec3f_t[] = {  {&_swigt__p_inlib__lineT_inlib__vec3f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__lutT_double_t[] = {  {&_swigt__p_inlib__lutT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__lutT_float_t[] = {  {&_swigt__p_inlib__lutT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__mat4f[] = {  {&_swigt__p_inlib__mat4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__net__base_socket[] = {  {&_swigt__p_inlib__net__base_socket, 0, 0, 0},  {&_swigt__p_inlib__net__inet_socket, _p_inlib__net__inet_socketTo_p_inlib__net__base_socket, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__net__inet_socket[] = {  {&_swigt__p_inlib__net__inet_socket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__net__sg_client[] = {  {&_swigt__p_inlib__net__sg_client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__opener[] = {  {&_swigt__p_inlib__opener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__printer[] = {  {&_swigt__p_inlib__printer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__random__bw[] = {  {&_swigt__p_inlib__random__bw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__random__exp[] = {  {&_swigt__p_inlib__random__exp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__random__flat[] = {  {&_swigt__p_inlib__random__flat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__random__gauss[] = {  {&_swigt__p_inlib__random__gauss, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rbwd[] = {  {&_swigt__p_inlib__rbwd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rdir2d[] = {  {&_swigt__p_inlib__rdir2d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rdir3d[] = {  {&_swigt__p_inlib__rdir3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rexpd[] = {  {&_swigt__p_inlib__rexpd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rgaussd[] = {  {&_swigt__p_inlib__rgaussd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rotd[] = {  {&_swigt__p_inlib__rotd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rotf[] = {  {&_swigt__p_inlib__rotf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__TDirectory[] = {  {&_swigt__p_inlib__rroot__TDirectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__base_leaf[] = {  {&_swigt__p_inlib__rroot__base_leaf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__branch[] = {  {&_swigt__p_inlib__rroot__branch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__directory[] = {  {&_swigt__p_inlib__rroot__directory, 0, 0, 0},  {&_swigt__p_inlib__rroot__TDirectory, _p_inlib__rroot__TDirectoryTo_p_inlib__rroot__directory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__fac[] = {  {&_swigt__p_inlib__rroot__fac, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__file[] = {  {&_swigt__p_inlib__rroot__file, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__ifac[] = {  {&_swigt__p_inlib__rroot__fac, _p_inlib__rroot__facTo_p_inlib__rroot__ifac, 0, 0},  {&_swigt__p_inlib__rroot__ifac, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__ifile[] = {  {&_swigt__p_inlib__rroot__ifile, 0, 0, 0},  {&_swigt__p_inlib__rroot__file, _p_inlib__rroot__fileTo_p_inlib__rroot__ifile, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__key[] = {  {&_swigt__p_inlib__rroot__key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__leafT_double_t[] = {  {&_swigt__p_inlib__rroot__leafT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__leafT_float_t[] = {  {&_swigt__p_inlib__rroot__leafT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__leafT_int_t[] = {  {&_swigt__p_inlib__rroot__leafT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rroot__tree[] = {  {&_swigt__p_inlib__rroot__tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rtausmed[] = {  {&_swigt__p_inlib__rtausmed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__rtausmeui[] = {  {&_swigt__p_inlib__rtausmeui, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__area_style[] = {  {&_swigt__p_inlib__sg__area_style, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__atb_vertices[] = {  {&_swigt__p_inlib__sg__atb_vertices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__base_camera[] = {  {&_swigt__p_inlib__sg__frustum, _p_inlib__sg__frustumTo_p_inlib__sg__base_camera, 0, 0},  {&_swigt__p_inlib__sg__lrbt, _p_inlib__sg__lrbtTo_p_inlib__sg__base_camera, 0, 0},  {&_swigt__p_inlib__sg__perspective, _p_inlib__sg__perspectiveTo_p_inlib__sg__base_camera, 0, 0},  {&_swigt__p_inlib__sg__base_camera, 0, 0, 0},  {&_swigt__p_inlib__sg__ortho, _p_inlib__sg__orthoTo_p_inlib__sg__base_camera, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__base_freetype[] = {  {&_swigt__p_inlib__sg__base_freetype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__base_tex[] = {  {&_swigt__p_inlib__sg__tex_rect, _p_inlib__sg__tex_rectTo_p_inlib__sg__base_tex, 0, 0},  {&_swigt__p_inlib__sg__base_tex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__blend[] = {  {&_swigt__p_inlib__sg__blend, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__colored_sized_points[] = {  {&_swigt__p_inlib__sg__colored_sized_points, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__cone_hat[] = {  {&_swigt__p_inlib__sg__cone_hat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__cube[] = {  {&_swigt__p_inlib__sg__cube, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__draw_style[] = {  {&_swigt__p_inlib__sg__draw_style, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__draw_type[] = {  {&_swigt__p_inlib__sg__draw_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__font_modeling[] = {  {&_swigt__p_inlib__sg__font_modeling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__frustum[] = {  {&_swigt__p_inlib__sg__frustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__gl2ps_action[] = {  {&_swigt__p_inlib__sg__gl2ps_action, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__gl2ps_manager[] = {  {&_swigt__p_inlib__sg__gl2ps_manager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__group[] = {  {&_swigt__p_inlib__sg__separator, _p_inlib__sg__separatorTo_p_inlib__sg__group, 0, 0},  {&_swigt__p_inlib__sg__group, 0, 0, 0},  {&_swigt__p_inlib__sg__selection, _p_inlib__sg__selectionTo_p_inlib__sg__group, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__gui_viewer[] = {  {&_swigt__p_inlib__sg__gui_viewer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__guiv[] = {  {&_swigt__p_inlib__sg__guiv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__h1d2plot[] = {  {&_swigt__p_inlib__sg__h1d2plot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__h1d2plot_cp[] = {  {&_swigt__p_inlib__sg__h1d2plot_cp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__hatching_policy[] = {  {&_swigt__p_inlib__sg__hatching_policy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__head_light[] = {  {&_swigt__p_inlib__sg__head_light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__hjust[] = {  {&_swigt__p_inlib__sg__hjust, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__lrbt[] = {  {&_swigt__p_inlib__sg__lrbt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__marker_style[] = {  {&_swigt__p_inlib__sg__marker_style, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__matrix[] = {  {&_swigt__p_inlib__sg__matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__mfT_float_t[] = {  {&_swigt__p_inlib__sg__mfT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t[] = {  {&_swigt__p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__mf_string[] = {  {&_swigt__p_inlib__sg__mf_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__mf_vecT_inlib__vec2f_float_t[] = {  {&_swigt__p_inlib__sg__mf_vecT_inlib__vec2f_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__node[] = {  {&_swigt__p_inlib__sg__sphere, _p_inlib__sg__sphereTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__blend, _p_inlib__sg__blendTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__selection, _p_inlib__sg__selectionTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__vertices, _p_inlib__sg__verticesTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__atb_vertices, _p_inlib__sg__atb_verticesTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__rgba, _p_inlib__sg__rgbaTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__group, _p_inlib__sg__groupTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__plotter, _p_inlib__sg__plotterTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__torche, _p_inlib__sg__torcheTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__polyhedron, _p_inlib__sg__polyhedronTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__draw_style, _p_inlib__sg__draw_styleTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__shade_model, _p_inlib__sg__shade_modelTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__ortho, _p_inlib__sg__orthoTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__base_camera, _p_inlib__sg__base_cameraTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__separator, _p_inlib__sg__separatorTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__tex_rect, _p_inlib__sg__tex_rectTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__lrbt, _p_inlib__sg__lrbtTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__cube, _p_inlib__sg__cubeTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__head_light, _p_inlib__sg__head_lightTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__perspective, _p_inlib__sg__perspectiveTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__plots, _p_inlib__sg__plotsTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__matrix, _p_inlib__sg__matrixTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__node, 0, 0, 0},  {&_swigt__p_inlib__sg__frustum, _p_inlib__sg__frustumTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__cone_hat, _p_inlib__sg__cone_hatTo_p_inlib__sg__node, 0, 0},  {&_swigt__p_inlib__sg__colored_sized_points, _p_inlib__sg__colored_sized_pointsTo_p_inlib__sg__node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__ortho[] = {  {&_swigt__p_inlib__sg__ortho, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__painting_policy[] = {  {&_swigt__p_inlib__sg__painting_policy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__perspective[] = {  {&_swigt__p_inlib__sg__perspective, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__plots[] = {  {&_swigt__p_inlib__sg__plots, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__plottable[] = {  {&_swigt__p_inlib__sg__plottable, 0, 0, 0},  {&_swigt__p_inlib__sg__h1d2plot_cp, _p_inlib__sg__h1d2plot_cpTo_p_inlib__sg__plottable, 0, 0},  {&_swigt__p_inlib__sg__h1d2plot, _p_inlib__sg__h1d2plotTo_p_inlib__sg__plottable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__plotter[] = {  {&_swigt__p_inlib__sg__plotter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__plotter__colormap_axis_labeling_type[] = {  {&_swigt__p_inlib__sg__plotter__colormap_axis_labeling_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__plotter__shape_type[] = {  {&_swigt__p_inlib__sg__plotter__shape_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__polyhedron[] = {  {&_swigt__p_inlib__sg__polyhedron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__projection_type[] = {  {&_swigt__p_inlib__sg__projection_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__render_action[] = {  {&_swigt__p_inlib__sg__render_action, 0, 0, 0},  {&_swigt__p_inlib__sg__zb_action, _p_inlib__sg__zb_actionTo_p_inlib__sg__render_action, 0, 0},  {&_swigt__p_inlib__sg__gl2ps_action, _p_inlib__sg__gl2ps_actionTo_p_inlib__sg__render_action, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__render_manager[] = {  {&_swigt__p_inlib__sg__render_manager, 0, 0, 0},  {&_swigt__p_inlib__sg__zb_manager, _p_inlib__sg__zb_managerTo_p_inlib__sg__render_manager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__rgba[] = {  {&_swigt__p_inlib__sg__rgba, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__selection[] = {  {&_swigt__p_inlib__sg__selection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__separator[] = {  {&_swigt__p_inlib__sg__separator, 0, 0, 0},  {&_swigt__p_inlib__sg__selection, _p_inlib__sg__selectionTo_p_inlib__sg__separator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_bool_t[] = {  {&_swigt__p_inlib__sg__sfT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_float_t[] = {  {&_swigt__p_inlib__sg__sfT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_int_t[] = {  {&_swigt__p_inlib__sg__sfT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_unsigned_char_t[] = {  {&_swigt__p_inlib__sg__sfT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_unsigned_int_t[] = {  {&_swigt__p_inlib__sg__sfT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sfT_unsigned_short_t[] = {  {&_swigt__p_inlib__sg__sfT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__area_style_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__area_style_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__draw_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__draw_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__hjust_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__hjust_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__marker_style_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__marker_style_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__projection_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__projection_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__shade_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__shade_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__vjust_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__vjust_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_enumT_inlib__sg__winding_type_t[] = {  {&_swigt__p_inlib__sg__sf_enumT_inlib__sg__winding_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_imgT_inlib__byte_t[] = {  {&_swigt__p_inlib__sg__sf_imgT_inlib__byte_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_mat4f[] = {  {&_swigt__p_inlib__sg__sf_mat4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_rotf[] = {  {&_swigt__p_inlib__sg__sf_rotf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_string[] = {  {&_swigt__p_inlib__sg__sf_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_vec3f[] = {  {&_swigt__p_inlib__sg__sf_vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sf_vecT_inlib__colorf_float_t[] = {  {&_swigt__p_inlib__sg__sf_vecT_inlib__colorf_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__shade_model[] = {  {&_swigt__p_inlib__sg__shade_model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__shade_type[] = {  {&_swigt__p_inlib__sg__shade_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__sphere[] = {  {&_swigt__p_inlib__sg__sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__style[] = {  {&_swigt__p_inlib__sg__style, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__style_ROOT_colormap[] = {  {&_swigt__p_inlib__sg__style_ROOT_colormap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__style_colormap[] = {  {&_swigt__p_inlib__sg__style_colormap, 0, 0, 0},  {&_swigt__p_inlib__sg__style_default_colormap, _p_inlib__sg__style_default_colormapTo_p_inlib__sg__style_colormap, 0, 0},  {&_swigt__p_inlib__sg__style_ROOT_colormap, _p_inlib__sg__style_ROOT_colormapTo_p_inlib__sg__style_colormap, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__style_default_colormap[] = {  {&_swigt__p_inlib__sg__style_default_colormap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__tex_rect[] = {  {&_swigt__p_inlib__sg__tex_rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__text_style[] = {  {&_swigt__p_inlib__sg__text_style, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__torche[] = {  {&_swigt__p_inlib__sg__head_light, _p_inlib__sg__head_lightTo_p_inlib__sg__torche, 0, 0},  {&_swigt__p_inlib__sg__torche, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__vertices[] = {  {&_swigt__p_inlib__sg__colored_sized_points, _p_inlib__sg__colored_sized_pointsTo_p_inlib__sg__vertices, 0, 0},  {&_swigt__p_inlib__sg__vertices, 0, 0, 0},  {&_swigt__p_inlib__sg__atb_vertices, _p_inlib__sg__atb_verticesTo_p_inlib__sg__vertices, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__viewer[] = {  {&_swigt__p_inlib__sg__viewer, 0, 0, 0},  {&_swigt__p_inlib__sg__gui_viewer, _p_inlib__sg__gui_viewerTo_p_inlib__sg__viewer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__vjust[] = {  {&_swigt__p_inlib__sg__vjust, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__winding_type[] = {  {&_swigt__p_inlib__sg__winding_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__write_action[] = {  {&_swigt__p_inlib__sg__write_bsg, _p_inlib__sg__write_bsgTo_p_inlib__sg__write_action, 0, 0},  {&_swigt__p_inlib__sg__write_action, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__write_bsg[] = {  {&_swigt__p_inlib__sg__write_bsg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__zb_action[] = {  {&_swigt__p_inlib__sg__zb_action, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__sg__zb_manager[] = {  {&_swigt__p_inlib__sg__zb_manager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__std_string[] = {  {&_swigt__p_inlib__std_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__uchar[] = {  {&_swigt__p_inlib__uchar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__ushort[] = {  {&_swigt__p_inlib__ushort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__vec2f[] = {  {&_swigt__p_inlib__vec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__vec3d[] = {  {&_swigt__p_inlib__vec3d, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__vec3f[] = {  {&_swigt__p_inlib__vec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__waxml__file[] = {  {&_swigt__p_inlib__waxml__file, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__wps[] = {  {&_swigt__p_inlib__wps, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__xml__styles[] = {  {&_swigt__p_inlib__xml__styles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inlib__zb__buffer[] = {  {&_swigt__p_inlib__zb__buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_inlib__rroot__key_p_t[] = {  {&_swigt__p_std__vectorT_inlib__rroot__key_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_inlib__sg__plotter__unit_type_t[] = {  {&_swigt__p_std__vectorT_inlib__sg__plotter__unit_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_inlib__vec2f_t[] = {  {&_swigt__p_std__vectorT_inlib__vec2f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ZPixel,
  _swigc__p_bool,
  _swigc__p_difference_type,
  _swigc__p_float,
  _swigc__p_inlib__SOPI__blue32,
  _swigc__p_inlib__SOPI__cmap,
  _swigc__p_inlib__SOPI__col16,
  _swigc__p_inlib__SOPI__col64,
  _swigc__p_inlib__SOPI__colbr128,
  _swigc__p_inlib__SOPI__colbr32,
  _swigc__p_inlib__SOPI__color,
  _swigc__p_inlib__SOPI__colrj128,
  _swigc__p_inlib__SOPI__colrj32,
  _swigc__p_inlib__SOPI__colrv32,
  _swigc__p_inlib__SOPI__cyan32,
  _swigc__p_inlib__SOPI__green32,
  _swigc__p_inlib__SOPI__grey128,
  _swigc__p_inlib__SOPI__grey256,
  _swigc__p_inlib__SOPI__grey32,
  _swigc__p_inlib__SOPI__greyinv128,
  _swigc__p_inlib__SOPI__greyinv32,
  _swigc__p_inlib__SOPI__midas_bluered,
  _swigc__p_inlib__SOPI__midas_bluewhite,
  _swigc__p_inlib__SOPI__midas_color,
  _swigc__p_inlib__SOPI__midas_heat,
  _swigc__p_inlib__SOPI__midas_idl14,
  _swigc__p_inlib__SOPI__midas_idl15,
  _swigc__p_inlib__SOPI__midas_manycol,
  _swigc__p_inlib__SOPI__midas_pastel,
  _swigc__p_inlib__SOPI__midas_rainbow3,
  _swigc__p_inlib__SOPI__midas_staircase,
  _swigc__p_inlib__SOPI__midas_stairs8,
  _swigc__p_inlib__SOPI__midas_stairs9,
  _swigc__p_inlib__SOPI__orange32,
  _swigc__p_inlib__SOPI__red32,
  _swigc__p_inlib__SOPI__rgb216,
  _swigc__p_inlib__SOPI__rgb32768,
  _swigc__p_inlib__SOPI__rgb4096,
  _swigc__p_inlib__SOPI__rgb512,
  _swigc__p_inlib__SOPI__violet32,
  _swigc__p_inlib__SOPI__yellow32,
  _swigc__p_inlib__args,
  _swigc__p_inlib__box3d,
  _swigc__p_inlib__box3f,
  _swigc__p_inlib__colorf,
  _swigc__p_inlib__hep__polyhedron,
  _swigc__p_inlib__hep__polyhedron_tubs,
  _swigc__p_inlib__hep__sf_polyhedron,
  _swigc__p_inlib__histo__c2d,
  _swigc__p_inlib__histo__c3d,
  _swigc__p_inlib__histo__h1d,
  _swigc__p_inlib__histo__h2d,
  _swigc__p_inlib__histo__h3d,
  _swigc__p_inlib__histo__p1d,
  _swigc__p_inlib__histo__p2d,
  _swigc__p_inlib__imgT_inlib__byte_t,
  _swigc__p_inlib__lineT_inlib__vec3f_t,
  _swigc__p_inlib__lutT_double_t,
  _swigc__p_inlib__lutT_float_t,
  _swigc__p_inlib__mat4f,
  _swigc__p_inlib__net__base_socket,
  _swigc__p_inlib__net__inet_socket,
  _swigc__p_inlib__net__sg_client,
  _swigc__p_inlib__opener,
  _swigc__p_inlib__printer,
  _swigc__p_inlib__random__bw,
  _swigc__p_inlib__random__exp,
  _swigc__p_inlib__random__flat,
  _swigc__p_inlib__random__gauss,
  _swigc__p_inlib__rbwd,
  _swigc__p_inlib__rdir2d,
  _swigc__p_inlib__rdir3d,
  _swigc__p_inlib__rexpd,
  _swigc__p_inlib__rgaussd,
  _swigc__p_inlib__rotd,
  _swigc__p_inlib__rotf,
  _swigc__p_inlib__rroot__TDirectory,
  _swigc__p_inlib__rroot__base_leaf,
  _swigc__p_inlib__rroot__branch,
  _swigc__p_inlib__rroot__directory,
  _swigc__p_inlib__rroot__fac,
  _swigc__p_inlib__rroot__file,
  _swigc__p_inlib__rroot__ifac,
  _swigc__p_inlib__rroot__ifile,
  _swigc__p_inlib__rroot__key,
  _swigc__p_inlib__rroot__leafT_double_t,
  _swigc__p_inlib__rroot__leafT_float_t,
  _swigc__p_inlib__rroot__leafT_int_t,
  _swigc__p_inlib__rroot__tree,
  _swigc__p_inlib__rtausmed,
  _swigc__p_inlib__rtausmeui,
  _swigc__p_inlib__sg__area_style,
  _swigc__p_inlib__sg__atb_vertices,
  _swigc__p_inlib__sg__base_camera,
  _swigc__p_inlib__sg__base_freetype,
  _swigc__p_inlib__sg__base_tex,
  _swigc__p_inlib__sg__blend,
  _swigc__p_inlib__sg__colored_sized_points,
  _swigc__p_inlib__sg__cone_hat,
  _swigc__p_inlib__sg__cube,
  _swigc__p_inlib__sg__draw_style,
  _swigc__p_inlib__sg__draw_type,
  _swigc__p_inlib__sg__font_modeling,
  _swigc__p_inlib__sg__frustum,
  _swigc__p_inlib__sg__gl2ps_action,
  _swigc__p_inlib__sg__gl2ps_manager,
  _swigc__p_inlib__sg__group,
  _swigc__p_inlib__sg__gui_viewer,
  _swigc__p_inlib__sg__guiv,
  _swigc__p_inlib__sg__h1d2plot,
  _swigc__p_inlib__sg__h1d2plot_cp,
  _swigc__p_inlib__sg__hatching_policy,
  _swigc__p_inlib__sg__head_light,
  _swigc__p_inlib__sg__hjust,
  _swigc__p_inlib__sg__lrbt,
  _swigc__p_inlib__sg__marker_style,
  _swigc__p_inlib__sg__matrix,
  _swigc__p_inlib__sg__mfT_float_t,
  _swigc__p_inlib__sg__mf_enumT_inlib__sg__plotter__unit_type_t,
  _swigc__p_inlib__sg__mf_string,
  _swigc__p_inlib__sg__mf_vecT_inlib__vec2f_float_t,
  _swigc__p_inlib__sg__node,
  _swigc__p_inlib__sg__ortho,
  _swigc__p_inlib__sg__painting_policy,
  _swigc__p_inlib__sg__perspective,
  _swigc__p_inlib__sg__plots,
  _swigc__p_inlib__sg__plottable,
  _swigc__p_inlib__sg__plotter,
  _swigc__p_inlib__sg__plotter__colormap_axis_labeling_type,
  _swigc__p_inlib__sg__plotter__shape_type,
  _swigc__p_inlib__sg__polyhedron,
  _swigc__p_inlib__sg__projection_type,
  _swigc__p_inlib__sg__render_action,
  _swigc__p_inlib__sg__render_manager,
  _swigc__p_inlib__sg__rgba,
  _swigc__p_inlib__sg__selection,
  _swigc__p_inlib__sg__separator,
  _swigc__p_inlib__sg__sfT_bool_t,
  _swigc__p_inlib__sg__sfT_float_t,
  _swigc__p_inlib__sg__sfT_int_t,
  _swigc__p_inlib__sg__sfT_unsigned_char_t,
  _swigc__p_inlib__sg__sfT_unsigned_int_t,
  _swigc__p_inlib__sg__sfT_unsigned_short_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__area_style_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__draw_type_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__font_modeling_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__hatching_policy_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__hjust_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__marker_style_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__painting_policy_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__plotter__colormap_axis_labeling_type_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__plotter__shape_type_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__projection_type_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__shade_type_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__vjust_t,
  _swigc__p_inlib__sg__sf_enumT_inlib__sg__winding_type_t,
  _swigc__p_inlib__sg__sf_imgT_inlib__byte_t,
  _swigc__p_inlib__sg__sf_mat4f,
  _swigc__p_inlib__sg__sf_rotf,
  _swigc__p_inlib__sg__sf_string,
  _swigc__p_inlib__sg__sf_vec3f,
  _swigc__p_inlib__sg__sf_vecT_inlib__colorf_float_t,
  _swigc__p_inlib__sg__shade_model,
  _swigc__p_inlib__sg__shade_type,
  _swigc__p_inlib__sg__sphere,
  _swigc__p_inlib__sg__style,
  _swigc__p_inlib__sg__style_ROOT_colormap,
  _swigc__p_inlib__sg__style_colormap,
  _swigc__p_inlib__sg__style_default_colormap,
  _swigc__p_inlib__sg__tex_rect,
  _swigc__p_inlib__sg__text_style,
  _swigc__p_inlib__sg__torche,
  _swigc__p_inlib__sg__vertices,
  _swigc__p_inlib__sg__viewer,
  _swigc__p_inlib__sg__vjust,
  _swigc__p_inlib__sg__winding_type,
  _swigc__p_inlib__sg__write_action,
  _swigc__p_inlib__sg__write_bsg,
  _swigc__p_inlib__sg__zb_action,
  _swigc__p_inlib__sg__zb_manager,
  _swigc__p_inlib__std_string,
  _swigc__p_inlib__uchar,
  _swigc__p_inlib__ushort,
  _swigc__p_inlib__vec2f,
  _swigc__p_inlib__vec3d,
  _swigc__p_inlib__vec3f,
  _swigc__p_inlib__waxml__file,
  _swigc__p_inlib__wps,
  _swigc__p_inlib__xml__styles,
  _swigc__p_inlib__zb__buffer,
  _swigc__p_size_type,
  _swigc__p_std__ostream,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_inlib__rroot__key_p_t,
  _swigc__p_std__vectorT_inlib__sg__plotter__unit_type_t,
  _swigc__p_std__vectorT_inlib__vec2f_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

