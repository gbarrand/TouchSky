// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file TouchSky.license for terms.

#ifndef TouchSky_TouchSky_main
#define TouchSky_TouchSky_main

#include <string>

#include "version"
#include "actions"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#include <exlib/app/main>
#include <exlib/fits/cfitsio_opener>
#include <exlib/sg/rbsg_factories>
#include <exlib/bsg_opener>

#include <exlib/sg/view_lua>
extern "C" {
int luaopen_inlib(lua_State*);
}

#ifdef APP_USE_PYTHON
#include <exlib/uzres>
#include <exlib/sg/view_Python>
extern "C" {
  void initinlib_swig_py();
}
#endif

#include <exlib/insh/app>
#include <exlib/insh/fits>
#include <exlib/insh/astro>
#include <exlib/insh/dc2>
#ifdef APP_USE_SOPHYA
#include <exlib/insh/SOPHYA>
#endif

#include <inlib/hep/load_pdg_table>
#include <inlib/sg/rbsg_factories>
#include <inlib/sg/simbad_opener>

#include <inlib/cbk/plots_popup>
#include <inlib/cbk/healpix_popup>
#include <inlib/cbk/cfitsio_popup>

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

namespace TouchSky {

class main
:public exlib::app::main
,public inlib::sg::view_evd 
,public inlib::sg::view_astro
,public inlib::sg::plotarea
,public exlib::sg::view_lua
#ifdef APP_USE_PYTHON
,public exlib::sg::view_Python
#endif
{
  typedef exlib::app::main parent;
  typedef inlib::sg::view_evd parent_evd;
  typedef inlib::sg::view_astro parent_astro;
  typedef inlib::sg::plotarea parent_plotarea;
  typedef exlib::sg::view_lua parent_lua;
#ifdef APP_USE_PYTHON
  typedef exlib::sg::view_Python parent_Python;
#endif
public:
  INLIB_SCLASS(TouchSky::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_evd>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_plotarea>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_astro>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<parent_lua>(this,a_class)) return p;
#ifdef APP_USE_PYTHON
    if(void* p = inlib::cmp_cast<parent_Python>(this,a_class)) return p;
#endif
    return parent::cast(a_class);
  }
public:
  static const std::string& s_version() {
    static const std::string s_v(TOUCHSKY_VERSION);
    return s_v;
  }
  static const std::string& s_args_help() {
    static const std::string s_v;
    return s_v;
  }
protected:
  virtual inlib::sg::node* create_main_menu() {
    insh().exec_line_reset_to_stop("gui_main.insh");
    return pop_list(false); //important: have false to not delete the popped item.
  }

  virtual void create_camenu_items(unsigned int a_nb,float a_wcw,float a_wch,float a_wb,float a_hb) {
    parent::create_camenu_items(a_nb,a_wcw,a_wch,a_wb,a_hb);

    INLIB_VIEW_EVD_ADD_CAMENU_ITEMS
    
    if(inlib::device::is_emscripten()) {
    } else {
      unsigned int _row = 0;
      inlib::sg::create_main_button_insh(*this,
                                         a_wcw,a_wch,a_wb,a_hb,0,
                                         2,_row++,"static=>",camenu_send_button(),insh(),"scene_send_static");

      inlib::sg::create_main_button(m_out,m_res_dir,parent::m_params,m_image_readers,m_ttf,
                         m_camenu_sep,a_wcw,a_wch,a_wb,a_hb,0,
                         2,_row++,"-","-","",
                         new inlib::sg::gv_cbk(*this,action_dec_modeling_scale));

      inlib::sg::create_main_button(m_out,m_res_dir,parent::m_params,m_image_readers,m_ttf,
                         m_camenu_sep,a_wcw,a_wch,a_wb,a_hb,0,
                         2,_row++,"+","+","",
                         new inlib::sg::gv_cbk(*this,action_inc_modeling_scale));
    }

    update_camenu_send_button(m_params);
  }

protected:  //insh:
  static void insh_app_version(inlib::ishell& a_insh,const std::vector<std::string>&) {
    a_insh.out(TOUCHSKY_VERSION);
  }
  EXLIB_INSH_APP_HEADER(main)
public:
  main(std::ostream& a_out,
       inlib::sg::render_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const inlib::sg::selection& a_selection,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("TouchSky",TOUCHSKY_VERSION,a_out,a_gl_mgr,a_ttf,a_selection,
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,parent_evd(*((inlib::sg::gui_viewer*)this))
  ,parent_astro(a_out,m_srvs)
  ,parent_plotarea(*((inlib::sg::gui_viewer*)this))
  ,parent_lua(*((inlib::sg::viewer*)this),false)
#ifdef APP_USE_PYTHON
  ,parent_Python(*((inlib::sg::viewer*)this),false)
#endif
  ,m_pdgs(a_out)
  {
    //////////////////////////////////////////////////////
    /// insh: ////////////////////////////////////////////
    //////////////////////////////////////////////////////
    if(!inlib::hep::load_default_pdg_table(m_pdgs)) {}
    
    insh_app_add_cmds();
    INLIB_INSH_ADD_ISHELL_ARGS_CMD(insh(),app_version,
      insh_app_version,
      "app_version: app_version\n  Print the application version.\n")
    EXLIB_INSH_FITS_ADDS(insh(),parent::get_omanager())
    EXLIB_INSH_ASTRO_ADDS(insh(),*this)
    EXLIB_INSH_DC2_ADDS(insh(),*this)
#ifdef APP_USE_SOPHYA
    EXLIB_INSH_SOPHYA_ADDS(insh(),*this)
#endif

    ////////////////////////////////////////////////////// 
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    m_opener.add_ext("*");
    m_opener.add_ext(inlib::file::s_ext_fits());
//    m_opener.add_ext(inlib::file::s_ext_scenarios());
//    m_opener.add_ext(inlib::file::s_ext_slides());
    m_opener.add_ext(inlib::file::s_ext_bsg());

    m_opener.add_opener(inlib::file::s_format_fits(),new exlib::cfitsio_opener());

    if(inlib::device::is_emscripten()) {
      m_opener.add_opener(inlib::file::s_format_simbad(),new inlib::sg::simbad_opener());
    }

   {inlib::sg::bsg_factories bfac;
    inlib::sg::add_factories(bfac);
    exlib::sg::add_factories(bfac);
    m_opener.add_opener(inlib::file::s_format_bsg(),new exlib::bsg_opener(bfac));}

//    m_opener.add_opener(inlib::file::s_format_scenarios(),new exlib::scenarios_opener(m_opener.openers()));
//    m_opener.add_opener(inlib::file::s_format_slides(),new exlib::slides_opener(m_opener.openers()));

    m_popup_cbks.add(new inlib::cbk::plots_popup(*this));
    m_popup_cbks.add(new inlib::cbk::healpix_popup(*this));
    m_popup_cbks.add(new inlib::cbk::cfitsio_popup(*this));
 
    ///////////////////////////////////////////////////
    /// lua: //////////////////////////////////////////
    ///////////////////////////////////////////////////
    if(!parent_lua::initialize()) {
    } else {
      luaopen_inlib(parent_lua::lua_state());
    }

    ///////////////////////////////////////////////////
    /// python: ///////////////////////////////////////
    ///////////////////////////////////////////////////
#ifdef APP_USE_PYTHON
   {std::string file = a_res_dir+inlib::sep()+"python_2_7_lib_py.zip";    
    bool permanent = inlib::device::is_iOS()||inlib::device::is_Android()?true:false;
    if(!exlib::unfold_res_file(m_out,"PYTHONHOME",file,"python_2_7",a_data_dir,a_tmp_dir,permanent,"TouchSky_",m_tmp_dirs)){}}
    //NOTE : in Python/src/Modules/getpath.c, the cpp VERSION must be 2.7.
    inlib::put_env("PYTHONPATH",a_res_dir); //to find inlib.py
    if(!parent_Python::initialize()){}
    initinlib_swig_py();
#endif

    //////////////////////////////////////////////////////
    /// view_astro: //////////////////////////////////////
    //////////////////////////////////////////////////////
    set_host(inlib::s_local());
    set_port(0);

    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////

    show_main_menu();
  }
  virtual ~main() {}
protected:
  main(const main& a_from)
  :inlib::sg::ui(a_from)
  ,inlib::sg::alert(a_from)
  ,parent(a_from)
  ,parent_evd(a_from)
  ,parent_plotarea(a_from)
  ,parent_astro(a_from)
  ,parent_lua(a_from)
#ifdef APP_USE_PYTHON
  ,parent_Python(a_from)
#endif
  ,m_pdgs(a_from.m_pdgs)
  {}
private:
  main& operator=(const main& a_from){
    m_pdgs = a_from.m_pdgs;
    return *this;
  }
protected:  
  inlib::hep::pdgs m_pdgs;
};

}

#endif
