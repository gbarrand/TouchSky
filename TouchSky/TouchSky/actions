// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file TouchSky.license for terms.

#ifndef TouchSky_TouchSky_actions
#define TouchSky_TouchSky_actions

#include <inlib/sg/view_evd>

#include <inlib/sg/image_grid>
#include <exlib/sg/tile_image>

namespace TouchSky {

inline inlib::sg::return_action action_inc_modeling_scale(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  typedef inlib::sg::image_grid<exlib::sg::tile_image> grid_t;

  inlib::sg::separator& ssep = _evd->static_sg();
  grid_t* node = inlib::sg::find_first_node_of_class<grid_t>(a_gv.out(),ssep);
  //grid_t* node = inlib::sg::search_node<grid_t>(a_gv.out(),ssep);
  if(!node) {
    a_gv.show_console("image_grid node not found");
    return inlib::sg::return_none;  
  }

  node->modeling_scale_factor = node->modeling_scale_factor.value()+1;

  a_gv.num2console(node->modeling_scale_factor.value());
  a_gv.hide_popup(); //to avoid pointing toward a no more existing object.

  return inlib::sg::return_to_render;     
}

inline inlib::sg::return_action action_dec_modeling_scale(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::view_evd* _evd = inlib::sg::cast_view_evd(a_gv);
  if(!_evd) return inlib::sg::return_none;

  typedef inlib::sg::image_grid<exlib::sg::tile_image> grid_t;

  inlib::sg::separator& ssep = _evd->static_sg();
  grid_t* node = inlib::sg::find_first_node_of_class<grid_t>(a_gv.out(),ssep);
//grid_t* node = inlib::sg::search_node<grid_t>(a_gv.out(),ssep);
  if(!node) {
    a_gv.show_console("image_grid node not found");
    return inlib::sg::return_none;  
  }

  if(node->modeling_scale_factor.value()>=1) {
    node->modeling_scale_factor = node->modeling_scale_factor.value()-1;
  }

  a_gv.num2console(node->modeling_scale_factor.value());
  a_gv.hide_popup(); //to avoid pointing toward a no more existing object.

  return inlib::sg::return_to_render;     
}

}

#include <inlib/sg/plotarea>

namespace TouchSky {

inline inlib::sg::return_action action_show_hide_plots(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::plotarea* _pa = inlib::sg::cast_plotarea(a_gv);
  if(!_pa) return inlib::sg::return_none;
  _pa->show_hide();

  //inlib::sg::search_action action(a_gv.out());
  //const inlib::sg::paths_t _paths = inlib::sg::find_paths<inlib::sg::plots>(action,a_gv.scene());
  //inlib_vforcit(inlib::sg::path_t,_paths,it) {
  //  inlib::sg::_switch* _sw = inlib::sg::rfind<inlib::sg::_switch>(*it);
  //  if(_sw) _sw->which = _sw->which.value()==0?1:0; //SHOWN=0
  //}

  a_gv.hide_main_menu();

  return inlib::sg::return_to_render;     
}

}

#include <exlib/cbk/astro>

namespace TouchSky {

inline inlib::sg::return_action action_NCC_1701(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data& a_data) {
  std::string file = a_gv.res_dir()+inlib::sep()+"star_trek_enterprise.bsg";    
  a_gv.hide_main_menu(); //before open() in case open wants main menu.
  bool done;
  a_gv.opener().open(file,inlib::file::s_format_bsg(),inlib::args(),done);
  return inlib::sg::return_to_render;
}

inline inlib::sg::return_action action_some_STSCI(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data& a_data) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  inlib::sg::add_white_item(a_gv,*list,"M51",exlib::astro::action_get_M51);
  inlib::sg::add_white_item(a_gv,*list,"M82",exlib::astro::action_get_M82);
  inlib::sg::add_white_item(a_gv,*list,"M104",exlib::astro::action_get_M104);
  inlib::sg::add_white_item(a_gv,*list,"M63",exlib::astro::action_get_M63);
  inlib::sg::add_white_item(a_gv,*list,"M106",exlib::astro::action_get_M106);
  inlib::sg::add_white_item(a_gv,*list,"M42",exlib::astro::action_get_M42);
  inlib::sg::add_white_item(a_gv,*list,"NGC6543 (Cat's eye)",exlib::astro::action_get_NGC6543);
  inlib::sg::add_white_item(a_gv,*list,"Sgr A*",exlib::astro::action_get_Sgr_A_star);
//inlib::sg::add_white_item(a_gv,*list,"Alnilam",exlib::astro::action_get_Alnilam); //too long.
  inlib::sg::add_white_item(a_gv,*list,"0 90",exlib::astro::action_get_0_90);
  inlib::sg::add_white_item(a_gv,*list,"270 0",exlib::astro::action_get_270_0);
  inlib::sg::add_white_item(a_gv,*list,"90 45",exlib::astro::action_get_90_45);

  a_gv.show_widget(a_data,list);
  return inlib::sg::return_to_render;
}

}

#include <exlib/cbk/pimg>
#include <inlib/cbk/astro>

namespace TouchSky {

inline inlib::sg::return_action action_some_pimg(inlib::sg::gui_viewer& a_gv,const inlib::sg::pos_data& a_data) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  inlib::sg::view_astro* _vastro = inlib::sg::cast_view_astro(a_gv);
  if(_vastro) {
    //list->label.value("host : "+_vastro->host());
    inlib::sg::add_white_item(a_gv,*list,"Set host ("+_vastro->host()+")",inlib::cbk::action_pimg_host,a_data);
  }
/*
  inlib::sg::add_white_item(a_gv,*list,"SDSS/Stripe82",exlib::astro::action_Stripe_82_pyrfits);
  inlib::sg::add_white_item(a_gv,*list,"CFHTLS_1",exlib::astro::action_CFHTLS_1_pyrfits);
  inlib::sg::add_white_item(a_gv,*list,"M51_large",exlib::astro::action_M51_large_pyrfits);
  inlib::sg::add_white_item(a_gv,*list,"sky_20",exlib::astro::action_sky_20_pyrfits);
  inlib::sg::add_white_item(a_gv,*list,"sky_40",exlib::astro::action_sky_40_pyrfits);
*/

  inlib::sg::add_white_item(a_gv,*list,"CFHTLS_1.pfits",exlib::astro::action_CFHTLS_1_pfits);
  inlib::sg::add_white_item(a_gv,*list,"M51_large.pfits",exlib::astro::action_M51_large_pfits);
//  inlib::sg::add_white_item(a_gv,*list,"sky_40.pfits",exlib::astro::action_sky_40_pfits);
//  inlib::sg::add_white_item(a_gv,*list,"CFHTLS_1.phdf5",exlib::astro::action_CFHTLS_1_phdf5);
//  inlib::sg::add_white_item(a_gv,*list,"sky_40.phdf5",exlib::astro::action_sky_40_phdf5);
//  inlib::sg::add_white_item(a_gv,*list,"sky_40.proot",exlib::astro::action_sky_40_proot);

  a_gv.show_widget(a_data,list);
  return inlib::sg::return_to_render;
}

}

#endif
